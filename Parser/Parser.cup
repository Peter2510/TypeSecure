/* Codigo de usuario */

// importaciones y paquetes

package com.peter.typesecure.parser;


import com.peter.typesecure.analisis.ejecucion.auxiliares.*;
import com.peter.typesecure.ejecucion.Condicionales.*;
import com.peter.typesecure.ejecucion.Genericos.*;
import com.peter.typesecure.ejecucion.instrucciones.*;
import com.peter.typesecure.ejecucion.instrucciones.functions.*;
import com.peter.typesecure.lexer.Lexer;
import java_cup.runtime.Symbol;
import com.peter.typesecure.error.Error_analizadores;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.Map;



// Codigo para el parser, variables, metodos

parser code {:

    public Parser(Lexer lexer) {
        super(lexer);
    }

    public ArrayList<Instruction> instructions = new ArrayList<>();

    //Array errores
    
    public static ArrayList<Error_analizadores> errores = Lexer.errores;
    public int contador_errores_lexico_sintacticos = 0;
    public ArrayList<Error_analizadores> erroresSemanticos = new ArrayList<>();
    public int contador_errores_semanticos = 0;

    //Metodo llamado automaticamente al encontrar error sintanctico

    public void syntax_error(Symbol s){

    

    if(s.sym == 0){

    errores.add( new Error_analizadores("Sintactico", "No se esperaba el fin del archivo ") );
    contador_errores_lexico_sintacticos++;

    }else{

        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        errores.add( new Error_analizadores("Sintactico", lexema, fila, columna, "No se esperaba este token") );
        contador_errores_lexico_sintacticos++;
        //System.out.println("Error Sintactico hallado");
        //System.out.println("Lexema " + lexema + " linea"  + fila + " columna " + columna);
    }

    
    }

    //Metodo llamado cuando no se puede recuperar de un error
    
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 

    
        
    if(s.sym == 0){

    errores.add( new Error_analizadores("Sintactico", "No se esperaba el fin del archivo ") );
    contador_errores_lexico_sintacticos++;

    }else{

        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        contador_errores_lexico_sintacticos++;
        errores.add( new Error_analizadores("Sintactico", lexema, fila, columna, "No se esperaba este token") );
        //System.out.println("Error Sintactico hallado");
        //System.out.println("Lexema " + lexema + " linea"  + fila + " columna " + columna);
    }
        
    } 

:}

                                                    // CODIGO PARA LAS ACCIONES GRAMATICALES

            /* Declaraciones de terminales y no terminales */

    /* TERMINALES */

/* NUMEROS */

terminal NUMBER;

terminal BIGINT;

/* ID */
terminal ID;

/* TEXTO */
terminal TEXTO;

/* BOOLEANOS */
terminal TRUE,FALSE;

/* TIPOS DE DATOS */
terminal RNUMBER,RBIGINT,RSTRING,RBOOLEAN,RVOID,RCONST,RLET;

/* SIMBOLOS ARITMETICOS */

terminal MAS,MENOS,MULTIPLICACION,MOD,DIVISION,UMENOS;
terminal PARENTESIS_ABIERTO,PARENTESIS_CERRADO;
terminal INCREMENTO,DECREMENTO;

/* ASIGNACION */
terminal ASIGNACION;

/* OPERADORES LOGICOS */
terminal AND, OR, NOT;

/* OPERADORES RELACIONALES */
terminal MENOR_QUE, MENOR_IGUAL, MAYOR_QUE, MAYOR_IGUAL, COMPARACION, DISTINTO;

/* SIMBOLOS DE PUNTUACION*/

terminal PUNTO, COMA, DOS_PUNTOS, PUNTO_COMA;

/* SIMBOLOS DE AGRUPACION */

terminal CORCHETE_ABIERTO, CORCHETE_CERRADO;

/* FUNCIONES */

terminal FUNCTION;

//CONVERSION DE TIPOS
terminal FNUMBER, FBIGINT, FBOOLEAN, FSTRING;

//ACCESO PROPIEDAD
terminal LENGTH, CHARAT;

//MAYUSCULA, MINUSCULA
terminal TOLOWERCASE, TOUPPERCASE;

//ACCIONES VARIAS
terminal CONCAT, CONSOLE, LOG;

//SENTENCIAS DE CONTROL

terminal IF, ELSE, FOR, WHILE, DO, BREAK, CONTINUE, RETURN;

//VALORES ESTATICOS 
terminal MATH, E, PI, SQRT2, ABS, CEIL, COS, SIN, TAN, EXP, FLOOR, POW, SQRT, RANDOM, PRINTAST, GETSYMBOLTABLE;

/* NO TERMINALES */

//no terminal que da inicio a todo
non terminal inicio;

//no terminal que contiene el lenguaje TypeSecure
non terminal ts;

//opciones a ejecutar
non terminal ArrayList instrucciones, opciones_instrucciones;

//instruccion
non terminal instruccion;

//declaracion de variable
non terminal ArrayList declaracion_variable;
non terminal tipo_acceso_variable, id_valor_variable;
non terminal ArrayList id_valor_variable_lista;
non terminal tipo_dato_variable, variable_valor;

//asignacion
non terminal ArrayList asignacion;

//operaciones matematicas
non terminal operaciones_matematicas,funciones_numericas_estaticas;

//incremento decremento
non terminal incremento, decremento;

//funcion incremento decremento
non terminal ArrayList funcion_incremento_decremento;

//operaciones relacionales
non terminal operaciones_relacionales;

//operaciones logicas
non terminal operaciones_logicas;

        /* FUNCIONES */

//funcion length
non terminal funcion_length;

//funcion number
non terminal funcion_number;

//funcion biging
non terminal funcion_bigint;

//funcion boolean
non terminal funcion_boolean;

//funcion string
non terminal funcion_string;

//funcion charAt
non terminal funcion_char_at,index_char_at;

//funcion toLowerCase
non terminal funcion_to_lower_case;

//funcion toUpperCase
non terminal funcion_to_upper_case;

//funcion concat
non terminal variables_string, funcion_concat;

//funcion console log
non terminal ArrayList funcion_console_log;
non terminal ArrayList<Instruction> lista_instrucciones_console;

//declaracion de funciones
non terminal ArrayList declaracion_funcion;
non terminal Parameter parametro_funcion_declaracion;
non terminal ArrayList<Parameter> parametros_funcion_declaracion;
non terminal ArrayList instrucciones_funcion;
non terminal ArrayList instrucciones_funciones_sin_return;
non terminal ArrayList opciones_instrucciones_sin_return;

//funcion return
non terminal ArrayList funcion_return;

//funcion if
non terminal funcion_if, funcion_else, funcion_else_if;
non terminal ArrayList lista_else_if;
non terminal ArrayList opciones_if;

//llamada de funciones

non terminal ArrayList<Instruction> parametros_funcion_asignacion;
non terminal ArrayList llamada_funcion_normal;

//instruccion break
non terminal ArrayList instruccion_break;

//instruccion continue
non terminal ArrayList instruccion_continue;

//instruccion for Loop
non terminal ArrayList funcion_for;
non terminal accion_asignacion_for;

//instruccion do while
non terminal ArrayList funcion_do_while;

//instruccion while
non terminal ArrayList funcion_while;

//funcion printAst
non terminal ArrayList funcion_printAst;

//funcion getSymbolTable
non terminal ArrayList funcion_getSymbolTable;

// PRECEDENCIA

precedence left OR;
precedence left AND;
precedence left NOT;
precedence left COMPARACION, MENOR_QUE, MAYOR_QUE,MENOR_IGUAL,MAYOR_IGUAL;
precedence left MAS,MENOS;
precedence left MULTIPLICACION,DIVISION,MOD;
precedence right UMENOS; 
precedence right POW;
precedence left INCREMENTO,DECREMENTO;
precedence left PARENTESIS_ABIERTO,PARENTESIS_CERRADO;

start with inicio;

/* Reglas sintacticas */
 

// Da inicio a las transiciones

inicio ::= ts:a {: System.out.println("Doc ok"); 
                   
                

             :}
       ;

ts ::= instrucciones:a {: 
                                        for(int i =0; i<a.size();i++){
                                            instructions.add((Instruction) a.get(i));
                                       }

  :}
   ;

instrucciones ::= instrucciones:a opciones_instrucciones:b {:

                                        for(int i =0; i<b.size();i++){
                                            a.add(b.get(i));
                                       }

                                       RESULT = a;                             
                                            
                                                            
                                         :}
                | opciones_instrucciones:a {:  

                                       //cae arrayList   
                                       ArrayList tmp_instrucciones = new ArrayList()  ;
                                       for(int i =0; i<a.size();i++){
                                            tmp_instrucciones.add(a.get(i));
                                       }

                                       RESULT = tmp_instrucciones;
                                         
                                          :}
               ;

opciones_instrucciones ::= declaracion_variable:a
                                            {: 
                                            
                                            RESULT = a;

                                           :}
                        |  asignacion:a   {: 
                                            
                                            RESULT = a;

                                           :}
                        |  funcion_console_log:a
                                            {: 
                                           RESULT = a;
                                           :}
                        |  declaracion_funcion:a
                                            {: 
                                            RESULT = a;
                                           :}
                        |  llamada_funcion_normal:a
                                            {: 
                                           RESULT = a;
                                           :}
                        |  opciones_if:a
                                            {: 
                                            RESULT = a;
                                           :}
                        |  funcion_return:a
                                            {: 
                                            RESULT = a;
                                           :}
                        |  instruccion_break:a
                                            {: 
                                           RESULT = a;
                                           :}
                        |  instruccion_continue:a
                                            {: 
                                           RESULT = a;
                                           :}
                        |  funcion_incremento_decremento:a
                                            {: 
                                            RESULT = a;
                                           :}
                        |  funcion_for:a
                                            {: 
                                          RESULT = a;
                                           :}
                        |  funcion_while:a
                                            {: 
                                           RESULT = a;
                                           :}
                        |  funcion_do_while:a
                                            {: 
                                             RESULT = a;
                                           :}
                        |  funcion_printAst:a
                                            {: 
                                           RESULT = a;
                                           :}
                        |  funcion_getSymbolTable:a
                                            {: 
                                            RESULT = a;
                                           :}
                        ;

opciones_instrucciones_sin_return ::= 
                        declaracion_variable:a
                                            {: 
                                            RESULT = a;
                                           :}
                        |  asignacion:a   {: 
                                            RESULT = a;
                                           :}
                        |  funcion_console_log:a
                                            {: 
                                            RESULT = a;
                                           :}
                        |  declaracion_funcion:a
                                            {: 
                                            RESULT = a;
                                           :}
                        |  llamada_funcion_normal:a
                                            {: 
                                            RESULT = a;
                                           :}
                        |  opciones_if:a
                                            {: 
                                            RESULT = a;
                                           :}
                        |  instruccion_break:a
                                            {: 
                                            RESULT = a;
                                           :}
                        |  instruccion_continue:a
                                            {: 
                                            RESULT = a;
                                           :}
                        |  funcion_incremento_decremento:a
                                            {: 
                                            RESULT = a;
                                           :}
                        |  funcion_for:a
                                            {: 
                                            RESULT = a;
                                           :}
                        |  funcion_while:a
                                            {: 
                                            RESULT = a;
                                           :}
                        |  funcion_do_while:a
                                            {: 
                                            RESULT = a;
                                           :}
                        |  funcion_printAst:a
                                            {: 
                                            RESULT = a;
                                           :}
                        |  funcion_getSymbolTable:a
                                            {: 
                                            RESULT = a;
                                           :}
                        ;

asignacion ::= ID:id ASIGNACION:igual variable_valor:value PUNTO_COMA:puntoComa {: 
                                                                                    
            ArrayList tmp_asignacion = new ArrayList();
            tmp_asignacion.add(new Assignment(idright,idleft,id,value));
            RESULT = tmp_asignacion;
                                                                                :}
            ;

declaracion_variable ::= tipo_acceso_variable:a id_valor_variable_lista:b PUNTO_COMA:c
        {: 

                ArrayList tmp_declaracion = new ArrayList();

                for(int i = 0;i<b.size();i++){

                    Variable_Aux variable = (Variable_Aux) b.get(i);    
                    tmp_declaracion.add(new Declaration(aright,aleft,a,variable.getType(),variable.getId(),variable.getValue()));
                }

                RESULT = tmp_declaracion;
           
        :}

                      ;

id_valor_variable_lista ::=  id_valor_variable_lista:a COMA:b id_valor_variable:c
                            {:

                            a.add(c);
                            RESULT = a;
                                                  
                            :}  
                         |   id_valor_variable:a
                            {:
                            
                                RESULT = new ArrayList<>(); RESULT.add(a);

                            :}
                         ;

id_valor_variable ::= ID:id DOS_PUNTOS:b tipo_dato_variable:tipoDato ASIGNACION:c variable_valor:valor 
                    {:
                          //id:number = 34;
                          RESULT = new Variable_Aux(id,tipoDato,valor);

                    :}

                    | ID:id ASIGNACION:b variable_valor:valor 
                    {:
                           //id = 34;                   

                        RESULT = new Variable_Aux(id,VariableType.PENDIENTE,valor);                        
                           
                    :}
                    | ID:id DOS_PUNTOS:b tipo_dato_variable:tipoDato 
                    {:
                        //let hola:number;
                        Value value = new Value(idright,idleft,"undefined",ValueType.UNDEFINED);
                        RESULT = new Variable_Aux(id,tipoDato,value);                        
                        
                    :}
                   ;



tipo_acceso_variable ::= RCONST {:
                                    RESULT = AccessType.CONST;
                               :}

                       | RLET   {: 
                                     RESULT = AccessType.LET;
                                :} 
                      ;

tipo_dato_variable ::= RNUMBER:rnumber  {: 
                                           RESULT = VariableType.NUMBER; 
                                  :} 

                    |  RBIGINT:rbigint  {: 
                                     
                                            RESULT = VariableType.BIGINT;        
                                        :}  

                    |  RSTRING:rstring  {: 
                                        
                                            RESULT = VariableType.STRING;     

                                        :} 

                    |  RBOOLEAN:rboolean {: 

                                            RESULT = VariableType.BOOLEAN;                                                 

                                        :}
                    ;

variable_valor ::= instruccion:a {: 
                                    RESULT = a;
                                 :}
                ;

instruccion ::=  operaciones_matematicas:a {:
                                                
                                            RESULT = a;

                                           :}
                | operaciones_logicas:a {:
                                                
                                            RESULT = a;
                                        :}

                | funcion_boolean:a {:
                                          RESULT = a;      
                                    :}
                
                | incremento:a {:
                                                RESULT = a;
                             :}
                | decremento:a {:
                                                RESULT = a;
                             :}
                ;


operaciones_matematicas ::= 
                          MENOS:a operaciones_matematicas:b       
                                        {:
                                             
                                           RESULT = new Minus(aright,aleft,b);

                                        :}%prec UMENOS 
                        | MAS:a operaciones_matematicas:b 
                                        {:
                                             RESULT = b;
                                            
                                        :}%prec UMENOS 
                        | operaciones_matematicas:a MAS:b operaciones_matematicas:c
                                        {:
                                          
                                        RESULT = new BinaryOperation(aright,aleft,OperationType.SUMA,a,c);

                                        :}
                        | operaciones_matematicas:a MENOS:b operaciones_matematicas:c
                                        {:
                                        
                                        RESULT = new BinaryOperation(aright,aleft,OperationType.RESTA,a,c);                                             
                                            
                                        :}
                        | operaciones_matematicas:a MULTIPLICACION:b operaciones_matematicas:c
                                        {:
                                            
                                        RESULT = new BinaryOperation(aright,aleft,OperationType.MULTIPLICACION,a,c);                                              
                                            
                                        :}                        
                        | operaciones_matematicas:a DIVISION:b operaciones_matematicas:c
                                        {:
                                             
                                        RESULT = new BinaryOperation(aright,aleft,OperationType.DIVISION,a,c);

                                        :}
                        | operaciones_matematicas:a MOD:b operaciones_matematicas:c
                                        {:
                                        
                                        RESULT = new BinaryOperation(aright,aleft,OperationType.MOD,a,c);

                                        :}
                        | PARENTESIS_ABIERTO:a operaciones_matematicas:b PARENTESIS_CERRADO:c 
                                            {:
                                             
                                            RESULT = b;
                                            
                                            :}
                        | funcion_number:a {:
                                             RESULT = a;
                                           :}
                        | funcion_bigint:a {:
                                             RESULT = a;
                                           :}
                        | funcion_length:a {:
                                             RESULT = a;
                                           :}
                        | funciones_numericas_estaticas:a {:
                                     RESULT = a;
                                                          :}
                        | NUMBER:a {:
                                     
                                     RESULT = new Value(aright,aleft,a,ValueType.NUMBER);

                                   :}
                        | BIGINT:a {:
                                     
                                     RESULT = new Value(aright,aleft,a,ValueType.BIGINT);   

                                   :}
                        | ID:a    {: 
                                    
                                    RESULT = new Value(aright,aleft,a,ValueType.ID);

                                  :}
                        | TEXTO:a {: 
                                    
                                    RESULT = new Value(aright,aleft,a,ValueType.TEXTO);
                                        
                                  :}
                        
                       | ID:a PARENTESIS_ABIERTO:b PARENTESIS_CERRADO:c
                              {:

                              //id();
                              RESULT =  new Call_Simple_Function(aright,aleft,a);

                              :}
                        |  ID:a PARENTESIS_ABIERTO:b parametros_funcion_asignacion:c PARENTESIS_CERRADO:d
                              {:

                                RESULT = new Call_Parameters_Function(aright,aleft,a,c);

                              :}
                        | variables_string:a
                        {:
                                RESULT = a;                        
                        :}

                        ;

funciones_numericas_estaticas ::= MATH:a PUNTO:b ABS:c PARENTESIS_ABIERTO:d operaciones_matematicas:e PARENTESIS_CERRADO:f
                                {:
                                    RESULT = new Function_Math(aright,aleft,MathType.ABS,e);
                                :}
                               |  MATH:a PUNTO:b CEIL:c   PARENTESIS_ABIERTO:d operaciones_matematicas:e PARENTESIS_CERRADO:f
                                {:
                                    RESULT = new Function_Math(aright,aleft,MathType.CEIL,e);
                                        
                                :}
                               |  MATH:a PUNTO:b COS:c    PARENTESIS_ABIERTO:d operaciones_matematicas:e PARENTESIS_CERRADO:f
                               {:
                                    RESULT = new Function_Math(aright,aleft,MathType.COS,e);
                                        
                               :}
                               |  MATH:a PUNTO:b SIN:c    PARENTESIS_ABIERTO:d operaciones_matematicas:e PARENTESIS_CERRADO:f
                               {:
                                    RESULT = new Function_Math(aright,aleft,MathType.SIN,e);
                                        
                               :}
                               |  MATH:a PUNTO:b TAN:c    PARENTESIS_ABIERTO:d operaciones_matematicas:e PARENTESIS_CERRADO:f
                               {:

                                    RESULT = new Function_Math(aright,aleft,MathType.TAN,e);

                               :}
                               |  MATH:a PUNTO:b EXP:c    PARENTESIS_ABIERTO:d operaciones_matematicas:e PARENTESIS_CERRADO:f
                                {:

                                    RESULT = new Function_Math(aright,aleft,MathType.EXP,e);

                                :}
                               |  MATH:a PUNTO:b FLOOR:c  PARENTESIS_ABIERTO:d operaciones_matematicas:e PARENTESIS_CERRADO:f
                                {:

                                    RESULT = new Function_Math(aright,aleft,MathType.FLOOR,e);

                                :}
                               |  MATH:a PUNTO:b POW:c    PARENTESIS_ABIERTO:d operaciones_matematicas:e COMA:f operaciones_matematicas:g PARENTESIS_CERRADO:h
                                {:

                                    RESULT = new Function_Math(aright,aleft,MathType.POW,e,g);

                                :}
                               |  MATH:a PUNTO:b SQRT:c   PARENTESIS_ABIERTO:d operaciones_matematicas:e PARENTESIS_CERRADO:f
                                {:
                            
                                    RESULT = new Function_Math(aright,aleft,MathType.SQRT,e);

                                :}
                               |  MATH:a PUNTO:b RANDOM:c PARENTESIS_ABIERTO:d PARENTESIS_CERRADO:f
                                {:
                                    
                                    RESULT = new Value(aright,aleft,Math.random()+"",ValueType.NUMBER);    

                                :}
                               |  MATH:a PUNTO:b E:c
                                {:
                                        
                                    RESULT = new Value(aright,aleft,Math.E+"",ValueType.NUMBER);    
                                :}
                               |  MATH:a PUNTO:b PI:c
                                {:

                                    RESULT = new Value(aright,aleft,Math.PI+"",ValueType.NUMBER);    

                                :}
                               |  MATH:a PUNTO:b SQRT2:c
                                {:
                                    
                                    RESULT = new Value(aright,aleft,Math.sqrt(2)+"",ValueType.NUMBER);
                                        
                                :}
                              ;

incremento ::= ID:id INCREMENTO:incremento
                {:
                //id++
                    RESULT = new Increase(idright,idleft,id); 
                :}

           ;

decremento ::= ID:id DECREMENTO:decremento
                {:
                     //id--
                     RESULT = new Decrement(idright,idleft,id);
                :}
            ;

funcion_incremento_decremento ::= ID:a INCREMENTO:b PUNTO_COMA:c
                {:
                    //id++;
                    ArrayList tmp_function_increase = new ArrayList();
                    tmp_function_increase.add(new Function_Increase(aright,aleft,a));
                    RESULT = tmp_function_increase;
                :}

               |  ID:a DECREMENTO:b PUNTO_COMA:c
               {:
                    //id--;
                    ArrayList tmp_function_decrement = new ArrayList();
                    tmp_function_decrement.add(new Function_Decrement(aright,aleft,a));
                    RESULT = tmp_function_decrement;

                :}
                ;

operaciones_relacionales ::= operaciones_matematicas:a MAYOR_QUE:b operaciones_matematicas:c
                            {:
                                RESULT = new BinaryOperation(aright,aleft,OperationType.MAYOR_QUE,a,c);
                                
                            :}
                           | operaciones_matematicas:a MAYOR_IGUAL:b operaciones_matematicas:c
                            {:
                                RESULT = new BinaryOperation(aright,aleft,OperationType.MAYOR_IGUAL,a,c);
                            :}
                           | operaciones_matematicas:a MENOR_QUE:b operaciones_matematicas:c
                            {:
                                RESULT = new BinaryOperation(aright,aleft,OperationType.MENOR_QUE,a,c);
                            :}
                           | operaciones_matematicas:a MENOR_IGUAL:b operaciones_matematicas:c
                            {:

                                RESULT = new BinaryOperation(aright,aleft,OperationType.MENOR_QUE,a,c);
                                
                            :}
                           | operaciones_matematicas:a COMPARACION:b operaciones_matematicas:c
                            {:
                                RESULT = new BinaryOperation(aright,aleft,OperationType.COMPARACION,a,c);
                                
                            :}
                           | operaciones_matematicas:a DISTINTO:b operaciones_matematicas:c
                            {:
                                RESULT = new BinaryOperation(aright,aleft,OperationType.DISTINTO,a,c);
                                
                            :}

                           | TRUE:a COMPARACION:b TRUE:c
                            {:

                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.COMPARACION,
                                new Value(aright,aleft,a,ValueType.TRUE),
                                new Value(aright,aleft,c,ValueType.TRUE));
                                
                            :}
                           | TRUE:a COMPARACION:b FALSE:c
                            {:
                                
                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.COMPARACION,
                                new Value(aright,aleft,a,ValueType.TRUE),
                                new Value(aright,aleft,c,ValueType.FALSE));
                                                                
                            :}
                           | FALSE:a COMPARACION:b TRUE:c
                            {:
                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.COMPARACION,
                                new Value(aright,aleft,a,ValueType.FALSE),
                                new Value(aright,aleft,c,ValueType.TRUE));
                                
                            :}
                           | FALSE:a COMPARACION:b FALSE:c
                            {:
                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.COMPARACION,
                                new Value(aright,aleft,a,ValueType.FALSE),
                                new Value(aright,aleft,c,ValueType.FALSE));
                            :}
                           | operaciones_matematicas:a COMPARACION:b TRUE:c
                            {:
                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.COMPARACION,
                                a,
                                new Value(aright,aleft,c,ValueType.TRUE));
                                
                            :}
                           | TRUE:a COMPARACION:b operaciones_matematicas:c
                            {:
                                
                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.COMPARACION,
                                new Value(aright,aleft,c,ValueType.TRUE),
                                c);
                                
                            :}
                           | operaciones_matematicas:a COMPARACION:b FALSE:c
                            {:
                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.COMPARACION,
                                a,
                                new Value(aright,aleft,c,ValueType.FALSE));
                                
                            :}
                           | FALSE:a COMPARACION:b operaciones_matematicas:c
                            {:
                                
                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.COMPARACION,
                                new Value(aright,aleft,c,ValueType.FALSE),
                                c);
                                
                            :}

                           | TRUE:a DISTINTO:b TRUE:c
                            {:
                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.DISTINTO,
                                new Value(aright,aleft,a,ValueType.TRUE),
                                new Value(aright,aleft,c,ValueType.TRUE));
                                
                            :}
                           | TRUE:a DISTINTO:b FALSE:c
                            {:
                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.DISTINTO,
                                new Value(aright,aleft,a,ValueType.TRUE),
                                new Value(aright,aleft,c,ValueType.FALSE));
                                
                            :}
                           | FALSE:a DISTINTO:b TRUE:c
                            {:
                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.DISTINTO,
                                new Value(aright,aleft,a,ValueType.FALSE),
                                new Value(aright,aleft,c,ValueType.TRUE));
                                
                            :}
                           | FALSE:a DISTINTO:b FALSE:c
                            {:
                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.DISTINTO,
                                new Value(aright,aleft,a,ValueType.FALSE),
                                new Value(aright,aleft,c,ValueType.FALSE));
                                
                            :}
                           | operaciones_matematicas:a DISTINTO:b TRUE:c
                            {:
                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.DISTINTO,
                                a,
                                new Value(aright,aleft,c,ValueType.TRUE));

                            :}
                           | TRUE:a DISTINTO:b operaciones_matematicas:c
                            {:
                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.DISTINTO,
                                new Value(aright,aleft,c,ValueType.TRUE),
                                c);                                  
                            :}
                           | operaciones_matematicas:a DISTINTO:b FALSE:c
                            {:
                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.DISTINTO,
                                a,
                                new Value(aright,aleft,c,ValueType.FALSE));  
                            :}
                           | FALSE:a DISTINTO:b operaciones_matematicas:c
                            {:
                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.DISTINTO,
                                new Value(aright,aleft,c,ValueType.FALSE),
                                c);                                  
                            :}
                       
                           | TRUE:a 
                           {:
                                    RESULT = new Value(aright,aleft,a,ValueType.TRUE);
                           :}
                           | FALSE:a 
                           {:
                                    RESULT = new Value(aright,aleft,a,ValueType.FALSE);
                           :}
                          
                           | funcion_boolean:a COMPARACION:b TRUE:c
                            {:
                                
                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.COMPARACION,
                                a,
                                new Value(aright,aleft,c,ValueType.TRUE));    

                            :}

                           | funcion_boolean:a COMPARACION:b FALSE:c
                            {:
                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.COMPARACION,
                                a,
                                new Value(aright,aleft,c,ValueType.FALSE));    
                               
                            :}
                           | TRUE:a COMPARACION:b funcion_boolean:c
                            {:

                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.COMPARACION,
                                new Value(aright,aleft,c,ValueType.TRUE),
                                c);

                            :}
                           | FALSE:a COMPARACION:b funcion_boolean:c
                            {:
                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.COMPARACION,
                                new Value(aright,aleft,c,ValueType.FALSE),
                                c);
                                
                            :}

                           | funcion_boolean:a DISTINTO:b TRUE:c
                            {:
                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.DISTINTO,
                                a,
                                new Value(aright,aleft,c,ValueType.TRUE));
                                
                            :}
                           | funcion_boolean:a DISTINTO:b FALSE:c
                            {:
                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.DISTINTO,
                                a,
                                new Value(aright,aleft,c,ValueType.FALSE));
                                
                            :}
                           | TRUE:a DISTINTO:b funcion_boolean:c
                            {:

                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.DISTINTO,
                                new Value(aright,aleft,c,ValueType.TRUE),
                                c);

                            :}
                           | FALSE:a DISTINTO:b funcion_boolean:c
                            {:
                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.DISTINTO,
                                new Value(aright,aleft,c,ValueType.FALSE),
                                c);
                               
                            :}

                           | funcion_boolean:a COMPARACION:b funcion_boolean:c
                            {:
                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.COMPARACION,
                                a,
                                c);
                                 
                            :}
                           | funcion_boolean:a DISTINTO:b funcion_boolean:c
                            {:
                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.DISTINTO,
                                a,
                                c);
                                
                            :}

                           | PARENTESIS_ABIERTO:a operaciones_relacionales:b PARENTESIS_CERRADO:c
                            {:
                                RESULT = b;
                            :}
                          ;  

operaciones_logicas ::= operaciones_logicas:a AND:b operaciones_logicas:c
                            {:
                                
                                RESULT = new BinaryOperation(aright,aleft,OperationType.AND,a,c);
                                
                            :}
                    | operaciones_logicas:a OR:b operaciones_logicas:c
                            {:
                                RESULT = new BinaryOperation(aright,aleft,OperationType.OR,a,c);
                                
                            :}
                    | NOT:a operaciones_logicas:b
                            {:
                                RESULT = new Not(aright,aleft,b);
                                
                            :}
                    | NOT:a operaciones_matematicas:b
                            {:
                                RESULT = new Not(aright,aleft,b);
                                
                            :}
                    | PARENTESIS_ABIERTO:a operaciones_logicas:b PARENTESIS_CERRADO:c
                            {:
                                RESULT = b;
                                
                            :}
                    | operaciones_relacionales:a
                            {:
                             RESULT = a;   
                            :}
                    | funcion_boolean:a AND funcion_boolean:c
                    {:
                        RESULT = new BinaryOperation(aright,aleft,OperationType.AND,a,c);
                    :}
                    | funcion_boolean:a OR funcion_boolean:c
                    {:
                        RESULT = new BinaryOperation(aright,aleft,OperationType.OR,a,c);
                    :}
                    | operaciones_logicas:a AND funcion_boolean:c
                    {:
                        RESULT = new BinaryOperation(aright,aleft,OperationType.AND,a,c);
                    :}
                    | funcion_boolean:a AND operaciones_logicas:c
                    {:
                        RESULT = new BinaryOperation(aright,aleft,OperationType.AND,a,c);
                    :}
                    | operaciones_logicas:a OR funcion_boolean:c
                    {:
                        RESULT = new BinaryOperation(aright,aleft,OperationType.OR,a,c);
                    :}
                    | funcion_boolean:a OR operaciones_logicas:c
                    {:
                        RESULT = new BinaryOperation(aright,aleft,OperationType.OR,a,c);
                    :}
                    ;

funcion_length ::= operaciones_matematicas:a PUNTO:b LENGTH:c
                            {:
                                RESULT = new Function_Length(aright,aleft,a);
                                
                            :}
                ;


funcion_number ::= FNUMBER:a PARENTESIS_ABIERTO:b operaciones_matematicas:c PARENTESIS_CERRADO:d
                            {:
                               RESULT = new Function_Number(aright,aleft,c);
                               
                            :}
                |  FNUMBER:a PARENTESIS_ABIERTO:b operaciones_logicas:c PARENTESIS_CERRADO:d
                            {:

                                RESULT = new Function_Number(aright,aleft,c);
                                
                            :}

                ;

funcion_bigint  ::= FBIGINT:a PARENTESIS_ABIERTO:b operaciones_matematicas:c PARENTESIS_CERRADO:d
                            {:
                                RESULT = new Function_BigInt(aright,aleft,c);
                                
                            :}
                |   FBIGINT:a PARENTESIS_ABIERTO:b operaciones_logicas:c PARENTESIS_CERRADO:d
                            {:
                                RESULT = new Function_BigInt(aright,aleft,c);
                            :}


                ;


funcion_boolean  ::= FBOOLEAN:a PARENTESIS_ABIERTO:b operaciones_matematicas:c PARENTESIS_CERRADO:d
                            {:

                                RESULT = new Function_Boolean(aright,aleft,c);

                            :}
                 |   FBOOLEAN:a PARENTESIS_ABIERTO:b operaciones_logicas:c PARENTESIS_CERRADO:d
                            {:
                                
                                RESULT = new Function_Boolean(aright,aleft,c);
                                                              
                            :}
                 
                 ;


funcion_string  ::= FSTRING:a PARENTESIS_ABIERTO:b operaciones_matematicas:c PARENTESIS_CERRADO:d
                            {:
                                
                                RESULT = new Function_String(aright,aleft,c);
                               
                            :}
                 |  FSTRING:a PARENTESIS_ABIERTO:b operaciones_logicas:c PARENTESIS_CERRADO:d
                            {:
                                                 
                                RESULT = new Function_String(aright,aleft,c);

                            :}

                 ;

funcion_char_at ::= operaciones_matematicas:a PUNTO:b CHARAT:c PARENTESIS_ABIERTO:d index_char_at:e PARENTESIS_CERRADO:f
                            {:
                                RESULT = new Function_Char_At(aright,aleft,a,e);
                            :}
                
                ;

index_char_at ::= operaciones_matematicas:a
                {:
                    RESULT = a;
                :}
               ;


funcion_concat ::= operaciones_matematicas:a PUNTO:b CONCAT:c PARENTESIS_ABIERTO:d instruccion:e PARENTESIS_CERRADO:f
                    {:
                        RESULT = new Function_Concat(aright,aleft,a,e);
                    :}

                ;

variables_string ::= funcion_string:a
                  {:
                     RESULT = a;
                  :}
                 |  funcion_char_at:a   
                  {:
                     RESULT = a;
                  :}
                 |  funcion_to_lower_case:a
                  {:
                    RESULT = a;
                  :}
                 |  funcion_to_upper_case:a
                  {:
                    RESULT = a;
                  :}
                 |  funcion_concat:a
                  {:
                    RESULT = a;
                  :}
                 ;


funcion_to_lower_case ::=  operaciones_matematicas:a PARENTESIS_ABIERTO:b parametros_funcion_asignacion:c PARENTESIS_CERRADO:d PUNTO:e TOLOWERCASE:f PARENTESIS_ABIERTO:g PARENTESIS_CERRADO:h
                        {:
                            RESULT = new Function_Lower(aright,aleft,a);
                        :}    
                         ;

funcion_to_upper_case ::=  operaciones_matematicas:a PUNTO:b TOUPPERCASE:c PARENTESIS_ABIERTO:d PARENTESIS_CERRADO:e
                        {:
                            RESULT = new Function_Upper(aright,aleft,a);
                                                            
                        :}
                        
                       ;

funcion_console_log ::= CONSOLE:a PUNTO:b LOG:c PARENTESIS_ABIERTO:d lista_instrucciones_console:e PARENTESIS_CERRADO:f PUNTO_COMA:g
                    {:
                         
                        
                        ArrayList tmp_console = new ArrayList();
                        tmp_console.add(new Function_Console_Log(aright,aleft,e));
                        RESULT = tmp_console;

                    :}
            ;

lista_instrucciones_console ::= lista_instrucciones_console:a COMA:b instruccion:c
                            {: 
                                a.add((Instruction) c);
                                RESULT = a;                           
                            :}
                             |  instruccion:a 
                             {: 
                                RESULT = new ArrayList<>(); RESULT.add((Instruction) a);
                            :}
                             ;

declaracion_funcion ::= 

 FUNCTION:a ID:b PARENTESIS_ABIERTO:c PARENTESIS_CERRADO:d DOS_PUNTOS:e RVOID:f CORCHETE_ABIERTO:g instrucciones_funciones_sin_return:h CORCHETE_CERRADO:i
 {:
    //function id ():void{instructions}
    
    //RESULT = new Function_Void_Simple(aright,aleft,b,VariableType.VOID,h);
                        ArrayList tmp_function = new ArrayList();
                        tmp_function.add(new Function_Void_Simple(aright,aleft,b,VariableType.VOID,h));
                        RESULT = tmp_function;
    

 :}

|FUNCTION:a ID:b PARENTESIS_ABIERTO:c parametros_funcion_declaracion:d PARENTESIS_CERRADO:e DOS_PUNTOS:f RVOID:g CORCHETE_ABIERTO:h instrucciones_funciones_sin_return:i CORCHETE_CERRADO:j
{:
    //function id (parametros):void{parametros}
    /* verificar que los nombres de los parametros no se repitan, si hay repetidos lanzar errro semantico*/
    /*Function_Void_Parameters*/
    Map<String, VariableType> parametros = new LinkedHashMap<String, VariableType>();

    parametros.put(d.get(0).getId(),d.get(0).getType());
    for(int p = 1; p<d.size();p++){

        if(parametros.containsKey(d.get(p).getId())){
            System.out.println("El nombre del parametro " +d.get(p).getId()+ " ya ha sido utilizado ");
            erroresSemanticos.add( new Error_analizadores("Semantico",d.get(p).getId(),dright,dleft, "El nombre del parametro '" +d.get(p).getId()+ "' ya ha sido utilizado en la misma funcion"));
            contador_errores_semanticos++;
        }else{
            parametros.put(d.get(p).getId(),d.get(p).getType());
        }

    }

    if(contador_errores_semanticos==0){
            ArrayList tmp_function = new ArrayList();
            tmp_function.add(new Function_Void_Parameters(aright,aleft,b,VariableType.VOID,parametros,i));
            RESULT = tmp_function;
    }
    
    
 :}

|FUNCTION:a ID:b PARENTESIS_ABIERTO:c PARENTESIS_CERRADO:d CORCHETE_ABIERTO:e instrucciones_funcion:f CORCHETE_CERRADO:g
{:
        //function id (){parametros}
        //Function_Without_Type_Simple
        
        ArrayList tmp_function = new ArrayList();
        tmp_function.add(new Function_Without_Type_Simple(aright,aleft,b,VariableType.PENDIENTE,f));
        RESULT = tmp_function;

:}

|FUNCTION:a ID:b PARENTESIS_ABIERTO:c parametros_funcion_declaracion:d PARENTESIS_CERRADO:e CORCHETE_ABIERTO:f instrucciones_funcion:g CORCHETE_CERRADO:h
{:
        //function id (parametros){parametros}
        //Function_Without_Type_Parameters
        /* verificar que los nombres de los parametros no se repitan, si hay repetidos lanzar errro semantico*/
        Map<String, VariableType> parametros = new LinkedHashMap<String, VariableType>();

    parametros.put(d.get(0).getId(),d.get(0).getType());
    for(int p = 1; p<d.size();p++){

        if(parametros.containsKey(d.get(p).getId())){
            System.out.println("El nombre del parametro " +d.get(p).getId()+ " ya ha sido utilizado ");
            erroresSemanticos.add( new Error_analizadores("Semantico",d.get(p).getId(),dright,dleft, "El nombre del parametro '" +d.get(p).getId()+ "' ya ha sido utilizado en la misma funcion"));
            contador_errores_semanticos++;
        }else{
            parametros.put(d.get(p).getId(),d.get(p).getType());
        }

    }

    if(contador_errores_semanticos==0){
            ArrayList tmp_function = new ArrayList();
            tmp_function.add(new Function_Without_Type_Parameters(aright,aleft,b,VariableType.PENDIENTE,parametros,g));
            RESULT = tmp_function;
    }
        
:}

|FUNCTION:a ID:b PARENTESIS_ABIERTO:c PARENTESIS_CERRADO:d DOS_PUNTOS:e tipo_dato_variable:f CORCHETE_ABIERTO:g instrucciones_funcion:h CORCHETE_CERRADO:i
{:
        //function id ():tipoValor{parametros}            
        //Function_With_Type_Simple
            ArrayList tmp_function = new ArrayList();
            tmp_function.add(new Function_With_Type_Simple(aright,aleft,b, (VariableType) f,h));
            RESULT = tmp_function;
:}

|FUNCTION:a ID:b PARENTESIS_ABIERTO:c parametros_funcion_declaracion:d PARENTESIS_CERRADO:e DOS_PUNTOS:f tipo_dato_variable:g CORCHETE_ABIERTO:h instrucciones_funcion:i CORCHETE_CERRADO:j
{:
        //function id (parametros):tipoDato{parametros}
        //Function_With_Type_Parameters
    Map<String, VariableType> parametros = new LinkedHashMap<String, VariableType>();

    parametros.put(d.get(0).getId(),d.get(0).getType());
    for(int p = 1; p<d.size();p++){

        if(parametros.containsKey(d.get(p).getId())){
            System.out.println("El nombre del parametro " +d.get(p).getId()+ " ya ha sido utilizado ");
            erroresSemanticos.add( new Error_analizadores("Semantico",d.get(p).getId(),dright,dleft, "El nombre del parametro '" +d.get(p).getId()+ "' ya ha sido utilizado en la misma funcion"));
            contador_errores_semanticos++;
        }else{
            parametros.put(d.get(p).getId(),d.get(p).getType());
        }

    }

    if(contador_errores_semanticos==0){
            ArrayList tmp_function = new ArrayList();
            tmp_function.add(new Function_With_Type_Parameters(aright,aleft,b,(VariableType) g,parametros,i));
            RESULT = tmp_function;
    }
:}        
                    ;


instrucciones_funciones_sin_return ::= instrucciones_funciones_sin_return:a opciones_instrucciones_sin_return:b
                                    {:
                                       
                                       
                                        for(int i =0;i<b.size();i++){

                                            a.add(b.get(i));

                                        }

                                        RESULT = a;

                                    :}
                                    | opciones_instrucciones_sin_return:a
                                    {:

                                    ArrayList tmp = new ArrayList();

                                        for(int i =0;i<a.size();i++){

                                            tmp.add(a.get(i));

                                        }
                                        RESULT = tmp;

                                    :}

                                    ;


instrucciones_funcion ::= instrucciones:a 
                      {: 
                            RESULT = a;
                      :}

                       | 
                       
                       {: 
                            RESULT = new ArrayList<>();
                       :}

                       ;

parametros_funcion_declaracion ::= parametros_funcion_declaracion:a COMA:b parametro_funcion_declaracion:c
                                {:

                                    a.add(c);
                                    RESULT = a;

                                :}

                                |  parametro_funcion_declaracion:a
                                {:
                                    ArrayList parametros = new ArrayList<>();
                                    parametros.add(a);
                                    RESULT = parametros;
                                :}
                                ;

parametro_funcion_declaracion ::= ID:a DOS_PUNTOS:b tipo_dato_variable:c
                                {:

                                    RESULT = new Parameter((String) a,(VariableType)c);
                                    
                                :}
                                ;


funcion_return ::= RETURN:a instruccion:b PUNTO_COMA:c
                    {:
                        //return hola;
                        ArrayList tmp_return = new ArrayList();
                        tmp_return.add(new Function_Return_Instruction(aright,aleft,b));
                        RESULT = tmp_return;    

                    :}
                | RETURN:a PUNTO_COMA:b
                    {:

                        ArrayList tmp_return = new ArrayList();
                        tmp_return.add(new Function_Return_Simple(aright,aleft));
                        RESULT = tmp_return;    
 
                    :}
                ;

parametros_funcion_asignacion ::= parametros_funcion_asignacion:a COMA:b instruccion:c
                               {:
                                    
                                    a.add((Instruction) c);
                                    RESULT = a;           
                               :}
                               |  instruccion:a
                               {:
                                   RESULT = new ArrayList<>(); RESULT.add((Instruction) a);
                               :}
                               ;



llamada_funcion_normal ::= ID:a PARENTESIS_ABIERTO:b PARENTESIS_CERRADO:c PUNTO_COMA:d
                           {:

                                ArrayList tmp_function_normal = new ArrayList();
                                tmp_function_normal.add(new Function_Call_Simple_Function(aright,aleft,a));
                                RESULT = tmp_function_normal;    

                           :}
                        |  ID:a PARENTESIS_ABIERTO:b parametros_funcion_asignacion:c PARENTESIS_CERRADO:d PUNTO_COMA:e
                           {:
                        
                                ArrayList tmp_function_normal1 = new ArrayList();
                                tmp_function_normal1.add(new Function_Call_Parameters_Function(aright,aleft,a,c));
                                RESULT = tmp_function_normal1;    

                           :}
                        ;

funcion_if ::= IF:a PARENTESIS_ABIERTO:b instruccion:c PARENTESIS_CERRADO:d CORCHETE_ABIERTO:e instrucciones_funcion:f CORCHETE_CERRADO:g
              {:

                    RESULT = new If(aright,aleft,c,f);
                         
              :}
            ;

funcion_else ::= ELSE:a CORCHETE_ABIERTO:b instrucciones_funcion:c CORCHETE_CERRADO:d
              {:
        
                    RESULT = new Else(aright,aleft,c);

              :}
              ;  


funcion_else_if ::= ELSE:a IF:b PARENTESIS_ABIERTO:c instruccion:d PARENTESIS_CERRADO:e CORCHETE_ABIERTO:f instrucciones_funcion:g CORCHETE_CERRADO:h
              {:
                    
                RESULT = new ElseIf(aright,aleft,d,g);
                            
              :}
                ;

lista_else_if ::= lista_else_if:a funcion_else_if:b
                  {:
                     
                     a.add(b);
                     RESULT = a;

                  :}
                | funcion_else_if:a {:
                          
                          RESULT = new ArrayList(); RESULT.add(a);

                                  :}
                ;

opciones_if ::=  funcion_if:a
                {:
                        ArrayList tmp = new ArrayList();
                        tmp.add(new Function_If(aright,aleft,a,null,null));
                        RESULT = tmp;    
                :}
                | funcion_if:a funcion_else:b
                {:
                        ArrayList tmp = new ArrayList();
                        tmp.add(new Function_If(aright,aleft,a,null,b));
                        RESULT = tmp;    
                :}
                | funcion_if:a lista_else_if:b funcion_else:c
                {:
                        ArrayList tmp = new ArrayList();
                        tmp.add(new Function_If(aright,aleft,a,b,c));
                        RESULT = tmp;    
                :}                
                | funcion_if:a lista_else_if:b
                {:
                        ArrayList tmp = new ArrayList();
                        tmp.add(new Function_If(aright,aleft,a,b,null));
                        RESULT = tmp;
                :}                                
                ;


instruccion_break ::= BREAK:a PUNTO_COMA:b
                    {: 
                        ArrayList tmp_BREAK = new ArrayList();
                        tmp_BREAK.add(new Instruction_Break(aright,aleft));
                        RESULT = tmp_BREAK;    
                    :}
                  ;


instruccion_continue ::= CONTINUE:a PUNTO_COMA:b
                    {: 
                        ArrayList tmp_continue= new ArrayList();
                        tmp_continue.add(new Instruction_Continue(aright,aleft));
                        RESULT = tmp_continue;    
                    :}
                     ;


funcion_for ::= 
FOR:a PARENTESIS_ABIERTO:b declaracion_variable:c operaciones_logicas:d PUNTO_COMA:e accion_asignacion_for:f PARENTESIS_CERRADO:g CORCHETE_ABIERTO:h instrucciones_funcion:i CORCHETE_CERRADO:j
    {:
    //verificar que la variable declarada se let
    Instruction assig = (Instruction)c.get(0);
    ArrayList tmp_for = new ArrayList();
    tmp_for.add(new Function_For(aright,aleft,assig,d,f,i));
    RESULT = tmp_for;
    /*for(let i = 0; i<2;i++){
        console.log(i);
    }*/
 

    :}


|FOR:a PARENTESIS_ABIERTO:b asignacion:c operaciones_logicas:d PUNTO_COMA:e accion_asignacion_for:f PARENTESIS_CERRADO:g CORCHETE_ABIERTO:h instrucciones_funcion:i CORCHETE_CERRADO:j
    {:

//let k = 0;

//for(let i= k; i<3;i++){
    //console.log(i);
//}
    Instruction assig = (Instruction)c.get(0);
    ArrayList tmp_for = new ArrayList();
    tmp_for.add(new Function_For(aright,aleft,assig,d,f,i));
    RESULT = tmp_for;

    :}
            ;


accion_asignacion_for ::= incremento:a
                        {:
                            //id++
                            RESULT = a;
                        :}

                       | decremento:a
                        {:
                            //id--
                            RESULT = a;
                        :}                       
                        
                       | ID:a ASIGNACION:b instruccion:c
                        
                        {:
                            //id = instruction;
                            RESULT = new Assignment(a,aleft,a,c);
                        :}

                       ;


funcion_while ::= WHILE:a PARENTESIS_ABIERTO:b instruccion:c PARENTESIS_CERRADO:d CORCHETE_ABIERTO:e instrucciones_funcion:f CORCHETE_CERRADO:g
                {:
                        ArrayList tmp_while= new ArrayList();
                        tmp_while.add(new Function_While(aright,aleft,c,f));
                        RESULT = tmp_while;

                :}
              ;


funcion_do_while ::= DO:a CORCHETE_ABIERTO:b instrucciones_funcion:c CORCHETE_CERRADO:d WHILE:e PARENTESIS_ABIERTO:f instruccion:g PARENTESIS_CERRADO:h PUNTO_COMA:i
                {:

                    ArrayList tmp_do_while= new ArrayList();
                    tmp_do_while.add(new Function_Do_While(aright,aleft,c,g));
                    RESULT = tmp_do_while;
      
                :}
                 ;


funcion_printAst ::= PRINTAST:a PARENTESIS_ABIERTO:b instruccion:c PARENTESIS_CERRADO:d PUNTO_COMA:e
                    {:
                        ArrayList tmp_gst= new ArrayList();
                        tmp_gst.add(new Function_Print_AST(aright,aleft,c));
                        RESULT = tmp_gst;    

                    :}
                  ;


funcion_getSymbolTable ::= GETSYMBOLTABLE:a PARENTESIS_ABIERTO:b PARENTESIS_CERRADO:c PUNTO_COMA:d
                    {:

                        ArrayList tmp_gst= new ArrayList();
                        tmp_gst.add(new Function_Get_Symbol_Table(aright,aleft));
                        RESULT = tmp_gst;    
                        
                    :}
                     ;
