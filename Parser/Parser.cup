/* Codigo de usuario */

// importaciones y paquetes

package com.peter.typesecure.parser;

import com.peter.typesecure.analisis.ejecucion.auxiliares.Variable_Aux;
import com.peter.typesecure.ejecucion.Genericos.*;
import com.peter.typesecure.lexer.Lexer;
import java_cup.runtime.Symbol;
import com.peter.typesecure.error.Error_analizadores;
import java.util.ArrayList;




// Codigo para el parser, variables, metodos

parser code {:

    public Parser(Lexer lexer) {
        super(lexer);
    }

    public ArrayList<Instruction> instructions = new ArrayList<>();

    //Array errores
    
    public static ArrayList<Error_analizadores> errores = Lexer.errores;

    //Metodo llamado automaticamente al encontrar error sintanctico

    public void syntax_error(Symbol s){

    

    if(s.sym == 0){

    errores.add( new Error_analizadores("Sintactico", "No se esperaba el fin del archivo ") );

    }else{

        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        errores.add( new Error_analizadores("Sintactico", lexema, fila, columna, "No se esperaba este token") );
        //System.out.println("Error Sintactico hallado");
        //System.out.println("Lexema " + lexema + " linea"  + fila + " columna " + columna);
    }

    
    }

    //Metodo llamado cuando no se puede recuperar de un error
    
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 

    
        
    if(s.sym == 0){

    errores.add( new Error_analizadores("Sintactico", "No se esperaba el fin del archivo ") );

    }else{

        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        errores.add( new Error_analizadores("Sintactico", lexema, fila, columna, "No se esperaba este token") );
        //System.out.println("Error Sintactico hallado");
        //System.out.println("Lexema " + lexema + " linea"  + fila + " columna " + columna);
    }
        
    } 

:}

                                                    // CODIGO PARA LAS ACCIONES GRAMATICALES

            /* Declaraciones de terminales y no terminales */

    /* TERMINALES */

/* NUMEROS */

terminal NUMBER;

terminal BIGINT;

/* ID */
terminal ID;

/* TEXTO */
terminal TEXTO;

/* BOOLEANOS */
terminal TRUE,FALSE;

/* TIPOS DE DATOS */
terminal RNUMBER,RBIGINT,RSTRING,RBOOLEAN,RVOID,RCONST,RLET;

/* SIMBOLOS ARITMETICOS */

terminal MAS,MENOS,MULTIPLICACION,MOD,DIVISION,UMENOS;
terminal PARENTESIS_ABIERTO,PARENTESIS_CERRADO;
terminal INCREMENTO,DECREMENTO;

/* ASIGNACION */
terminal ASIGNACION;

/* OPERADORES LOGICOS */
terminal AND, OR, NOT;

/* OPERADORES RELACIONALES */
terminal MENOR_QUE, MENOR_IGUAL, MAYOR_QUE, MAYOR_IGUAL, COMPARACION, DISTINTO;

/* SIMBOLOS DE PUNTUACION*/

terminal PUNTO, COMA, DOS_PUNTOS, PUNTO_COMA;

/* SIMBOLOS DE AGRUPACION */

terminal CORCHETE_ABIERTO, CORCHETE_CERRADO;

/* FUNCIONES */

terminal FUNCTION;

//CONVERSION DE TIPOS
terminal FNUMBER, FBIGINT, FBOOLEAN, FSTRING;

//ACCESO PROPIEDAD
terminal LENGTH, CHARAT;

//MAYUSCULA, MINUSCULA
terminal TOLOWERCASE, TOUPPERCASE;

//ACCIONES VARIAS
terminal CONCAT, CONSOLE, LOG;

//SENTENCIAS DE CONTROL

terminal IF, ELSE, FOR, WHILE, DO, BREAK, CONTINUE, RETURN;

//VALORES ESTATICOS 
terminal MATH, E, PI, SQRT2, ABS, CEIL, COS, SIN, TAN, EXP, FLOOR, POW, SQRT, RANDOM, PRINTAST, GETSYMBOLTABLE;

/* NO TERMINALES */

//no terminal que da inicio a todo
non terminal inicio;

//no terminal que contiene el lenguaje TypeSecure
non terminal ts;

//opciones a ejecutar
non terminal instrucciones, opciones_instrucciones;

//instruccion
non terminal instruccion;

//declaracion de variable
non terminal declaracion_variable, tipo_acceso_variable, id_valor_variable;
non terminal ArrayList id_valor_variable_lista;
non terminal tipo_dato_variable, variable_valor;

//asignacion
non terminal asignacion;

//operaciones matematicas
non terminal operaciones_matematicas,funciones_numericas_estaticas;

//incremento decremento
non terminal incremento, decremento;

//funcion incremento decremento
non terminal funcion_incremento_decremento;

//operaciones relacionales
non terminal operaciones_relacionales;

//operaciones logicas
non terminal operaciones_logicas;

        /* FUNCIONES */

//funcion length
non terminal funcion_length;

//funcion number
non terminal funcion_number;

//funcion biging
non terminal funcion_bigint;

//funcion boolean
non terminal funcion_boolean;

//funcion string
non terminal funcion_string;

//funcion charAt
non terminal funcion_char_at;

//funcion toLowerCase
non terminal funcion_to_lower_case;

//funcion toUpperCase
non terminal funcion_to_upper_case;

//funcion concat
non terminal variables_string, funcion_concat;

//funcion console log
non terminal funcion_console_log,lista_instrucciones_console;

//declaracion de funciones
non terminal declaracion_funcion, parametro_funcion_declaracion,parametros_funcion_declaracion, instrucciones_funcion;
non terminal instrucciones_funciones_sin_return,opciones_instrucciones_sin_return;

//funcion return
non terminal funcion_return;

//funcion if
non terminal funcion_if, funcion_else, funcion_else_if, lista_else_if, opciones_if;


//llamada de funciones
non terminal llamada_funcion_asignacion, parametros_funcion_asignacion, llamada_funcion_normal;

//instruccion break
non terminal instruccion_break;

//instruccion continue
non terminal instruccion_continue;

//instruccion for Loop
non terminal funcion_for, accion_asignacion_for;

//instruccion do while
non terminal funcion_do_while;

//instruccion while
non terminal funcion_while;

//funcion printAst
non terminal funcion_printAst;

//funcion getSymbolTable
non terminal funcion_getSymbolTable;

// PRECEDENCIA

precedence left OR;
precedence left AND;
precedence left NOT;
precedence left COMPARACION, MENOR_QUE, MAYOR_QUE,MENOR_IGUAL,MAYOR_IGUAL;
precedence left MAS,MENOS;
precedence left MULTIPLICACION,DIVISION,MOD;
precedence right UMENOS; 
precedence right POW;
precedence left INCREMENTO,DECREMENTO;
precedence left PARENTESIS_ABIERTO,PARENTESIS_CERRADO;

start with inicio;

/* Reglas sintacticas */
 

// Da inicio a las transiciones

inicio ::= ts:a {: System.out.println("Doc ok"); 
                   
                

             :}
       ;

ts ::= instrucciones:a {:   :}
   ;

instrucciones ::= instrucciones:a opciones_instrucciones:b {:

                                            
                                            
                                                            
                                         :}
                | opciones_instrucciones:a {:  
                                            
                                         :}
               ;

opciones_instrucciones ::= declaracion_variable:a
                                            {: 
                                            

                                           :}
                        |  asignacion:a   {: 
                                            

                                           :}
                        |  funcion_console_log:a
                                            {: 
                                           
                                           :}
                        |  declaracion_funcion:a
                                            {: 
                                            
                                           :}
                        |  llamada_funcion_normal:a
                                            {: 
                                           
                                           :}
                        |  opciones_if:a
                                            {: 
                                            
                                           :}
                        |  funcion_return:a
                                            {: 
                                            
                                           :}
                        |  instruccion_break:a
                                            {: 
                                           
                                           :}
                        |  instruccion_continue:a
                                            {: 
                                           
                                           :}
                        |  funcion_incremento_decremento:a
                                            {: 
                                            
                                           :}
                        |  funcion_for:a
                                            {: 
                                          
                                           :}
                        |  funcion_while:a
                                            {: 
                                           
                                           :}
                        |  funcion_do_while:a
                                            {: 
                                             
                                           :}
                        |  funcion_printAst:a
                                            {: 
                                           
                                           :}
                        |  funcion_getSymbolTable:a
                                            {: 
                                            
                                           :}
                        ;

opciones_instrucciones_sin_return ::= 
                        declaracion_variable:a
                                            {: 
                                            
                                           :}
                        |  asignacion:a   {: 
                                            
                                           :}
                        |  funcion_console_log:a
                                            {: 
                                            
                                           :}
                        |  declaracion_funcion:a
                                            {: 
                                            
                                           :}
                        |  llamada_funcion_normal:a
                                            {: 
                                            
                                           :}
                        |  opciones_if:a
                                            {: 
                                            
                                           :}
                        |  instruccion_break:a
                                            {: 
                                            
                                           :}
                        |  instruccion_continue:a
                                            {: 
                                            
                                           :}
                        |  funcion_incremento_decremento:a
                                            {: 
                                            
                                           :}
                        |  funcion_for:a
                                            {: 
                                            
                                           :}
                        |  funcion_while:a
                                            {: 
                                            
                                           :}
                        |  funcion_do_while:a
                                            {: 
                                            
                                           :}
                        |  funcion_printAst:a
                                            {: 
                                            
                                           :}
                        |  funcion_getSymbolTable:a
                                            {: 
                                            
                                           :}
                        ;

asignacion ::= ID:id ASIGNACION:igual variable_valor:value PUNTO_COMA:puntoComa {: 
                                                                                    

                                
                                                                                :}
            ;

declaracion_variable ::= tipo_acceso_variable:a id_valor_variable_lista:b PUNTO_COMA:c
        {: 

        

                for(int i = 0;i<b.size();i++){

                    Variable_Aux variable = (Variable_Aux) b.get(i);    
                    instructions.add(new Declaration(aright,aleft,a,variable.getType(),variable.getId(),variable.getValue()));
                }
           
        :}

                      ;

id_valor_variable_lista ::=  id_valor_variable_lista:a COMA:b id_valor_variable:c
                            {:

                            a.add(c);
                            RESULT = a;
                                                  
                            :}
                         |   id_valor_variable:a
                            {:
                            
                                RESULT = new ArrayList<>(); RESULT.add(a);

                            :}
                         ;

id_valor_variable ::= ID:id DOS_PUNTOS:b tipo_dato_variable:tipoDato ASIGNACION:c variable_valor:valor 
                    {:
                          //id:number = 34;
                          RESULT = new Variable_Aux(id,tipoDato,valor);

                    :}

                    | ID:id ASIGNACION:b variable_valor:valor 
                    {:
                           //id = 34;                   

                        RESULT = new Variable_Aux(id,VariableType.PENDIENTE,valor);                        
                           
                    :}
                    | ID:id DOS_PUNTOS:b tipo_dato_variable:tipoDato 
                    {:
                        //let hola:number;
                        Value value = new Value(idright,idleft,"undefined",ValueType.UNDEFINED);
                        RESULT = new Variable_Aux(id,tipoDato,value);                        
                        
                    :}
                   ;



tipo_acceso_variable ::= RCONST {:
                                    RESULT = AccessType.CONST;
                               :}

                       | RLET   {: 
                                     RESULT = AccessType.LET;
                                :} 
                      ;

tipo_dato_variable ::= RNUMBER:rnumber  {: 
                                           RESULT = VariableType.NUMBER; 
                                  :} 

                    |  RBIGINT:rbigint  {: 
                                     
                                            RESULT = VariableType.BIGINT;        
                                        :}  

                    |  RSTRING:rstring  {: 
                                        
                                            RESULT = VariableType.STRING;     

                                        :} 

                    |  RBOOLEAN:rboolean {: 

                                            RESULT = VariableType.BOOLEAN;                                                 

                                        :}
                    ;

variable_valor ::= instruccion:a {: 
                                    RESULT = a;
                                 :}
                ;

instruccion ::=  operaciones_matematicas:a {:
                                                
                                            RESULT = a;

                                           :}
                | operaciones_logicas:a {:
                                                
                                        :}

                | funcion_boolean:a {:
                                                
                                 :}
                | funcion_string:a  {:

                                                
                                  :}
                | funcion_char_at:a {: 
                                                

                                  :}
                | funcion_to_lower_case:a {:
                                                
                                        :}
                | funcion_to_upper_case:a {:
                                                
                                        :}
                | funcion_concat:a {:
                                                
                                 :}
                | llamada_funcion_asignacion:a {:
                                                
                                              :}
                | incremento:a {:
                                                
                             :}
                | decremento:a {:
                                                
                             :}
                ;


operaciones_matematicas ::= 
                          MENOS:a operaciones_matematicas:b       
                                        {:
                                             
                                        

                                        :}%prec UMENOS 
                        | MAS:a operaciones_matematicas:b 
                                        {:
                                             
                                            
                                        :}%prec UMENOS 
                        | operaciones_matematicas:a MAS:b operaciones_matematicas:c
                                        {:
                                          
                                        RESULT = new BinaryOperation(aright,aleft,OperationType.SUMA,a,c);

                                        :}
                        | operaciones_matematicas:a MENOS:b operaciones_matematicas:c
                                        {:
                                        
                                        RESULT = new BinaryOperation(aright,aleft,OperationType.RESTA,a,c);                                             
                                            
                                        :}
                        | operaciones_matematicas:a MULTIPLICACION:b operaciones_matematicas:c
                                        {:
                                            
                                        RESULT = new BinaryOperation(aright,aleft,OperationType.MULTIPLICACION,a,c);                                              
                                            
                                        :}                        
                        | operaciones_matematicas:a DIVISION:b operaciones_matematicas:c
                                        {:
                                             
                                        RESULT = new BinaryOperation(aright,aleft,OperationType.DIVISION,a,c);                                             

                                        :}
                        | operaciones_matematicas:a MOD:b operaciones_matematicas:c
                                        {:
                                        
                                        RESULT = new BinaryOperation(aright,aleft,OperationType.MOD,a,c);

                                        :}
                        | PARENTESIS_ABIERTO:a operaciones_matematicas:b PARENTESIS_CERRADO:c 
                                            {:
                                             
                                    RESULT = b;
                                            
                                            :}
                        | funcion_number:a {:
                                             
                                           :}
                        | funcion_bigint:a {:
                                             
                                           :}
                        | funcion_length:a {:
                                             
                                           :}
                        | funciones_numericas_estaticas:a {:
                                     
                                                          :}
                        | NUMBER:a {:
                                     
                                     RESULT = new Value(aright,aleft,a,ValueType.NUMBER);

                                   :}
                        | BIGINT:a {:
                                     
                                     RESULT = new Value(aright,aleft,a,ValueType.BIGINT);   

                                   :}
                        | ID:a    {: 
                                    
                                    RESULT = new Value(aright,aleft,a,ValueType.ID);

                                  :}
                        | TEXTO:a {: 
                                    
                                    RESULT = new Value(aright,aleft,a,ValueType.TEXTO);
                                        
                                  :}
                        ;

funciones_numericas_estaticas ::= MATH:a PUNTO:b ABS:c PARENTESIS_ABIERTO:d operaciones_matematicas:e PARENTESIS_CERRADO:f
                                {:

                                        
                                :}
                               |  MATH:a PUNTO:b CEIL:c   PARENTESIS_ABIERTO:d operaciones_matematicas:e PARENTESIS_CERRADO:f
                                {:
                                        
                                        
                                :}
                               |  MATH:a PUNTO:b COS:c    PARENTESIS_ABIERTO:d operaciones_matematicas:e PARENTESIS_CERRADO:f
                               {:
                                        
                                        
                               :}
                               |  MATH:a PUNTO:b SIN:c    PARENTESIS_ABIERTO:d operaciones_matematicas:e PARENTESIS_CERRADO:f
                               {:
                                        
                                        
                               :}
                               |  MATH:a PUNTO:b TAN:c    PARENTESIS_ABIERTO:d operaciones_matematicas:e PARENTESIS_CERRADO:f
                               {:

                                        

                               :}
                               |  MATH:a PUNTO:b EXP:c    PARENTESIS_ABIERTO:d operaciones_matematicas:e PARENTESIS_CERRADO:f
                                {:

                                        

                                :}
                               |  MATH:a PUNTO:b FLOOR:c  PARENTESIS_ABIERTO:d operaciones_matematicas:e PARENTESIS_CERRADO:f
                                {:

                                        

                                :}
                               |  MATH:a PUNTO:b POW:c    PARENTESIS_ABIERTO:d operaciones_matematicas:e COMA:f operaciones_matematicas:g PARENTESIS_CERRADO:h
                                {:

                                        

                                :}
                               |  MATH:a PUNTO:b SQRT:c   PARENTESIS_ABIERTO:d operaciones_matematicas:e PARENTESIS_CERRADO:f
                                {:
                            
                                

                                :}
                               |  MATH:a PUNTO:b RANDOM:c PARENTESIS_ABIERTO:d operaciones_matematicas:e PARENTESIS_CERRADO:f
                                {:

                                    
                                    RESULT = new Value(aright,aleft,Math.random(),ValueType.NUMBER);    

                                :}
                               |  MATH:a PUNTO:b E:c
                                {:
                                        
                                    RESULT = new Value(aright,aleft,Math.E,ValueType.NUMBER);    
                                :}
                               |  MATH:a PUNTO:b PI:c
                                {:

                                    RESULT = new Value(aright,aleft,Math.PI,ValueType.NUMBER);    

                                :}
                               |  MATH:a PUNTO:b SQRT2:c
                                {:
                                    
                                    RESULT = new Value(aright,aleft,Math.sqrt(2),ValueType.NUMBER);
                                        
                                :}
                              ;

incremento ::= ID:id INCREMENTO:incremento
                {:

                :}

           ;

decremento ::= ID:id DECREMENTO:decremento
                {:
                     
                :}
            ;

funcion_incremento_decremento ::= ID:a INCREMENTO:b PUNTO_COMA:c
                {:
                    
                :}

               |  ID:a DECREMENTO:b PUNTO_COMA:c
               {:
                    
                :}
                       ;

operaciones_relacionales ::= operaciones_matematicas:a MAYOR_QUE:b operaciones_matematicas:c
                            {:
                                
                                
                            :}
                           | operaciones_matematicas:a MAYOR_IGUAL:b operaciones_matematicas:c
                            {:
                                
                            :}
                           | operaciones_matematicas:a MENOR_QUE:b operaciones_matematicas:c
                            {:
                                                
                                
                            :}
                           | operaciones_matematicas:a MENOR_IGUAL:b operaciones_matematicas:c
                            {:

                                
                            :}
                           | operaciones_matematicas:a COMPARACION:b operaciones_matematicas:c
                            {:

                                
                            :}
                           | operaciones_matematicas:a DISTINTO:b operaciones_matematicas:c
                            {:
                                
                                
                            :}

                           | TRUE:a COMPARACION:b TRUE:c
                            {:

                                
                            :}
                           | TRUE:a COMPARACION:b FALSE:c
                            {:

                                
                            :}
                           | FALSE:a COMPARACION:b TRUE:c
                            {:
                                
                                
                            :}
                           | FALSE:a COMPARACION:b FALSE:c
                            {:
                                
                            :}
                           | operaciones_matematicas:a COMPARACION:b TRUE:c
                            {:
                                
                                
                            :}
                           | TRUE:a COMPARACION:b operaciones_matematicas:c
                            {:

                                
                            :}
                           | operaciones_matematicas:a COMPARACION:b FALSE:c
                            {:

                                
                            :}
                           | FALSE:a COMPARACION:b operaciones_matematicas:c
                            {:

                                
                            :}

                           | TRUE:a DISTINTO:b TRUE:c
                            {:
                                
                                
                            :}
                           | TRUE:a DISTINTO:b FALSE:c
                            {:
                                
                                
                            :}
                           | FALSE:a DISTINTO:b TRUE:c
                            {:
                                
                                
                            :}
                           | FALSE:a DISTINTO:b FALSE:c
                            {:
                                
                                
                            :}
                           | operaciones_matematicas:a DISTINTO:b TRUE:c
                            {:
                                
                                
                            :}
                           | TRUE:a DISTINTO:b operaciones_matematicas:c
                            {:
                                
                            :}
                           | operaciones_matematicas:a DISTINTO:b FALSE:c
                            {:
                                
                                
                            :}
                           | FALSE:a DISTINTO:b operaciones_matematicas:c
                            {:
                                
                                
                            :}
                       
                           | TRUE:a 
                           {:
                                    RESULT = new Value(aright,aleft,a,ValueType.TRUE);
                           :}
                           | FALSE:a 
                           {:
                                    RESULT = new Value(aright,aleft,a,ValueType.FALSE);
                           :}


                           
                           | funcion_boolean:a COMPARACION:b TRUE:c
                            {:
                                

                            :}

                           | funcion_boolean:a COMPARACION:b FALSE:c
                            {:
                                
                               
                            :}
                           | TRUE:a COMPARACION:b funcion_boolean:c
                            {:

                                
                            :}
                           | FALSE:a COMPARACION:b funcion_boolean:c
                            {:
                                
                                
                            :}


                           | funcion_boolean:a DISTINTO:b TRUE:c
                            {:
                                
                                
                            :}
                           | funcion_boolean:a DISTINTO:b FALSE:c
                            {:
                                
                                
                            :}
                           | TRUE:a DISTINTO:b funcion_boolean:c
                            {:
                                
                                
                            :}
                           | FALSE:a DISTINTO:b funcion_boolean:c
                            {:
                                
                               
                            :}


                           | funcion_boolean:a COMPARACION:b funcion_boolean:c
                            {:
                                
                                 
                            :}
                           | funcion_boolean:a DISTINTO:b funcion_boolean:c
                            {:
                                
                                
                            :}

                           | funcion_string:a COMPARACION:b funcion_string:c
                            {:
                              

                            :}
                           | funcion_string:a DISTINTO:b funcion_string:c
                            {:
                                
                                
                            :}

                           | funcion_string:a COMPARACION:b operaciones_matematicas:c
                            {:
                                
                                
                            :}

                           | funcion_string:a DISTINTO:b operaciones_matematicas:c
                            {:
                                
                                
                            :}

                           | operaciones_matematicas:a COMPARACION:b funcion_string:c
                            {:

                                
                            :}

                           | operaciones_matematicas:a DISTINTO:b funcion_string:c
                            {:
                                
                                
                            :}

                           | PARENTESIS_ABIERTO:a operaciones_relacionales:b PARENTESIS_CERRADO:c
                            {:
                                
                            :}
                          ;  

operaciones_logicas ::= operaciones_logicas:a AND:b operaciones_logicas:c
                            {:
                                
                                
                            :}
                    | operaciones_logicas:a OR:b operaciones_logicas:c
                            {:
                                
                                
                            :}
                    | NOT:a operaciones_logicas:b
                            {:

                                
                            :}
                    | PARENTESIS_ABIERTO:a operaciones_logicas:b PARENTESIS_CERRADO:c
                            {:
                                
                                
                            :}
                    | operaciones_relacionales:a
                            {:
                                
                            :}
                    ;

funcion_length ::= TEXTO:a PUNTO:b LENGTH:c
                            {:

                                
                            :}
                |  ID:a PUNTO:b LENGTH:c
                            {:
                                
                            :}
                |  variables_string:a PUNTO:b LENGTH:c
                            {:
                                
                            :}
                ;


funcion_number ::= FNUMBER:a PARENTESIS_ABIERTO:b operaciones_matematicas:c PARENTESIS_CERRADO:d
                            {:
                                

                                
                            :}
                |  FNUMBER:a PARENTESIS_ABIERTO:b operaciones_logicas:c PARENTESIS_CERRADO:d
                            {:

                                
                            :}
                |  FNUMBER:a PARENTESIS_ABIERTO:b TEXTO:c PARENTESIS_CERRADO:d
                            {:

                                
                            :}
                |  FNUMBER:a PARENTESIS_ABIERTO:b variables_string:c PARENTESIS_CERRADO:d
                            {:

                                
                            :}
                ;

funcion_bigint  ::= FBIGINT:a PARENTESIS_ABIERTO:b operaciones_matematicas:c PARENTESIS_CERRADO:d
                            {:


                                
                            :}
                |   FBIGINT:a PARENTESIS_ABIERTO:b operaciones_logicas:c PARENTESIS_CERRADO:d
                            {:

                                
                            :}
                |   FBIGINT:a PARENTESIS_ABIERTO:b TEXTO:c PARENTESIS_CERRADO:d
                            {:

                                
                            :}
                |   FBIGINT:a PARENTESIS_ABIERTO:b variables_string:c PARENTESIS_CERRADO:d
                            {:
                              
                              
                            :}
                ;


funcion_boolean  ::= FBOOLEAN:a PARENTESIS_ABIERTO:b operaciones_matematicas:c PARENTESIS_CERRADO:d
                            {:

                                                               
                            :}
                 |   FBOOLEAN:a PARENTESIS_ABIERTO:b operaciones_logicas:c PARENTESIS_CERRADO:d
                            {:

                                                              
                            :}
                 |   FBOOLEAN:a PARENTESIS_ABIERTO:b TEXTO:c PARENTESIS_CERRADO:d
                            {:

                               
                            :}
                 |   FBOOLEAN:a PARENTESIS_ABIERTO:b variables_string:c PARENTESIS_CERRADO:d
                            {:
                                

                               
                            :}
                 ;


funcion_string  ::= FSTRING:a PARENTESIS_ABIERTO:b operaciones_matematicas:c PARENTESIS_CERRADO:d
                            {:
                                
                               
                            :}
                 |  FSTRING:a PARENTESIS_ABIERTO:b operaciones_logicas:c PARENTESIS_CERRADO:d
                            {:
                                                 
                            :}
                 |  FSTRING:a PARENTESIS_ABIERTO:b TEXTO:c PARENTESIS_CERRADO:d
                            {:
                                
                            :}
                 |  FSTRING:a PARENTESIS_ABIERTO:b variables_string:c PARENTESIS_CERRADO:d
                            {:
                                
                                
                            :}
                 ;

funcion_char_at ::= ID:a PUNTO:b CHARAT:c PARENTESIS_ABIERTO:d operaciones_matematicas:e PARENTESIS_CERRADO:f
                            {:
                                
                            :}
                |   TEXTO:a PUNTO:b CHARAT:c PARENTESIS_ABIERTO:d operaciones_matematicas:e PARENTESIS_CERRADO:f
                            {:
                                
                            :}
                |   variables_string:a PUNTO:b CHARAT:c PARENTESIS_ABIERTO:d operaciones_matematicas:e PARENTESIS_CERRADO:f
                            {:
                                
                                
                            :}
                ;


funcion_concat ::= variables_string:a PUNTO:b CONCAT:c PARENTESIS_ABIERTO:d instruccion:e PARENTESIS_CERRADO:f
                    {:

                        
                    :}
                |  TEXTO:a PUNTO:b CONCAT:c PARENTESIS_ABIERTO:d instruccion:e PARENTESIS_CERRADO:f
                    {:

                        

                    :}
                |  ID:a PUNTO:b CONCAT:c PARENTESIS_ABIERTO:d instruccion:e PARENTESIS_CERRADO:f
                    {:
                        
                    :}
                ;

variables_string ::= funcion_string:a
                  {:
                     
                  :}
                 |  funcion_char_at:a   
                  {:
                     
                  :}
                 |  funcion_to_lower_case:a
                  {:
                    
                  :}
                 |  funcion_to_upper_case:a
                  {:
                    
                  :}
                 |  funcion_concat:a
                  {:
                    
                  :}
                 |  llamada_funcion_asignacion:a
                  {:
                    
                  :}
                 ;


funcion_to_lower_case ::= ID:a PUNTO:b TOLOWERCASE:c PARENTESIS_ABIERTO:d PARENTESIS_CERRADO:e
                        {:
                                                          
                        :}
                       |  TEXTO:a PUNTO:b TOLOWERCASE:c PARENTESIS_ABIERTO:d PARENTESIS_CERRADO:e
                        {:
                                                           
                        :}
                       |  variables_string:a PUNTO:b TOLOWERCASE:c PARENTESIS_ABIERTO:d PARENTESIS_CERRADO:e
                        {:

                                                         
                        :}
                       ;

funcion_to_upper_case ::= ID:a PUNTO:b TOUPPERCASE:c PARENTESIS_ABIERTO:d PARENTESIS_CERRADO:e
                        {:
                                                          
                        :}
                       |  TEXTO:a PUNTO:b TOUPPERCASE:c PARENTESIS_ABIERTO:d PARENTESIS_CERRADO:e
                        {:
                                                          
                        :}
                       |  variables_string:a PUNTO:b TOUPPERCASE:c PARENTESIS_ABIERTO:d PARENTESIS_CERRADO:e
                        {:
                            
                                                            
                        :}
                       ;

funcion_console_log ::= CONSOLE:a PUNTO:b LOG:c PARENTESIS_ABIERTO:d lista_instrucciones_console:e PARENTESIS_CERRADO:f PUNTO_COMA:g
                    {:
                        
                                                        
                    :}
            ;

lista_instrucciones_console ::= lista_instrucciones_console:a COMA:b instruccion:c
                            {: 
                                
                                
                              
                            :}
                             |  instruccion:a 
                                {: 
                                  
                                  

                                :}
                             ;

 

declaracion_funcion ::= 

 FUNCTION:a ID:b PARENTESIS_ABIERTO:c PARENTESIS_CERRADO:d DOS_PUNTOS:e RVOID:f CORCHETE_ABIERTO:g instrucciones_funciones_sin_return:h CORCHETE_CERRADO:i
 
 {:
            

 :}

|FUNCTION:a ID:b PARENTESIS_ABIERTO:c parametros_funcion_declaracion:d PARENTESIS_CERRADO:e DOS_PUNTOS:f RVOID:g CORCHETE_ABIERTO:h instrucciones_funciones_sin_return:i CORCHETE_CERRADO:j
{:
            

 :}

|FUNCTION:a ID:b PARENTESIS_ABIERTO:c PARENTESIS_CERRADO:d CORCHETE_ABIERTO:e instrucciones_funcion:f CORCHETE_CERRADO:g
{:
            

 :}

|FUNCTION:a ID:b PARENTESIS_ABIERTO:c parametros_funcion_declaracion:d PARENTESIS_CERRADO:e CORCHETE_ABIERTO:f instrucciones_funcion:g CORCHETE_CERRADO:h
{:
            
 :}

|FUNCTION:a ID:b PARENTESIS_ABIERTO:c PARENTESIS_CERRADO:d DOS_PUNTOS:e tipo_dato_variable:f CORCHETE_ABIERTO:g instrucciones_funcion:h CORCHETE_CERRADO:i
{:
            
 :}

|FUNCTION:a ID:b PARENTESIS_ABIERTO:c parametros_funcion_declaracion:d PARENTESIS_CERRADO:e DOS_PUNTOS:f tipo_dato_variable:g CORCHETE_ABIERTO:h instrucciones_funcion:i CORCHETE_CERRADO:j
{:
            
 :}        
                    ;


instrucciones_funciones_sin_return ::= instrucciones_funciones_sin_return:a opciones_instrucciones_sin_return:b
                                    {:

                                    :}
                                    | opciones_instrucciones_sin_return:a
                                    {:
                                        
                                    :}
                                    ;


instrucciones_funcion ::= instrucciones:a 
                      {: 
                            
                      :}

                       | 
                       
                       {: 
                            
                       :}

                       ;

parametros_funcion_declaracion ::= parametros_funcion_declaracion:a COMA:b parametro_funcion_declaracion:c
                                {:

                                    

                                :}

                                |  parametro_funcion_declaracion:a
                                {:

                                :}
                                ;

parametro_funcion_declaracion ::= ID:a DOS_PUNTOS:b tipo_dato_variable:c
                                {:

                                    
                                :}
                                ;


funcion_return ::= RETURN:a instruccion:b PUNTO_COMA:c
                    {:



                    :}
                | RETURN:a PUNTO_COMA:b
                    {:
                        
 
                    :}
                ;

llamada_funcion_asignacion ::= ID:a PARENTESIS_ABIERTO:b PARENTESIS_CERRADO:c
                              {:

                              

                              :}
                            |  ID:a PARENTESIS_ABIERTO:b parametros_funcion_asignacion:c PARENTESIS_CERRADO:d
                              {:

                         

                              :}
                            ;

parametros_funcion_asignacion ::= parametros_funcion_asignacion:a COMA:b instruccion:c
                               {:
                                    
                              
                               :}
                               |  instruccion:a
                               {:
                                   
                               :}
                               ;



llamada_funcion_normal ::= ID:a PARENTESIS_ABIERTO:b PARENTESIS_CERRADO:c PUNTO_COMA:d
                           {:
    

                           :}
                        |  ID:a PARENTESIS_ABIERTO:b instruccion:c PARENTESIS_CERRADO:d PUNTO_COMA:e
                           {:
    

                           :}
                        ;

funcion_if ::= IF:a PARENTESIS_ABIERTO:b instruccion:c PARENTESIS_CERRADO:d CORCHETE_ABIERTO:e instrucciones_funcion:f CORCHETE_CERRADO:g
              {:

                         

              :}
            ;

funcion_else ::= ELSE:a CORCHETE_ABIERTO:b instrucciones_funcion:c CORCHETE_CERRADO:d
              {:


              :}
              ;  


funcion_else_if ::= ELSE:a IF:b PARENTESIS_ABIERTO:c instruccion:d PARENTESIS_CERRADO:e CORCHETE_ABIERTO:f instrucciones_funcion:g CORCHETE_CERRADO:h
              {:
                    

                            
              :}
                ;

lista_else_if ::= lista_else_if:a funcion_else_if:b
                  {:
                     
                  :}
                | funcion_else_if:a {:
                          
                                  :}
                ;

opciones_if ::=  funcion_if:a
                {:
                
                :}
                | funcion_if:a funcion_else:b
                {:
                   
                :}
                | funcion_if:a lista_else_if:b funcion_else:c
                {:
                 
                :}                
                | funcion_if:a lista_else_if:b
                {:
                  
                :}                                
                ;


instruccion_break ::= BREAK:a PUNTO_COMA:b
                    {: 
                                
                   

                    :}
                  ;


instruccion_continue ::= CONTINUE:a PUNTO_COMA:b
                    {: 
                        
                   

                    :}
                     ;


funcion_for ::= 
FOR:a PARENTESIS_ABIERTO:b declaracion_variable:c operaciones_logicas:d PUNTO_COMA:e accion_asignacion_for:f PARENTESIS_CERRADO:g CORCHETE_ABIERTO:h instrucciones_funcion:i CORCHETE_CERRADO:j
    {:


 

    :}


|FOR:a PARENTESIS_ABIERTO:b asignacion:c operaciones_logicas:d PUNTO_COMA:e accion_asignacion_for:f PARENTESIS_CERRADO:g CORCHETE_ABIERTO:h instrucciones_funcion:i CORCHETE_CERRADO:j
    {:




    :}
            ;


accion_asignacion_for ::= incremento:a
                        {:
                            
                        :}

                       | decremento:a
                        {:
                            
                        :}                       
                        
                       | ID:a ASIGNACION:b instruccion:c
                        
                        {:


                        :}

                       ;


funcion_while ::= WHILE:a PARENTESIS_ABIERTO:b instruccion:c PARENTESIS_CERRADO:d CORCHETE_ABIERTO:e instrucciones_funcion:f CORCHETE_CERRADO:g
                {:

                    

                :}
              ;


funcion_do_while ::= DO:a CORCHETE_ABIERTO:b instrucciones_funcion:c CORCHETE_CERRADO:d WHILE:e PARENTESIS_ABIERTO:f instruccion:g PARENTESIS_CERRADO:h PUNTO_COMA:i
                {:

                    
      

                :}
                 ;


funcion_printAst ::= PRINTAST:a PARENTESIS_ABIERTO:b instruccion:c PARENTESIS_CERRADO:d PUNTO_COMA:e
                    {:


                    :}
                  ;


funcion_getSymbolTable ::= GETSYMBOLTABLE:a PARENTESIS_ABIERTO:b PARENTESIS_CERRADO:c PUNTO_COMA:d
                    {:


                        
                        

                    :}
                     ;

