/* Codigo de usuario */

// importaciones y paquetes

package com.peter.typesecure.parser;

import com.peter.typesecure.lexer.Lexer;
import java_cup.runtime.Symbol;
import com.peter.typesecure.error.Error_analizadores;
import java.util.ArrayList;
import com.peter.typesecure.arbol.Nodo;


// Codigo para el parser, variables, metodos

parser code {:

    public Parser(Lexer lexer) {
        super(lexer);
    }

    //Array donde esta toda la produccion
    public ArrayList<Nodo> arbol = new ArrayList<Nodo>();


    //Array errores
    
    public static ArrayList<Error_analizadores> errores = Lexer.errores;

    //Metodo llamado automaticamente al encontrar error sintanctico

    public void syntax_error(Symbol s){

    

    if(s.sym == 0){

    errores.add( new Error_analizadores("Sintactico", "No se esperaba el fin del archivo ") );

    }else{

        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        errores.add( new Error_analizadores("Sintactico", lexema, fila, columna, "No se esperaba este token") );
        //System.out.println("Error Sintactico hallado");
        //System.out.println("Lexema " + lexema + " linea"  + fila + " columna " + columna);
    }

    
    }

    //Metodo llamado cuando no se puede recuperar de un error
    
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 

    
        
    if(s.sym == 0){

    errores.add( new Error_analizadores("Sintactico", "No se esperaba el fin del archivo ") );

    }else{

        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        errores.add( new Error_analizadores("Sintactico", lexema, fila, columna, "No se esperaba este token") );
        //System.out.println("Error Sintactico hallado");
        //System.out.println("Lexema " + lexema + " linea"  + fila + " columna " + columna);
    }
        
    } 

:}

                                                    // CODIGO PARA LAS ACCIONES GRAMATICALES

            /* Declaraciones de terminales y no terminales */

    /* TERMINALES */

/* NUMEROS */

terminal NUMBER;

terminal BIGINT;

/* ID */
terminal ID;

/* TEXTO */
terminal TEXTO;

/* BOOLEANOS */
terminal TRUE,FALSE;

/* TIPOS DE DATOS */
terminal RNUMBER,RBIGINT,RSTRING,RBOOLEAN,RVOID,RCONST,RLET;

/* SIMBOLOS ARITMETICOS */

terminal MAS,MENOS,MULTIPLICACION,MOD,DIVISION,UMENOS;
terminal PARENTESIS_ABIERTO,PARENTESIS_CERRADO;
terminal INCREMENTO,DECREMENTO;

/* ASIGNACION */
terminal ASIGNACION;

/* OPERADORES LOGICOS */
terminal AND, OR, NOT;

/* OPERADORES RELACIONALES */
terminal MENOR_QUE, MENOR_IGUAL, MAYOR_QUE, MAYOR_IGUAL, COMPARACION, DISTINTO;

/* SIMBOLOS DE PUNTUACION*/

terminal PUNTO, COMA, DOS_PUNTOS, PUNTO_COMA;

/* SIMBOLOS DE AGRUPACION */

terminal CORCHETE_ABIERTO, CORCHETE_CERRADO;

/* FUNCIONES */

terminal FUNCTION;

//CONVERSION DE TIPOS
terminal FNUMBER, FBIGINT, FBOOLEAN, FSTRING;

//ACCESO PROPIEDAD
terminal LENGTH, CHARAT;

//MAYUSCULA, MINUSCULA
terminal TOLOWERCASE, TOUPPERCASE;

//ACCIONES VARIAS
terminal CONCAT, CONSOLE, LOG;

//SENTENCIAS DE CONTROL

terminal IF, ELSE, FOR, WHILE, DO, BREAK, CONTINUE, RETURN;

//VALORES ESTATICOS 
terminal MATH, E, PI, SQRT2, ABS, CEIL, COS, SIN, TAN, EXP, FLOOR, POW, SQRT, RANDOM, PRINTAST, GETSYMBOLTABLE;

/* NO TERMINALES */

//no terminal que da inicio a todo
non terminal inicio;

//no terminal que contiene el lenguaje TypeSecure
non terminal ts;

//opciones a ejecutar
non terminal instrucciones, opciones_instrucciones;

//instruccion
non terminal instruccion;

//declaracion de variable
non terminal declaracion_variable, tipo_acceso_variable, id_valor_variable_lista, id_valor_variable;
non terminal tipo_dato_variable, variable_valor;

//asignacion
non terminal asignacion;

//operaciones matematicas
non terminal operaciones_matematicas,funciones_numericas_estaticas;

//incremento decremento
non terminal incremento, decremento;

//funcion incremento decremento
non terminal funcion_incremento_decremento;

//operaciones relacionales
non terminal operaciones_relacionales;

//operaciones logicas
non terminal operaciones_logicas;

        /* FUNCIONES */

//funcion length
non terminal funcion_length;

//funcion number
non terminal funcion_number;

//funcion biging
non terminal funcion_bigint;

//funcion boolean
non terminal funcion_boolean;

//funcion string
non terminal funcion_string;

//funcion charAt
non terminal funcion_char_at;

//funcion toLowerCase
non terminal funcion_to_lower_case;

//funcion toUpperCase
non terminal funcion_to_upper_case;

//funcion concat
non terminal variables_string, funcion_concat;

//funcion console log
non terminal funcion_console_log,lista_instrucciones_console;

//declaracion de funciones
non terminal declaracion_funcion, parametro_funcion_declaracion,parametros_funcion_declaracion, instrucciones_funcion;
non terminal instrucciones_funciones_sin_return,opciones_instrucciones_sin_return;

//funcion return
non terminal funcion_return;

//funcion if
non terminal funcion_if, funcion_else, funcion_else_if, lista_else_if, opciones_if;


//llamada de funciones
non terminal llamada_funcion_asignacion, parametros_funcion_asignacion, llamada_funcion_normal;

//instruccion break
non terminal instruccion_break;

//instruccion continue
non terminal instruccion_continue;

//instruccion for Loop
non terminal funcion_for, accion_asignacion_for;

//instruccion do while
non terminal funcion_do_while;

//instruccion while
non terminal funcion_while;

//funcion printAst
non terminal funcion_printAst;

//funcion getSymbolTable
non terminal funcion_getSymbolTable;

// PRECEDENCIA

precedence left OR;
precedence left AND;
precedence left NOT;
precedence left COMPARACION, MENOR_QUE, MAYOR_QUE,MENOR_IGUAL,MAYOR_IGUAL;
precedence left MAS,MENOS;
precedence left MULTIPLICACION,DIVISION,MOD;
precedence right UMENOS; 
precedence right POW;
precedence left INCREMENTO,DECREMENTO;
precedence left PARENTESIS_ABIERTO,PARENTESIS_CERRADO;

start with inicio;

/* Reglas sintacticas */
 

// Da inicio a las transiciones

inicio ::= ts:a {: System.out.println("Doc ok"); 
                            ArrayList tmp = new ArrayList<>(); 
                            tmp.add(a);
                            arbol.add(new Nodo("Inicial", tmp ,aright,aleft));
             :}
       ;

ts ::= instrucciones:a {: RESULT = a; :}
   ;

instrucciones ::= instrucciones:a opciones_instrucciones:b {:  
                                                            ArrayList tmp = new ArrayList<>(); 
                                                            tmp.add(a);
                                                            tmp.add(b);
                                                            RESULT = new Nodo("instrucciones", tmp ,aright,aleft); 
                                         :}
                | opciones_instrucciones:a {:  
                                            ArrayList tmp = new ArrayList<>(); 
                                            tmp.add(a);
                                            RESULT = new Nodo("instrucciones", tmp ,aright,aleft); 
                                         :}
               ;

opciones_instrucciones ::= declaracion_variable:a
                                            {: 
                                            ArrayList tmp = new ArrayList<>(); 
                                            tmp.add(a);
                                            RESULT = new Nodo("instruccion", tmp ,aright,aleft); 
                                           :}
                        |  asignacion:a   {: 
                                            ArrayList tmp = new ArrayList<>(); 
                                            tmp.add(a);
                                            RESULT = new Nodo("instruccion", tmp ,aright,aleft); 
                                           :}
                        |  funcion_console_log:a
                                            {: 
                                            ArrayList tmp = new ArrayList<>(); 
                                            tmp.add(a);
                                            RESULT = new Nodo("instruccion", tmp ,aright,aleft); 
                                           :}
                        |  declaracion_funcion:a
                                            {: 
                                            ArrayList tmp = new ArrayList<>(); 
                                            tmp.add(a);
                                            RESULT = new Nodo("instruccion", tmp ,aright,aleft); 
                                           :}
                        |  llamada_funcion_normal:a
                                            {: 
                                            ArrayList tmp = new ArrayList<>(); 
                                            tmp.add(a);
                                            RESULT = new Nodo("instruccion", tmp ,aright,aleft); 
                                           :}
                        |  opciones_if:a
                                            {: 
                                            ArrayList tmp = new ArrayList<>(); 
                                            tmp.add(a);
                                            RESULT = new Nodo("instruccion", tmp ,aright,aleft); 
                                           :}
                        |  funcion_return:a
                                            {: 
                                            ArrayList tmp = new ArrayList<>(); 
                                            tmp.add(a);
                                            RESULT = new Nodo("instruccion", tmp ,aright,aleft); 
                                           :}
                        |  instruccion_break:a
                                            {: 
                                            ArrayList tmp = new ArrayList<>(); 
                                            tmp.add(a);
                                            RESULT = new Nodo("instruccion", tmp ,aright,aleft); 
                                           :}
                        |  instruccion_continue:a
                                            {: 
                                            ArrayList tmp = new ArrayList<>(); 
                                            tmp.add(a);
                                            RESULT = new Nodo("instruccion", tmp ,aright,aleft); 
                                           :}
                        |  funcion_incremento_decremento:a
                                            {: 
                                            ArrayList tmp = new ArrayList<>(); 
                                            tmp.add(a);
                                            RESULT = new Nodo("instruccion", tmp ,aright,aleft); 
                                           :}
                        |  funcion_for:a
                                            {: 
                                            ArrayList tmp = new ArrayList<>(); 
                                            tmp.add(a);
                                            RESULT = new Nodo("instruccion", tmp ,aright,aleft); 
                                           :}
                        |  funcion_while:a
                                            {: 
                                            ArrayList tmp = new ArrayList<>(); 
                                            tmp.add(a);
                                            RESULT = new Nodo("instruccion", tmp ,aright,aleft); 
                                           :}
                        |  funcion_do_while:a
                                            {: 
                                            ArrayList tmp = new ArrayList<>(); 
                                            tmp.add(a);
                                            RESULT = new Nodo("instruccion", tmp ,aright,aleft); 
                                           :}
                        |  funcion_printAst:a
                                            {: 
                                            ArrayList tmp = new ArrayList<>(); 
                                            tmp.add(a);
                                            RESULT = new Nodo("instruccion", tmp ,aright,aleft); 
                                           :}
                        |  funcion_getSymbolTable:a
                                            {: 
                                            ArrayList tmp = new ArrayList<>(); 
                                            tmp.add(a);
                                            RESULT = new Nodo("instruccion", tmp ,aright,aleft); 
                                           :}
                        ;

opciones_instrucciones_sin_return ::= 
                        declaracion_variable:a
                                            {: 
                                            ArrayList tmp = new ArrayList<>(); 
                                            tmp.add(a);
                                            RESULT = new Nodo("instruccion", tmp ,aright,aleft); 
                                           :}
                        |  asignacion:a   {: 
                                            ArrayList tmp = new ArrayList<>(); 
                                            tmp.add(a);
                                            RESULT = new Nodo("instruccion", tmp ,aright,aleft); 
                                           :}
                        |  funcion_console_log:a
                                            {: 
                                            ArrayList tmp = new ArrayList<>(); 
                                            tmp.add(a);
                                            RESULT = new Nodo("instruccion", tmp ,aright,aleft); 
                                           :}
                        |  declaracion_funcion:a
                                            {: 
                                            ArrayList tmp = new ArrayList<>(); 
                                            tmp.add(a);
                                            RESULT = new Nodo("instruccion", tmp ,aright,aleft); 
                                           :}
                        |  llamada_funcion_normal:a
                                            {: 
                                            ArrayList tmp = new ArrayList<>(); 
                                            tmp.add(a);
                                            RESULT = new Nodo("instruccion", tmp ,aright,aleft); 
                                           :}
                        |  opciones_if:a
                                            {: 
                                            ArrayList tmp = new ArrayList<>(); 
                                            tmp.add(a);
                                            RESULT = new Nodo("instruccion", tmp ,aright,aleft); 
                                           :}
                        |  instruccion_break:a
                                            {: 
                                            ArrayList tmp = new ArrayList<>(); 
                                            tmp.add(a);
                                            RESULT = new Nodo("instruccion", tmp ,aright,aleft); 
                                           :}
                        |  instruccion_continue:a
                                            {: 
                                            ArrayList tmp = new ArrayList<>(); 
                                            tmp.add(a);
                                            RESULT = new Nodo("instruccion", tmp ,aright,aleft); 
                                           :}
                        |  funcion_incremento_decremento:a
                                            {: 
                                            ArrayList tmp = new ArrayList<>(); 
                                            tmp.add(a);
                                            RESULT = new Nodo("instruccion", tmp ,aright,aleft); 
                                           :}
                        |  funcion_for:a
                                            {: 
                                            ArrayList tmp = new ArrayList<>(); 
                                            tmp.add(a);
                                            RESULT = new Nodo("instruccion", tmp ,aright,aleft); 
                                           :}
                        |  funcion_while:a
                                            {: 
                                            ArrayList tmp = new ArrayList<>(); 
                                            tmp.add(a);
                                            RESULT = new Nodo("instruccion", tmp ,aright,aleft); 
                                           :}
                        |  funcion_do_while:a
                                            {: 
                                            ArrayList tmp = new ArrayList<>(); 
                                            tmp.add(a);
                                            RESULT = new Nodo("instruccion", tmp ,aright,aleft); 
                                           :}
                        |  funcion_printAst:a
                                            {: 
                                            ArrayList tmp = new ArrayList<>(); 
                                            tmp.add(a);
                                            RESULT = new Nodo("instruccion", tmp ,aright,aleft); 
                                           :}
                        |  funcion_getSymbolTable:a
                                            {: 
                                            ArrayList tmp = new ArrayList<>(); 
                                            tmp.add(a);
                                            RESULT = new Nodo("instruccion", tmp ,aright,aleft); 
                                           :}
                        ;

asignacion ::= ID:id ASIGNACION:igual variable_valor:value PUNTO_COMA:puntoComa {: 
                                                                                    

                                  ArrayList tmp2 = new ArrayList<>();   
                                  tmp2.add(id);
                                  Nodo nt = new Nodo("Id",tmp2,idright,idleft);

                                  ArrayList tmp3 = new ArrayList<>();
                                  tmp3.add(igual);
                                  Nodo equals = new Nodo("igual",tmp3,idright,idleft);

                                  ArrayList puntoC = new ArrayList<>(); 
                                  puntoC.add(puntoComa);
                                  Nodo punto_coma = new Nodo("punto_coma", puntoC ,idright,idleft);

                                  ArrayList tmp = new ArrayList<>(); 
                                  tmp.add(nt);
                                  tmp.add(equals);
                                  tmp.add(value);
                                  tmp.add(punto_coma);

                                  RESULT = new Nodo("asignacion", tmp ,idright,idleft); 
                                                                                :}
            ;

declaracion_variable ::= tipo_acceso_variable:a id_valor_variable_lista:b PUNTO_COMA:c
        {: 

            ArrayList puntoC = new ArrayList<>(); 
            puntoC.add(c);
            Nodo punto_coma = new Nodo("punto_coma", puntoC ,aright,aleft);

            ArrayList tmp = new ArrayList<>(); 
            tmp.add(a);
            tmp.add(b);
            tmp.add(punto_coma);

            RESULT = new Nodo("declaracion_variable", tmp ,aright,aleft); 
        :}

                      ;

id_valor_variable_lista ::=  id_valor_variable_lista:a COMA:b id_valor_variable:c
                            {:

                                ArrayList tmp5 = new ArrayList<>();
                                tmp5.add(b);
                                Nodo coma = new Nodo("coma",tmp5,aright,aleft);

                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(coma);
                                tmp.add(c);
                                RESULT = new Nodo("id_valor_variable_lista", tmp ,aright,aleft);                   
                            :}
                         |   id_valor_variable:a
                            {:
                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                RESULT = new Nodo("id_valor_variable_lista", tmp ,aright,aleft);                   
                            :}
                         ;

id_valor_variable ::= ID:id DOS_PUNTOS:b tipo_dato_variable:tipoDato ASIGNACION:c variable_valor:valor 
                    {:
                                  ArrayList tmp = new ArrayList<>();   
                                  tmp.add(id);
                                  Nodo nid = new Nodo("Id",tmp,idright,idleft);

                                  ArrayList tmp3 = new ArrayList<>();
                                  tmp3.add(c);
                                  Nodo equals = new Nodo("igual",tmp3,idright,idleft);

                                  ArrayList dosP = new ArrayList<>();
                                  dosP.add(b);
                                  Nodo dos_puntos = new Nodo("dos_puntos",dosP,idright,idleft);

                                  ArrayList tmp2 = new ArrayList<>(); 
                                  tmp2.add(nid);
                                  tmp2.add(dos_puntos);
                                  tmp2.add(tipoDato);
                                  tmp2.add(equals);
                                  tmp2.add(valor);

                                  RESULT = new Nodo("declaracion_variable_con_tipo_con_valor", tmp2 ,idright,idleft); 
                    :}

                    | ID:id ASIGNACION:b variable_valor:valor 
                    {:
                                  ArrayList tmp = new ArrayList<>();   
                                  tmp.add(id);
                                  Nodo nid = new Nodo("Id",tmp,idright,idleft);

                                  ArrayList tmp3 = new ArrayList<>();
                                  tmp3.add(b);
                                  Nodo equals = new Nodo("igual",tmp3,idright,idleft);

                                  ArrayList tmp2 = new ArrayList<>(); 
                                  tmp2.add(nid);
                                  tmp2.add(equals);
                                  tmp2.add(valor);
                                  RESULT = new Nodo("declaracion_variable_sin_tipo_con_valor", tmp2 ,idright,idleft); 
                    :}
                    | ID:id DOS_PUNTOS:b tipo_dato_variable:tipoDato 
                    {:
                                  ArrayList tmp = new ArrayList<>();   
                                  tmp.add(id);
                                  Nodo nid = new Nodo("Id",tmp,idright,idleft);

                                  ArrayList dosP = new ArrayList<>();
                                  dosP.add(b);
                                  Nodo dos_puntos = new Nodo("dos_puntos",dosP,idright,idleft);

                                  ArrayList tmp2 = new ArrayList<>(); 
                                  tmp2.add(nid);
                                  tmp2.add(dos_puntos);
                                  tmp2.add(tipoDato);
                                  RESULT = new Nodo("declaracion_variable_con_tipo_sin_valor", tmp2 ,idright,idleft); 
                    :}
                    | ID:id
                    {:
                                ArrayList tmp = new ArrayList<>();   
                                tmp.add(id);
                                Nodo nid = new Nodo("Id",tmp,idright,idleft);

                                ArrayList tmp2 = new ArrayList<>(); 
                                tmp2.add(nid);
                                
                                RESULT = new Nodo("declaracion_variable_sin_tipo_sin_valor", tmp2 ,idright,idleft); 

                    :}
                   ;



tipo_acceso_variable ::= RCONST:rconst {:
                                     ArrayList tmp = new ArrayList<>(); 
                                     tmp.add(rconst);
                                     RESULT = new Nodo("Tipo_Acceso",tmp,rconstright,rconstleft);
                                  :}

                       | RLET:rlet   {: 
                                     ArrayList tmp = new ArrayList<>(); 
                                     tmp.add(rlet);
                                     RESULT = new Nodo("Tipo_Acceso",tmp,rletright,rletleft);
                                  :} 
                      ;

tipo_dato_variable ::= RNUMBER:rnumber  {: 
                                            ArrayList tmp = new ArrayList<>(); 
                                            tmp.add(rnumber);
                                            RESULT = new Nodo("Tipo_Variable",tmp,rnumberright,rnumberleft);
                                  :} 

                    |  RBIGINT:rbigint  {: 
                                            ArrayList tmp = new ArrayList<>(); 
                                            tmp.add(rbigint);
                                            RESULT = new Nodo("Tipo_Variable",tmp,rbigintright,rbigintleft);
                                 :}  
                    |  RSTRING:rstring  {: 
                                            ArrayList tmp = new ArrayList<>(); 
                                            tmp.add(rstring);
                                            RESULT = new Nodo("Tipo_Variable",tmp,rstringright,rstringleft);
                                  :} 

                    |  RBOOLEAN:rboolean {: 
                                            ArrayList tmp = new ArrayList<>(); 
                                            tmp.add(rboolean);
                                            RESULT = new Nodo("Tipo_Variable",tmp,rbooleanright,rbooleanleft);
                                        :}
                    ;

variable_valor ::= instruccion:a {: 
                                    ArrayList tmp = new ArrayList<>(); 
                                    tmp.add(a);
                                    RESULT = new Nodo("valor_de_la_variable",tmp,aright,aleft);
                                 :}
                ;

instruccion ::=  operaciones_matematicas:a {:
                                                
                                                RESULT = a;

                                           :}
                | operaciones_logicas:a {:
                                                RESULT = a;
                                        :}

                | funcion_boolean:a {:
                                                RESULT = a;
                                 :}
                | funcion_string:a  {:

                                                RESULT = a;
                                  :}
                | funcion_char_at:a {: 
                                                RESULT = a;

                                  :}
                | funcion_to_lower_case:a {:
                                                RESULT = a;
                                        :}
                | funcion_to_upper_case:a {:
                                                RESULT = a;
                                        :}
                | funcion_concat:a {:
                                                RESULT = a;
                                 :}
                | llamada_funcion_asignacion:a {:
                                                RESULT = a;
                                              :}
                | incremento:a {:
                                                RESULT = a;
                             :}
                | decremento:a {:
                                                RESULT = a;
                             :}
                ;


operaciones_matematicas ::= 
                          MENOS:a operaciones_matematicas:b       
                                        {:
                                             
                                            ArrayList simbolMenos = new ArrayList<>();   
                                            simbolMenos.add(a);
                                            Nodo menos = new Nodo("menos",simbolMenos,aright,aleft);

                                            ArrayList tmp = new ArrayList<>(); 
                                            tmp.add(menos);
                                            tmp.add(b);
                                            RESULT = new Nodo("menos_operacion_matematica", tmp ,aright,aleft);                                               

                                        :}%prec UMENOS 
                        | MAS:a operaciones_matematicas:b 
                                        {:
                                             
                                            ArrayList simbolMas = new ArrayList<>();   
                                            simbolMas.add(a);
                                            Nodo mas = new Nodo("mas",simbolMas,aright,aleft);

                                            ArrayList tmp = new ArrayList<>(); 
                                            tmp.add(mas);
                                            tmp.add(b);
                                            RESULT = new Nodo("mas_operacion_matematica", tmp ,aright,aleft);                                               
                                        :}%prec UMENOS 
                        | operaciones_matematicas:a MAS:b operaciones_matematicas:c
                                        {:
                                             
                                            ArrayList simbolMas = new ArrayList<>();   
                                            simbolMas.add(b);
                                            Nodo mas = new Nodo("mas",simbolMas,aright,aleft);

                                            ArrayList tmp = new ArrayList<>(); 
                                            tmp.add(a);
                                            tmp.add(mas);
                                            tmp.add(c);
                                            RESULT = new Nodo("suma", tmp ,aright,aleft);                                               
                                        :}
                        | operaciones_matematicas:a MENOS:b operaciones_matematicas:c
                                        {:
                                             
                                            ArrayList simbolMenos = new ArrayList<>();   
                                            simbolMenos.add(b);
                                            Nodo menos = new Nodo("menos",simbolMenos,aright,aleft);

                                            ArrayList tmp = new ArrayList<>(); 
                                            tmp.add(a);
                                            tmp.add(menos);
                                            tmp.add(c);
                                            RESULT = new Nodo("resta", tmp ,aright,aleft);
                                        :}
                        | operaciones_matematicas:a MULTIPLICACION:b operaciones_matematicas:c
                                        {:
                                             
                                            ArrayList simbolPor = new ArrayList<>();   
                                            simbolPor.add(b);
                                            Nodo por = new Nodo("por",simbolPor,aright,aleft);

                                            ArrayList tmp = new ArrayList<>(); 
                                            tmp.add(a);
                                            tmp.add(por);
                                            tmp.add(c);
                                            RESULT = new Nodo("multiplicacion", tmp ,aright,aleft);                                               
                                        :}                        
                        | operaciones_matematicas:a DIVISION:b operaciones_matematicas:c
                                        {:
                                             
                                            ArrayList simbolDiv = new ArrayList<>();   
                                            simbolDiv.add(b);
                                            Nodo simbolo_division = new Nodo("simbolo_division",simbolDiv,aright,aleft);

                                            ArrayList tmp = new ArrayList<>(); 
                                            tmp.add(a);
                                            tmp.add(simbolo_division);
                                            tmp.add(c);
                                            RESULT = new Nodo("division", tmp ,aright,aleft);                                               
                                        :}
                        | operaciones_matematicas:a MOD:b operaciones_matematicas:c
                                        {:
                                             
                                            ArrayList simboloMod = new ArrayList<>();   
                                            simboloMod.add(b);
                                            Nodo simbolo_mod = new Nodo("simbolo_mod",simboloMod,aright,aleft);

                                            ArrayList tmp = new ArrayList<>(); 
                                            tmp.add(a);
                                            tmp.add(simbolo_mod);
                                            tmp.add(c);
                                            RESULT = new Nodo("mod", tmp ,aright,aleft);                                               
                                        :}
                        | PARENTESIS_ABIERTO:a operaciones_matematicas:b PARENTESIS_CERRADO:c 
                                            {:
                                             

                                            ArrayList parentesisA = new ArrayList<>();
                                            parentesisA.add(a);
                                            Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

                                            ArrayList parentesisC = new ArrayList<>();
                                            parentesisC.add(c);
                                            Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);

                                             ArrayList tmp = new ArrayList<>(); 
                                             tmp.add(parentesis_abierto);
                                             tmp.add(b);
                                             tmp.add(parentesis_cerrado);
                                             RESULT = new Nodo("operaciones_matematicas_parentesis", tmp ,aright,aleft);                                               
                                            :}
                        | funcion_number:a {:
                                             RESULT = a;
                                           :}
                        | funcion_bigint:a {:
                                             RESULT = a;
                                           :}
                        | funcion_length:a {:
                                             RESULT = a;
                                           :}
                        | funciones_numericas_estaticas:a {:
                                     ArrayList tmp = new ArrayList<>(); 
                                     tmp.add(a);
                                     RESULT = new Nodo("funciones_numericas_estaticas", tmp ,aright,aleft);                       
                                                          :}
                        | NUMBER:a {:
                                        ArrayList tmp = new ArrayList<>(); 
                                        tmp.add(a);
                                        RESULT = new Nodo("Number", tmp ,aright,aleft);
                                   :}
                        | BIGINT:a {:
                                        ArrayList tmp = new ArrayList<>(); 
                                        tmp.add(a);
                                        RESULT = new Nodo("BigInt", tmp ,aright,aleft);
                                   :}
                        | ID:a    {: 
                                        ArrayList tmp = new ArrayList<>(); 
                                        tmp.add(a);
                                        RESULT = new Nodo("Id",tmp,aright,aleft);
                                  :}
                        | TEXTO:a {: 
                                        
                                        ArrayList tmp = new ArrayList<>(); 
                                        tmp.add(a);
                                        RESULT = new Nodo("String", tmp ,aright,aleft);
                                  :}
                        ;

funciones_numericas_estaticas ::= MATH:a PUNTO:b ABS:c PARENTESIS_ABIERTO:d operaciones_matematicas:e PARENTESIS_CERRADO:f
                                {:

                                        ArrayList math_ = new ArrayList<>();
                                        math_.add(a);
                                        Nodo math = new Nodo("math",math_,aright,aleft);

                                        ArrayList parentesisA = new ArrayList<>();
                                        parentesisA.add(d);
                                        Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

                                        ArrayList parentesisC = new ArrayList<>();
                                        parentesisC.add(f);
                                        Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);


                                        ArrayList tmp4 = new ArrayList<>();                                         
                                        tmp4.add(b);
                                        Nodo punto = new Nodo("punto",tmp4,aright,aleft);

                                        ArrayList tmp = new ArrayList<>(); 
                                        tmp.add(math);
                                        tmp.add(punto);
                                        tmp.add(c);
                                        tmp.add(parentesis_abierto);
                                        tmp.add(e);
                                        tmp.add(parentesis_cerrado);
                                        RESULT = new Nodo("ABS", tmp ,aright,aleft);
                                :}
                               |  MATH:a PUNTO:b CEIL:c   PARENTESIS_ABIERTO:d operaciones_matematicas:e PARENTESIS_CERRADO:f
                                {:
                                        
                                        ArrayList math_ = new ArrayList<>();
                                        math_.add(a);
                                        Nodo math = new Nodo("math",math_,aright,aleft);

                                        ArrayList tmp4 = new ArrayList<>();                                         
                                        tmp4.add(b);
                                        Nodo punto = new Nodo("punto",tmp4,aright,aleft);

                                        ArrayList parentesisA = new ArrayList<>();
                                        parentesisA.add(d);
                                        Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

                                        ArrayList parentesisC = new ArrayList<>();
                                        parentesisC.add(f);
                                        Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);

                                        ArrayList tmp = new ArrayList<>(); 
                                        tmp.add(math);
                                        tmp.add(punto);
                                        tmp.add(c);
                                        tmp.add(parentesis_abierto);
                                        tmp.add(e);
                                        tmp.add(parentesis_cerrado);
                                        RESULT = new Nodo("CEIL", tmp ,aright,aleft);
                                :}
                               |  MATH:a PUNTO:b COS:c    PARENTESIS_ABIERTO:d operaciones_matematicas:e PARENTESIS_CERRADO:f
                               {:
                                        
                                        ArrayList math_ = new ArrayList<>();
                                        math_.add(a);
                                        Nodo math = new Nodo("math",math_,aright,aleft);

                                        ArrayList tmp4 = new ArrayList<>();                                         
                                        tmp4.add(b);
                                        Nodo punto = new Nodo("punto",tmp4,aright,aleft);

                                        ArrayList parentesisA = new ArrayList<>();
                                        parentesisA.add(d);
                                        Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

                                        ArrayList parentesisC = new ArrayList<>();
                                        parentesisC.add(f);
                                        Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);

                                        ArrayList tmp = new ArrayList<>(); 
                                        tmp.add(math);
                                        tmp.add(punto);
                                        tmp.add(c);
                                        tmp.add(parentesis_abierto);
                                        tmp.add(e);
                                        tmp.add(parentesis_cerrado);
                                        RESULT = new Nodo("COS", tmp ,aright,aleft);
                               :}
                               |  MATH:a PUNTO:b SIN:c    PARENTESIS_ABIERTO:d operaciones_matematicas:e PARENTESIS_CERRADO:f
                               {:
                                        
                                        ArrayList math_ = new ArrayList<>();
                                        math_.add(a);
                                        Nodo math = new Nodo("math",math_,aright,aleft);

                                        ArrayList tmp4 = new ArrayList<>();                                         
                                        tmp4.add(b);
                                        Nodo punto = new Nodo("punto",tmp4,aright,aleft);

                                        ArrayList parentesisA = new ArrayList<>();
                                        parentesisA.add(d);
                                        Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

                                        ArrayList parentesisC = new ArrayList<>();
                                        parentesisC.add(f);
                                        Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);

                                        ArrayList tmp = new ArrayList<>(); 
                                        tmp.add(math);
                                        tmp.add(punto);
                                        tmp.add(c);
                                        tmp.add(parentesis_abierto);
                                        tmp.add(e);
                                        tmp.add(parentesis_cerrado);
                                        RESULT = new Nodo("SIN", tmp ,aright,aleft);
                               :}
                               |  MATH:a PUNTO:b TAN:c    PARENTESIS_ABIERTO:d operaciones_matematicas:e PARENTESIS_CERRADO:f
                               {:

                                        ArrayList math_ = new ArrayList<>();
                                        math_.add(a);
                                        Nodo math = new Nodo("math",math_,aright,aleft);
                               
                                        ArrayList tmp4 = new ArrayList<>();                                         
                                        tmp4.add(b);
                                        Nodo punto = new Nodo("punto",tmp4,aright,aleft);                               

                                        ArrayList parentesisA = new ArrayList<>();
                                        parentesisA.add(d);
                                        Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

                                        ArrayList parentesisC = new ArrayList<>();
                                        parentesisC.add(f);
                                        Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);

                                        ArrayList tmp = new ArrayList<>(); 
                                        tmp.add(math);
                                        tmp.add(punto);
                                        tmp.add(c);
                                        tmp.add(parentesis_abierto);
                                        tmp.add(e);
                                        tmp.add(parentesis_cerrado);
                                        RESULT = new Nodo("TAN", tmp ,aright,aleft);

                               :}
                               |  MATH:a PUNTO:b EXP:c    PARENTESIS_ABIERTO:d operaciones_matematicas:e PARENTESIS_CERRADO:f
                                {:

                                        ArrayList math_ = new ArrayList<>();
                                        math_.add(a);
                                        Nodo math = new Nodo("math",math_,aright,aleft);

                                        ArrayList tmp4 = new ArrayList<>();                                         
                                        tmp4.add(b);
                                        Nodo punto = new Nodo("punto",tmp4,aright,aleft);                               

                                        ArrayList parentesisA = new ArrayList<>();
                                        parentesisA.add(d);
                                        Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

                                        ArrayList parentesisC = new ArrayList<>();
                                        parentesisC.add(f);
                                        Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);


                                        ArrayList tmp = new ArrayList<>(); 
                                        tmp.add(math);
                                        tmp.add(punto);
                                        tmp.add(c);
                                        tmp.add(parentesis_abierto);
                                        tmp.add(e);
                                        tmp.add(parentesis_cerrado);
                                        RESULT = new Nodo("EXP", tmp ,aright,aleft);

                                :}
                               |  MATH:a PUNTO:b FLOOR:c  PARENTESIS_ABIERTO:d operaciones_matematicas:e PARENTESIS_CERRADO:f
                                {:

                                        ArrayList math_ = new ArrayList<>();
                                        math_.add(a);
                                        Nodo math = new Nodo("math",math_,aright,aleft);

                                        ArrayList tmp4 = new ArrayList<>();                                         
                                        tmp4.add(b);
                                        Nodo punto = new Nodo("punto",tmp4,aright,aleft);       

                                        ArrayList parentesisA = new ArrayList<>();
                                        parentesisA.add(d);
                                        Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

                                        ArrayList parentesisC = new ArrayList<>();
                                        parentesisC.add(f);
                                        Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);


                                        ArrayList tmp = new ArrayList<>(); 
                                        tmp.add(math);
                                        tmp.add(punto);
                                        tmp.add(c);
                                        tmp.add(parentesis_abierto);
                                        tmp.add(e);
                                        tmp.add(parentesis_cerrado);
                                        RESULT = new Nodo("FLOOR", tmp ,aright,aleft);

                                :}
                               |  MATH:a PUNTO:b POW:c    PARENTESIS_ABIERTO:d operaciones_matematicas:e COMA:f operaciones_matematicas:g PARENTESIS_CERRADO:h
                                {:

                                        ArrayList math_ = new ArrayList<>();
                                        math_.add(a);
                                        Nodo math = new Nodo("math",math_,aright,aleft);

                                        ArrayList tmp4 = new ArrayList<>();                                         
                                        tmp4.add(b);
                                        Nodo punto = new Nodo("punto",tmp4,aright,aleft);                               

                                        ArrayList parentesisA = new ArrayList<>();
                                        parentesisA.add(d);
                                        Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

                                        ArrayList parentesisC = new ArrayList<>();
                                        parentesisC.add(h);
                                        Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);

                                        ArrayList tmp5 = new ArrayList<>();
                                        tmp5.add(f);
                                        Nodo coma = new Nodo("coma",tmp5,aright,aleft);


                                        ArrayList tmp = new ArrayList<>(); 
                                        tmp.add(math);
                                        tmp.add(punto);
                                        tmp.add(c);
                                        tmp.add(parentesis_abierto);
                                        tmp.add(e);
                                        tmp.add(coma);
                                        tmp.add(g);
                                        tmp.add(parentesis_cerrado);
                                        RESULT = new Nodo("POW", tmp ,aright,aleft);

                                :}
                               |  MATH:a PUNTO:b SQRT:c   PARENTESIS_ABIERTO:d operaciones_matematicas:e PARENTESIS_CERRADO:f
                                {:

                                        ArrayList math_ = new ArrayList<>();
                                        math_.add(a);
                                        Nodo math = new Nodo("math",math_,aright,aleft);

                                        ArrayList tmp4 = new ArrayList<>();                                         
                                        tmp4.add(b);
                                        Nodo punto = new Nodo("punto",tmp4,aright,aleft);  

                                        ArrayList parentesisA = new ArrayList<>();
                                        parentesisA.add(d);
                                        Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

                                        ArrayList parentesisC = new ArrayList<>();
                                        parentesisC.add(f);
                                        Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);


                                        ArrayList tmp = new ArrayList<>(); 
                                        tmp.add(math);
                                        tmp.add(punto);
                                        tmp.add(c);
                                        tmp.add(parentesis_abierto);
                                        tmp.add(e);
                                        tmp.add(parentesis_cerrado);
                                        RESULT = new Nodo("SQRT", tmp ,aright,aleft);

                                :}
                               |  MATH:a PUNTO:b RANDOM:c PARENTESIS_ABIERTO:d operaciones_matematicas:e PARENTESIS_CERRADO:f
                                {:

                                        ArrayList math_ = new ArrayList<>();
                                        math_.add(a);
                                        Nodo math = new Nodo("math",math_,aright,aleft);

                                        ArrayList tmp4 = new ArrayList<>();                                         
                                        tmp4.add(b);
                                        Nodo punto = new Nodo("punto",tmp4,aright,aleft);                               

                                        ArrayList parentesisA = new ArrayList<>();
                                        parentesisA.add(d);
                                        Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

                                        ArrayList parentesisC = new ArrayList<>();
                                        parentesisC.add(f);
                                        Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);

                                        ArrayList tmp = new ArrayList<>(); 
                                        tmp.add(math);
                                        tmp.add(punto);
                                        tmp.add(c);
                                        tmp.add(parentesis_abierto);
                                        tmp.add(e);
                                        tmp.add(parentesis_cerrado);
                                        RESULT = new Nodo("RANDOM", tmp ,aright,aleft);

                                :}
                               |  MATH:a PUNTO:b E:c
                                {:
                                        ArrayList math_ = new ArrayList<>();
                                        math_.add(a);
                                        Nodo math = new Nodo("math",math_,aright,aleft);

                                        ArrayList symbol_e = new ArrayList<>();
                                        symbol_e.add(c);
                                        Nodo simbolo_e = new Nodo("simbolo_e",symbol_e,aright,aleft);

                                        ArrayList tmp4 = new ArrayList<>();                                         
                                        tmp4.add(b);
                                        Nodo punto = new Nodo("punto",tmp4,aright,aleft);                               

                                        ArrayList tmp = new ArrayList<>(); 
                                        tmp.add(math);
                                        tmp.add(punto);
                                        tmp.add(simbolo_e);
                                        RESULT = new Nodo("E", tmp ,aright,aleft);

                                :}
                               |  MATH:a PUNTO:b PI:c
                                {:

                                        ArrayList math_ = new ArrayList<>();
                                        math_.add(a);
                                        Nodo math = new Nodo("math",math_,aright,aleft);

                                        ArrayList symbol_pi = new ArrayList<>();
                                        symbol_pi.add(c);
                                        Nodo simbolo_pi = new Nodo("simbolo_pi",symbol_pi,aright,aleft);

                                        ArrayList tmp4 = new ArrayList<>();                                         
                                        tmp4.add(b);
                                        Nodo punto = new Nodo("punto",tmp4,aright,aleft);                               

                                        ArrayList tmp = new ArrayList<>(); 
                                        tmp.add(math);
                                        tmp.add(punto);
                                        tmp.add(simbolo_pi);
                                        RESULT = new Nodo("PI", tmp ,aright,aleft);

                                :}
                               |  MATH:a PUNTO:b SQRT2:c
                                {:

                                        ArrayList math_ = new ArrayList<>();
                                        math_.add(a);
                                        Nodo math = new Nodo("math",math_,aright,aleft);

                                        ArrayList tmp4 = new ArrayList<>();                                         
                                        tmp4.add(b);
                                        Nodo punto = new Nodo("punto",tmp4,aright,aleft);                               

                                        ArrayList symbol_sqrt2 = new ArrayList<>();
                                        symbol_sqrt2.add(c);
                                        Nodo simbolo_sqrt2 = new Nodo("simbolo_sqrt2",symbol_sqrt2,aright,aleft);

                                        ArrayList tmp = new ArrayList<>(); 
                                        tmp.add(math);
                                        tmp.add(punto);
                                        tmp.add(simbolo_sqrt2);
                                        RESULT = new Nodo("SQRT2", tmp ,aright,aleft);

                                :}
                              ;

incremento ::= ID:id INCREMENTO:incremento
                {:
                    ArrayList tmp2 = new ArrayList<>();   
                    tmp2.add(id);
                    Nodo nt = new Nodo("Id",tmp2,idright,idleft);

                    ArrayList symbol_incremento = new ArrayList<>();   
                    symbol_incremento.add(incremento);
                    Nodo simbolo_incremento = new Nodo("simbolo_incremento",symbol_incremento,idright,idleft);                    

                    ArrayList tmp = new ArrayList<>(); 
                    tmp.add(nt);
                    tmp.add(simbolo_incremento);
                    RESULT = new Nodo("incremento", tmp ,incrementoright,incrementoleft); 
                :}

           ;

decremento ::= ID:id DECREMENTO:decremento
                {:
                    ArrayList tmp2 = new ArrayList<>();   
                    tmp2.add(id);
                    Nodo nt = new Nodo("Id",tmp2,idright,idleft);

                    ArrayList symbol_decremento = new ArrayList<>();   
                    symbol_decremento.add(decremento);
                    Nodo simbolo_decremento = new Nodo("simbolo_decremento",symbol_decremento,idright,idleft);                    

                    ArrayList tmp = new ArrayList<>(); 
                    tmp.add(nt);
                    tmp.add(simbolo_decremento);
                    RESULT = new Nodo("decremento", tmp ,decrementoright,decrementoleft); 
                :}
            ;

funcion_incremento_decremento ::= ID:a INCREMENTO:b PUNTO_COMA:c
                {:
                    ArrayList tmp2 = new ArrayList<>();   
                    tmp2.add(a);
                    Nodo nt = new Nodo("Id",tmp2,aright,aleft);

                    ArrayList symbol_incremento = new ArrayList<>();   
                    symbol_incremento.add(b);
                    Nodo simbolo_incremento = new Nodo("simbolo_incremento",symbol_incremento,aright,aleft);                    

                    ArrayList puntoC = new ArrayList<>(); 
                    puntoC.add(c);
                    Nodo punto_coma = new Nodo("punto_coma", puntoC ,aright,aleft);

                    ArrayList tmp = new ArrayList<>(); 
                    tmp.add(nt);
                    tmp.add(simbolo_incremento);
                    tmp.add(punto_coma);
                    RESULT = new Nodo("funcion_incremento", tmp ,bright,bleft); 
                :}

               |  ID:a DECREMENTO:b PUNTO_COMA:c
               {:
                    ArrayList tmp2 = new ArrayList<>();   
                    tmp2.add(a);
                    Nodo nt = new Nodo("Id",tmp2,aright,aleft);

                    ArrayList symbol_decremento = new ArrayList<>();   
                    symbol_decremento.add(b);
                    Nodo simbolo_decremento = new Nodo("simbolo_decremento",symbol_decremento,aright,aleft);                    

                    ArrayList puntoC = new ArrayList<>(); 
                    puntoC.add(c);
                    Nodo punto_coma = new Nodo("punto_coma", puntoC ,aright,aleft);

                    ArrayList tmp = new ArrayList<>(); 
                    tmp.add(nt);
                    tmp.add(simbolo_decremento);
                    tmp.add(punto_coma);
                    RESULT = new Nodo("funcion_decremento", tmp ,bright,bleft); 
                :}
                       ;

operaciones_relacionales ::= operaciones_matematicas:a MAYOR_QUE:b operaciones_matematicas:c
                            {:
                                
                                ArrayList symbol_mayor = new ArrayList<>(); 
                                symbol_mayor.add(b);
                                Nodo simbolo_mayor_que = new Nodo("simbolo_mayor_que", symbol_mayor ,aright,aleft);

                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(simbolo_mayor_que);
                                tmp.add(c);
                                RESULT = new Nodo("mayor_que", tmp ,aright,aleft); 
                            :}
                           | operaciones_matematicas:a MAYOR_IGUAL:b operaciones_matematicas:c
                            {:
                                ArrayList symbol_mayor_igual = new ArrayList<>(); 
                                symbol_mayor_igual.add(b);
                                Nodo simbolo_mayor_igual = new Nodo("simbolo_mayor_igual", symbol_mayor_igual ,aright,aleft);

                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(simbolo_mayor_igual);
                                tmp.add(c);
                                RESULT = new Nodo("mayor_igual", tmp ,aright,aleft); 
                            :}
                           | operaciones_matematicas:a MENOR_QUE:b operaciones_matematicas:c
                            {:
                                                
                                ArrayList symbol_menor = new ArrayList<>(); 
                                symbol_menor.add(b);
                                Nodo simbolo_menor_que = new Nodo("simbolo_menor_que", symbol_menor ,aright,aleft);

                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(simbolo_menor_que);
                                tmp.add(c);
                                RESULT = new Nodo("menor_que", tmp ,aright,aleft); 
                            :}
                           | operaciones_matematicas:a MENOR_IGUAL:b operaciones_matematicas:c
                            {:

                                ArrayList symbol_menor_igual = new ArrayList<>(); 
                                symbol_menor_igual.add(b);
                                Nodo simbolo_menor_igual = new Nodo("simbolo_menor_igual", symbol_menor_igual ,aright,aleft);

                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(simbolo_menor_igual);
                                tmp.add(c);
                                RESULT = new Nodo("menor_igual", tmp ,aright,aleft); 
                            :}
                           | operaciones_matematicas:a COMPARACION:b operaciones_matematicas:c
                            {:

                                ArrayList symbol_comparacion = new ArrayList<>(); 
                                symbol_comparacion.add(b);
                                Nodo simbolo_comparacion = new Nodo("simbolo_comparacion", symbol_comparacion ,aright,aleft);
                                
                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(simbolo_comparacion);
                                tmp.add(c);
                                RESULT = new Nodo("comparacion", tmp ,aright,aleft); 
                            :}
                           | operaciones_matematicas:a DISTINTO:b operaciones_matematicas:c
                            {:
                                
                                ArrayList symbol_distinto = new ArrayList<>(); 
                                symbol_distinto.add(b);
                                Nodo distinto = new Nodo("distinto", symbol_distinto ,aright,aleft);

                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(distinto);
                                tmp.add(c);
                                RESULT = new Nodo("distinto", tmp ,aright,aleft); 
                            :}

                           | TRUE:a COMPARACION:b TRUE:c
                            {:

                                ArrayList symbol_comparacion = new ArrayList<>(); 
                                symbol_comparacion.add(b);
                                Nodo simbolo_comparacion = new Nodo("simbolo_comparacion", symbol_comparacion ,aright,aleft);

                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(simbolo_comparacion);
                                tmp.add(c);
                                RESULT = new Nodo("comparacion", tmp ,aright,aleft); 
                            :}
                           | TRUE:a COMPARACION:b FALSE:c
                            {:

                                ArrayList symbol_comparacion = new ArrayList<>(); 
                                symbol_comparacion.add(b);
                                Nodo simbolo_comparacion = new Nodo("simbolo_comparacion", symbol_comparacion ,aright,aleft);

                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(simbolo_comparacion);
                                tmp.add(c);
                                RESULT = new Nodo("comparacion", tmp ,aright,aleft); 
                            :}
                           | FALSE:a COMPARACION:b TRUE:c
                            {:
                                
                                ArrayList symbol_comparacion = new ArrayList<>(); 
                                symbol_comparacion.add(b);
                                Nodo simbolo_comparacion = new Nodo("simbolo_comparacion", symbol_comparacion ,aright,aleft);

                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(simbolo_comparacion);
                                tmp.add(c);
                                RESULT = new Nodo("comparacion", tmp ,aright,aleft); 
                            :}
                           | FALSE:a COMPARACION:b FALSE:c
                            {:
                                ArrayList symbol_comparacion = new ArrayList<>(); 
                                symbol_comparacion.add(b);
                                Nodo simbolo_comparacion = new Nodo("simbolo_comparacion", symbol_comparacion ,aright,aleft);

                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(simbolo_comparacion);
                                tmp.add(c);
                                RESULT = new Nodo("comparacion", tmp ,aright,aleft); 
                            :}
                           | operaciones_matematicas:a COMPARACION:b TRUE:c
                            {:
                                
                                ArrayList symbol_comparacion = new ArrayList<>(); 
                                symbol_comparacion.add(b);
                                Nodo simbolo_comparacion = new Nodo("simbolo_comparacion", symbol_comparacion ,aright,aleft);

                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(simbolo_comparacion);
                                tmp.add(c);
                                RESULT = new Nodo("comparacion", tmp ,aright,aleft); 
                            :}
                           | TRUE:a COMPARACION:b operaciones_matematicas:c
                            {:

                                ArrayList symbol_comparacion = new ArrayList<>(); 
                                symbol_comparacion.add(b);
                                Nodo simbolo_comparacion = new Nodo("simbolo_comparacion", symbol_comparacion ,aright,aleft);

                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(simbolo_comparacion);
                                tmp.add(c);
                                RESULT = new Nodo("comparacion", tmp ,aright,aleft); 
                            :}
                           | operaciones_matematicas:a COMPARACION:b FALSE:c
                            {:

                                ArrayList symbol_comparacion = new ArrayList<>(); 
                                symbol_comparacion.add(b);
                                Nodo simbolo_comparacion = new Nodo("simbolo_comparacion", symbol_comparacion ,aright,aleft);

                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(simbolo_comparacion);
                                tmp.add(c);
                                RESULT = new Nodo("comparacion", tmp ,aright,aleft); 
                            :}
                           | FALSE:a COMPARACION:b operaciones_matematicas:c
                            {:

                                ArrayList symbol_comparacion = new ArrayList<>(); 
                                symbol_comparacion.add(b);
                                Nodo simbolo_comparacion = new Nodo("simbolo_comparacion", symbol_comparacion ,aright,aleft);

                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(simbolo_comparacion);
                                tmp.add(c);
                                RESULT = new Nodo("comparacion", tmp ,aright,aleft); 
                            :}

                           | TRUE:a DISTINTO:b TRUE:c
                            {:
                                
                                ArrayList symbol_distinto = new ArrayList<>(); 
                                symbol_distinto.add(b);
                                Nodo simbolo_distinto = new Nodo("simbolo_distinto", symbol_distinto ,aright,aleft);

                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(simbolo_distinto);
                                tmp.add(c);
                                RESULT = new Nodo("distinto", tmp ,aright,aleft); 
                            :}
                           | TRUE:a DISTINTO:b FALSE:c
                            {:
                                
                                ArrayList symbol_distinto = new ArrayList<>(); 
                                symbol_distinto.add(b);
                                Nodo simbolo_distinto = new Nodo("simbolo_distinto", symbol_distinto ,aright,aleft);

                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(simbolo_distinto);
                                tmp.add(c);
                                RESULT = new Nodo("distinto", tmp ,aright,aleft); 
                            :}
                           | FALSE:a DISTINTO:b TRUE:c
                            {:
                                
                                ArrayList symbol_distinto = new ArrayList<>(); 
                                symbol_distinto.add(b);
                                Nodo simbolo_distinto = new Nodo("simbolo_distinto", symbol_distinto ,aright,aleft);

                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(simbolo_distinto);
                                tmp.add(c);
                                RESULT = new Nodo("distinto", tmp ,aright,aleft); 
                            :}
                           | FALSE:a DISTINTO:b FALSE:c
                            {:
                                
                                ArrayList symbol_distinto = new ArrayList<>(); 
                                symbol_distinto.add(b);
                                Nodo simbolo_distinto = new Nodo("simbolo_distinto", symbol_distinto ,aright,aleft);

                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(simbolo_distinto);
                                tmp.add(c);
                                RESULT = new Nodo("distinto", tmp ,aright,aleft); 
                            :}
                           | operaciones_matematicas:a DISTINTO:b TRUE:c
                            {:
                                
                                ArrayList symbol_distinto = new ArrayList<>(); 
                                symbol_distinto.add(b);
                                Nodo simbolo_distinto = new Nodo("simbolo_distinto", symbol_distinto ,aright,aleft);

                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(b);
                                tmp.add(c);
                                RESULT = new Nodo("distinto", tmp ,aright,aleft); 
                            :}
                           | TRUE:a DISTINTO:b operaciones_matematicas:c
                            {:
                                ArrayList symbol_distinto = new ArrayList<>(); 
                                symbol_distinto.add(b);
                                Nodo simbolo_distinto = new Nodo("simbolo_distinto", symbol_distinto ,aright,aleft);

                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(simbolo_distinto);
                                tmp.add(c);
                                RESULT = new Nodo("distinto", tmp ,aright,aleft); 
                            :}
                           | operaciones_matematicas:a DISTINTO:b FALSE:c
                            {:
                                
                                ArrayList symbol_distinto = new ArrayList<>(); 
                                symbol_distinto.add(b);
                                Nodo simbolo_distinto = new Nodo("simbolo_distinto", symbol_distinto ,aright,aleft);

                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(simbolo_distinto);
                                tmp.add(c);
                                RESULT = new Nodo("distinto", tmp ,aright,aleft); 
                            :}
                           | FALSE:a DISTINTO:b operaciones_matematicas:c
                            {:
                                
                                ArrayList symbol_distinto = new ArrayList<>(); 
                                symbol_distinto.add(b);
                                Nodo simbolo_distinto = new Nodo("simbolo_distinto", symbol_distinto ,aright,aleft);

                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(simbolo_distinto);
                                tmp.add(c);
                                RESULT = new Nodo("distinto", tmp ,aright,aleft); 
                            :}
                       
                           | TRUE:a 
                           {:
                                        ArrayList tmp = new ArrayList<>(); 
                                        tmp.add(a);
                                        RESULT = new Nodo("Boolean",tmp,aright,aleft);
                           :}
                           | FALSE:a 
                           {:
                                        ArrayList tmp = new ArrayList<>(); 
                                        tmp.add(a);
                                        RESULT =  new Nodo("Boolean",tmp,aright,aleft);
                           :}


                           
                           | funcion_boolean:a COMPARACION:b TRUE:c
                            {:
                                
                                ArrayList symbol_comparacion = new ArrayList<>(); 
                                symbol_comparacion.add(b);
                                Nodo simbolo_comparacion = new Nodo("simbolo_comparacion", symbol_comparacion ,aright,aleft);

                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(simbolo_comparacion);
                                tmp.add(c);
                                RESULT = new Nodo("comparacion", tmp ,aright,aleft); 
                            :}

                           | funcion_boolean:a COMPARACION:b FALSE:c
                            {:
                                
                                ArrayList symbol_comparacion = new ArrayList<>(); 
                                symbol_comparacion.add(b);
                                Nodo simbolo_comparacion = new Nodo("simbolo_comparacion", symbol_comparacion ,aright,aleft);

                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(simbolo_comparacion);
                                tmp.add(c);
                                RESULT = new Nodo("comparacion", tmp ,aright,aleft); 
                            :}
                           | TRUE:a COMPARACION:b funcion_boolean:c
                            {:

                                ArrayList symbol_comparacion = new ArrayList<>(); 
                                symbol_comparacion.add(b);
                                Nodo simbolo_comparacion = new Nodo("simbolo_comparacion", symbol_comparacion ,aright,aleft);

                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(simbolo_comparacion);
                                tmp.add(c);
                                RESULT = new Nodo("comparacion", tmp ,aright,aleft); 
                            :}
                           | FALSE:a COMPARACION:b funcion_boolean:c
                            {:
                                
                                ArrayList symbol_comparacion = new ArrayList<>(); 
                                symbol_comparacion.add(b);
                                Nodo simbolo_comparacion = new Nodo("simbolo_comparacion", symbol_comparacion ,aright,aleft);

                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(simbolo_comparacion);
                                tmp.add(c);
                                RESULT = new Nodo("comparacion", tmp ,aright,aleft); 
                            :}


                           | funcion_boolean:a DISTINTO:b TRUE:c
                            {:
                                
                                ArrayList symbol_distinto = new ArrayList<>(); 
                                symbol_distinto.add(b);
                                Nodo simbolo_distinto = new Nodo("simbolo_distinto", symbol_distinto ,aright,aleft);

                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(simbolo_distinto);
                                tmp.add(c);
                                RESULT = new Nodo("distinto", tmp ,aright,aleft); 
                            :}
                           | funcion_boolean:a DISTINTO:b FALSE:c
                            {:
                                
                                ArrayList symbol_distinto = new ArrayList<>(); 
                                symbol_distinto.add(b);
                                Nodo simbolo_distinto = new Nodo("simbolo_distinto", symbol_distinto ,aright,aleft);

                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(simbolo_distinto);
                                tmp.add(c);
                                RESULT = new Nodo("distinto", tmp ,aright,aleft); 
                            :}
                           | TRUE:a DISTINTO:b funcion_boolean:c
                            {:
                                
                                ArrayList symbol_distinto = new ArrayList<>(); 
                                symbol_distinto.add(b);
                                Nodo simbolo_distinto = new Nodo("simbolo_distinto", symbol_distinto ,aright,aleft);

                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(simbolo_distinto);
                                tmp.add(c);
                                RESULT = new Nodo("distinto", tmp ,aright,aleft); 
                            :}
                           | FALSE:a DISTINTO:b funcion_boolean:c
                            {:
                                
                                ArrayList symbol_distinto = new ArrayList<>(); 
                                symbol_distinto.add(b);
                                Nodo simbolo_distinto = new Nodo("simbolo_distinto", symbol_distinto ,aright,aleft);

                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(simbolo_distinto);
                                tmp.add(c);
                                RESULT = new Nodo("distinto", tmp ,aright,aleft); 
                            :}


                           | funcion_boolean:a COMPARACION:b funcion_boolean:c
                            {:
                                
                                ArrayList symbol_comparacion = new ArrayList<>(); 
                                symbol_comparacion.add(b);
                                Nodo simbolo_comparacion = new Nodo("simbolo_comparacion", symbol_comparacion ,aright,aleft);

                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(simbolo_comparacion);
                                tmp.add(c);
                                RESULT = new Nodo("comparacion", tmp ,aright,aleft); 
                            :}
                           | funcion_boolean:a DISTINTO:b funcion_boolean:c
                            {:
                                
                                ArrayList symbol_distinto = new ArrayList<>(); 
                                symbol_distinto.add(b);
                                Nodo simbolo_distinto = new Nodo("simbolo_distinto", symbol_distinto ,aright,aleft);

                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(simbolo_distinto);
                                tmp.add(c);
                                RESULT = new Nodo("distinto", tmp ,aright,aleft); 
                            :}

                           | funcion_string:a COMPARACION:b funcion_string:c
                            {:
                              
                                ArrayList symbol_comparacion = new ArrayList<>(); 
                                symbol_comparacion.add(b);
                                Nodo simbolo_comparacion = new Nodo("simbolo_comparacion", symbol_comparacion ,aright,aleft);

                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(simbolo_comparacion);
                                tmp.add(c);
                                RESULT = new Nodo("comparacion", tmp ,aright,aleft); 
                            :}
                           | funcion_string:a DISTINTO:b funcion_string:c
                            {:
                                
                                ArrayList symbol_distinto = new ArrayList<>(); 
                                symbol_distinto.add(b);
                                Nodo simbolo_distinto = new Nodo("simbolo_distinto", symbol_distinto ,aright,aleft);

                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(simbolo_distinto);
                                tmp.add(c);
                                RESULT = new Nodo("distinto", tmp ,aright,aleft); 
                            :}

                           | funcion_string:a COMPARACION:b operaciones_matematicas:c
                            {:
                                
                                ArrayList symbol_comparacion = new ArrayList<>(); 
                                symbol_comparacion.add(b);
                                Nodo simbolo_comparacion = new Nodo("simbolo_comparacion", symbol_comparacion ,aright,aleft);

                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(simbolo_comparacion);
                                tmp.add(c);
                                RESULT = new Nodo("comparacion", tmp ,aright,aleft); 
                            :}

                           | funcion_string:a DISTINTO:b operaciones_matematicas:c
                            {:
                                
                                ArrayList symbol_distinto = new ArrayList<>(); 
                                symbol_distinto.add(b);
                                Nodo simbolo_distinto = new Nodo("simbolo_distinto", symbol_distinto ,aright,aleft);

                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(simbolo_distinto);
                                tmp.add(c);
                                RESULT = new Nodo("distinto", tmp ,aright,aleft); 
                            :}

                           | operaciones_matematicas:a COMPARACION:b funcion_string:c
                            {:

                                ArrayList symbol_comparacion = new ArrayList<>(); 
                                symbol_comparacion.add(b);
                                Nodo simbolo_comparacion = new Nodo("simbolo_comparacion", symbol_comparacion ,aright,aleft);

                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(simbolo_comparacion);
                                tmp.add(c);
                                RESULT = new Nodo("comparacion", tmp ,aright,aleft); 
                            :}

                           | operaciones_matematicas:a DISTINTO:b funcion_string:c
                            {:
                                
                                ArrayList symbol_distinto = new ArrayList<>(); 
                                symbol_distinto.add(b);
                                Nodo simbolo_distinto = new Nodo("simbolo_distinto", symbol_distinto ,aright,aleft);

                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(simbolo_distinto);
                                tmp.add(c);
                                RESULT = new Nodo("distinto", tmp ,aright,aleft); 
                            :}

                           | PARENTESIS_ABIERTO:a operaciones_relacionales:b PARENTESIS_CERRADO:c
                            {:
                                ArrayList parentesisA = new ArrayList<>();
                                parentesisA.add(a);
                                Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

                                ArrayList parentesisC = new ArrayList<>();
                                parentesisC.add(c);
                                Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);


                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(parentesis_abierto);
                                tmp.add(b);
                                tmp.add(parentesis_cerrado);
                                RESULT = new Nodo("operaciones_relacionales_parentesis", tmp ,aright,aleft); 
                            :}
                          ;  

operaciones_logicas ::= operaciones_logicas:a AND:b operaciones_logicas:c
                            {:
                                
                                ArrayList symbol_and = new ArrayList<>();
                                symbol_and.add(b);
                                Nodo simbolo_and = new Nodo("simbolo_and",symbol_and,aright,aleft);

                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(simbolo_and);
                                tmp.add(c);
                                RESULT = new Nodo("AND", tmp ,aright,aleft); 
                            :}
                    | operaciones_logicas:a OR:b operaciones_logicas:c
                            {:
                                
                                ArrayList symbol_or = new ArrayList<>();
                                symbol_or.add(b);
                                Nodo simbolo_or = new Nodo("simbolo_or",symbol_or,aright,aleft);

                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(b);
                                tmp.add(c);
                                RESULT = new Nodo("OR", tmp ,aright,aleft); 
                            :}
                    | NOT:a operaciones_logicas:b
                            {:

                                ArrayList symbol_not = new ArrayList<>();
                                symbol_not.add(a);
                                Nodo simbolo_not = new Nodo("simbolo_not",symbol_not,aright,aleft);

                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(simbolo_not);
                                tmp.add(b);
                                RESULT = new Nodo("NOT", tmp ,aright,aleft); 
                            :}
                    | PARENTESIS_ABIERTO:a operaciones_logicas:b PARENTESIS_CERRADO:c
                            {:
                                
                                ArrayList parentesisA = new ArrayList<>();
                                parentesisA.add(a);
                                Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

                                ArrayList parentesisC = new ArrayList<>();
                                parentesisC.add(c);
                                Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);

                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(parentesis_abierto);
                                tmp.add(b);
                                tmp.add(parentesis_cerrado);
                                RESULT = new Nodo("operaciones_logicas_parentesis", tmp ,aright,aleft); 
                            :}
                    | operaciones_relacionales:a
                            {:
                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);                                
                                RESULT = new Nodo("operaciones_relacionales", tmp ,aright,aleft); 
                            :}
                    ;

funcion_length ::= TEXTO:a PUNTO:b LENGTH:c
                            {:

                                ArrayList tmp4 = new ArrayList<>();                                         
                                tmp4.add(b);
                                Nodo punto = new Nodo("punto",tmp4,aright,aleft);                               

                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                Nodo nt = new Nodo("String", tmp ,aright,aleft);

                                ArrayList tmp2 = new ArrayList<>(); 
                                tmp2.add(nt);
                                tmp2.add(punto);
                                tmp2.add(c);
                                RESULT = new Nodo("funcion_length", tmp2 ,aright,aleft);                                
                            :}
                |  ID:a PUNTO:b LENGTH:c
                            {:
                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                Nodo nt = new Nodo("Id", tmp ,aright,aleft);

                                ArrayList tmp4 = new ArrayList<>();                                         
                                tmp4.add(b);
                                Nodo punto = new Nodo("punto",tmp4,aright,aleft);                               

                                ArrayList tmp2 = new ArrayList<>(); 
                                tmp2.add(nt);
                                tmp2.add(punto);
                                tmp2.add(c);
                                RESULT = new Nodo("funcion_length", tmp2 ,aright,aleft);                                
                            :}
                |  variables_string:a PUNTO:b LENGTH:c
                            {:
                                ArrayList tmp4 = new ArrayList<>();                                         
                                tmp4.add(b);
                                Nodo punto = new Nodo("punto",tmp4,aright,aleft);                               


                                ArrayList tmp2 = new ArrayList<>(); 
                                tmp2.add(a);
                                tmp2.add(punto);
                                tmp2.add(c);
                                RESULT = new Nodo("funcion_length", tmp2 ,aright,aleft);                                
                            :}
                ;


funcion_number ::= FNUMBER:a PARENTESIS_ABIERTO:b operaciones_matematicas:c PARENTESIS_CERRADO:d
                            {:
                                

                                ArrayList parentesisA = new ArrayList<>();
                                parentesisA.add(b);
                                Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

                                ArrayList parentesisC = new ArrayList<>();
                                parentesisC.add(d);
                                Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);

                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(parentesis_abierto);
                                tmp.add(c);
                                tmp.add(parentesis_cerrado);
                                RESULT = new Nodo("funcion_number", tmp ,aright,aleft);                                
                            :}
                |  FNUMBER:a PARENTESIS_ABIERTO:b operaciones_logicas:c PARENTESIS_CERRADO:d
                            {:

                                ArrayList parentesisA = new ArrayList<>();
                                parentesisA.add(b);
                                Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

                                ArrayList parentesisC = new ArrayList<>();
                                parentesisC.add(d);
                                Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);


                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(parentesis_abierto);
                                tmp.add(c);
                                tmp.add(parentesis_cerrado);
                                RESULT = new Nodo("funcion_number", tmp ,aright,aleft);                                
                            :}
                |  FNUMBER:a PARENTESIS_ABIERTO:b TEXTO:c PARENTESIS_CERRADO:d
                            {:

                                ArrayList parentesisA = new ArrayList<>();
                                parentesisA.add(b);
                                Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

                                ArrayList parentesisC = new ArrayList<>();
                                parentesisC.add(d);
                                Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);

                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(c);
                                Nodo nt = new Nodo("String", tmp ,aright,aleft);

                                ArrayList tmp2 = new ArrayList<>(); 
                                tmp2.add(a);
                                tmp2.add(parentesis_abierto);
                                tmp2.add(nt);
                                tmp2.add(parentesis_cerrado);
                                RESULT = new Nodo("funcion_number", tmp2 ,aright,aleft);                                
                            :}
                |  FNUMBER:a PARENTESIS_ABIERTO:b variables_string:c PARENTESIS_CERRADO:d
                            {:

                                ArrayList parentesisA = new ArrayList<>();
                                parentesisA.add(b);
                                Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

                                ArrayList parentesisC = new ArrayList<>();
                                parentesisC.add(d);
                                Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);

                                ArrayList tmp2 = new ArrayList<>(); 
                                tmp2.add(a);
                                tmp2.add(parentesis_abierto);
                                tmp2.add(c);
                                tmp2.add(parentesis_cerrado);
                                RESULT = new Nodo("funcion_number", tmp2 ,aright,aleft);                                
                            :}
                ;

funcion_bigint  ::= FBIGINT:a PARENTESIS_ABIERTO:b operaciones_matematicas:c PARENTESIS_CERRADO:d
                            {:


                                ArrayList parentesisA = new ArrayList<>();
                                parentesisA.add(b);
                                Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

                                ArrayList parentesisC = new ArrayList<>();
                                parentesisC.add(d);
                                Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);

                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(parentesis_abierto);
                                tmp.add(c);
                                tmp.add(parentesis_cerrado);
                                RESULT = new Nodo("funcion_bigint", tmp ,aright,aleft);                                
                            :}
                |   FBIGINT:a PARENTESIS_ABIERTO:b operaciones_logicas:c PARENTESIS_CERRADO:d
                            {:

                                ArrayList parentesisA = new ArrayList<>();
                                parentesisA.add(b);
                                Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

                                ArrayList parentesisC = new ArrayList<>();
                                parentesisC.add(d);
                                Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);

                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(parentesis_abierto);
                                tmp.add(c);
                                tmp.add(parentesis_cerrado);
                                RESULT = new Nodo("funcion_bigint", tmp ,aright,aleft);                                
                            :}
                |   FBIGINT:a PARENTESIS_ABIERTO:b TEXTO:c PARENTESIS_CERRADO:d
                            {:

                                ArrayList parentesisA = new ArrayList<>();
                                parentesisA.add(b);
                                Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

                                ArrayList parentesisC = new ArrayList<>();
                                parentesisC.add(d);
                                Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);


                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(c);
                                Nodo nt = new Nodo("String", tmp ,aright,aleft);

                                ArrayList tmp2 = new ArrayList<>(); 
                                tmp2.add(a);
                                tmp2.add(parentesis_abierto);
                                tmp2.add(nt);
                                tmp2.add(parentesis_cerrado);
                                RESULT = new Nodo("funcion_bigint", tmp2 ,aright,aleft);                                
                            :}
                |   FBIGINT:a PARENTESIS_ABIERTO:b variables_string:c PARENTESIS_CERRADO:d
                            {:
                              
                                ArrayList parentesisA = new ArrayList<>();
                                parentesisA.add(b);
                                Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

                                ArrayList parentesisC = new ArrayList<>();
                                parentesisC.add(d);
                                Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);

                                ArrayList tmp2 = new ArrayList<>(); 
                                tmp2.add(a);
                                tmp2.add(parentesis_abierto);
                                tmp2.add(c);
                                tmp2.add(parentesis_cerrado);
                                RESULT = new Nodo("funcion_bigint", tmp2 ,aright,aleft);                                
                            :}
                ;


funcion_boolean  ::= FBOOLEAN:a PARENTESIS_ABIERTO:b operaciones_matematicas:c PARENTESIS_CERRADO:d
                            {:

                                ArrayList parentesisA = new ArrayList<>();
                                parentesisA.add(b);
                                Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

                                ArrayList parentesisC = new ArrayList<>();
                                parentesisC.add(d);
                                Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);

                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(parentesis_abierto);
                                tmp.add(c);
                                tmp.add(parentesis_cerrado);
                                RESULT = new Nodo("funcion_boolean", tmp ,aright,aleft);                                
                            :}
                 |   FBOOLEAN:a PARENTESIS_ABIERTO:b operaciones_logicas:c PARENTESIS_CERRADO:d
                            {:

                                ArrayList parentesisA = new ArrayList<>();
                                parentesisA.add(b);
                                Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

                                ArrayList parentesisC = new ArrayList<>();
                                parentesisC.add(d);
                                Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);

                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(parentesis_abierto);
                                tmp.add(c);
                                tmp.add(parentesis_cerrado);
                                RESULT = new Nodo("funcion_boolean", tmp ,aright,aleft);                                
                            :}
                 |   FBOOLEAN:a PARENTESIS_ABIERTO:b TEXTO:c PARENTESIS_CERRADO:d
                            {:

                                ArrayList parentesisA = new ArrayList<>();
                                parentesisA.add(b);
                                Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

                                ArrayList parentesisC = new ArrayList<>();
                                parentesisC.add(d);
                                Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);

                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(c);
                                Nodo nt = new Nodo("String", tmp ,aright,aleft);

                                ArrayList tmp2 = new ArrayList<>(); 
                                tmp2.add(a);
                                tmp2.add(parentesis_abierto);
                                tmp2.add(nt);
                                tmp2.add(parentesis_cerrado);
                                RESULT = new Nodo("funcion_boolean", tmp2 ,aright,aleft);                                
                            :}
                 |   FBOOLEAN:a PARENTESIS_ABIERTO:b variables_string:c PARENTESIS_CERRADO:d
                            {:
                                

                                ArrayList parentesisA = new ArrayList<>();
                                parentesisA.add(b);
                                Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

                                ArrayList parentesisC = new ArrayList<>();
                                parentesisC.add(d);
                                Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);

                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(parentesis_abierto);
                                tmp.add(c);
                                tmp.add(parentesis_cerrado);
                                RESULT = new Nodo("funcion_boolean", tmp ,aright,aleft);                                
                            :}
                 ;


funcion_string  ::= FSTRING:a PARENTESIS_ABIERTO:b operaciones_matematicas:c PARENTESIS_CERRADO:d
                            {:
                                
                                ArrayList parentesisA = new ArrayList<>();
                                parentesisA.add(b);
                                Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

                                ArrayList parentesisC = new ArrayList<>();
                                parentesisC.add(d);
                                Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);

                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(parentesis_abierto);
                                tmp.add(c);
                                tmp.add(parentesis_cerrado);
                                RESULT = new Nodo("funcion_string", tmp ,aright,aleft);                                
                            :}
                 |  FSTRING:a PARENTESIS_ABIERTO:b operaciones_logicas:c PARENTESIS_CERRADO:d
                            {:
                                
                                ArrayList parentesisA = new ArrayList<>();
                                parentesisA.add(b);
                                Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

                                ArrayList parentesisC = new ArrayList<>();
                                parentesisC.add(d);
                                Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);

                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(parentesis_abierto);
                                tmp.add(c);
                                tmp.add(parentesis_cerrado);
                                RESULT = new Nodo("funcion_string", tmp ,aright,aleft);                                
                            :}
                 |  FSTRING:a PARENTESIS_ABIERTO:b TEXTO:c PARENTESIS_CERRADO:d
                            {:
                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(c);
                                Nodo nt = new Nodo("String", tmp ,aright,aleft);

                                ArrayList parentesisA = new ArrayList<>();
                                parentesisA.add(b);
                                Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

                                ArrayList parentesisC = new ArrayList<>();
                                parentesisC.add(d);
                                Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);

                                ArrayList tmp2 = new ArrayList<>(); 
                                tmp2.add(a);
                                tmp2.add(parentesis_abierto);
                                tmp2.add(nt);
                                tmp2.add(parentesis_cerrado);
                                RESULT = new Nodo("funcion_string", tmp2 ,aright,aleft);                                
                            :}
                 |  FSTRING:a PARENTESIS_ABIERTO:b variables_string:c PARENTESIS_CERRADO:d
                            {:
                                
                                ArrayList parentesisA = new ArrayList<>();
                                parentesisA.add(b);
                                Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

                                ArrayList parentesisC = new ArrayList<>();
                                parentesisC.add(d);
                                Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);

                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(parentesis_abierto);
                                tmp.add(c);
                                tmp.add(parentesis_cerrado);
                                RESULT = new Nodo("funcion_string", tmp ,aright,aleft);                                
                            :}
                 ;

funcion_char_at ::= ID:a PUNTO:b CHARAT:c PARENTESIS_ABIERTO:d operaciones_matematicas:e PARENTESIS_CERRADO:f
                            {:
                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                Nodo nt = new Nodo("Id", tmp ,aright,aleft);

                                ArrayList parentesisA = new ArrayList<>();
                                parentesisA.add(d);
                                Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

                                ArrayList parentesisC = new ArrayList<>();
                                parentesisC.add(f);
                                Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);

                                ArrayList tmp4 = new ArrayList<>();                                         
                                tmp4.add(b);
                                Nodo punto = new Nodo("punto",tmp4,aright,aleft);                               

                                ArrayList tmp2 = new ArrayList<>(); 
                                tmp2.add(nt);
                                tmp2.add(punto);
                                tmp2.add(c);
                                tmp2.add(parentesis_abierto);
                                tmp2.add(e);
                                tmp2.add(parentesis_cerrado);

                                RESULT = new Nodo("funcion_char_at", tmp2 ,aright,aleft);                                
                            :}
                |   TEXTO:a PUNTO:b CHARAT:c PARENTESIS_ABIERTO:d operaciones_matematicas:e PARENTESIS_CERRADO:f
                            {:
                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                Nodo nt = new Nodo("String", tmp ,aright,aleft);

                                ArrayList parentesisA = new ArrayList<>();
                                parentesisA.add(d);
                                Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

                                ArrayList parentesisC = new ArrayList<>();
                                parentesisC.add(f);
                                Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);

                                ArrayList tmp4 = new ArrayList<>();                                         
                                tmp4.add(b);
                                Nodo punto = new Nodo("punto",tmp4,aright,aleft);                               

                                ArrayList tmp2 = new ArrayList<>(); 
                                tmp2.add(nt);
                                tmp2.add(punto);
                                tmp2.add(c);
                                tmp2.add(parentesis_abierto);
                                tmp2.add(e);
                                tmp2.add(parentesis_cerrado);

                                RESULT = new Nodo("funcion_char_at", tmp2 ,aright,aleft);                                
                            :}
                |   variables_string:a PUNTO:b CHARAT:c PARENTESIS_ABIERTO:d operaciones_matematicas:e PARENTESIS_CERRADO:f
                            {:
                                
                                ArrayList tmp4 = new ArrayList<>();                                         
                                tmp4.add(b);
                                Nodo punto = new Nodo("punto",tmp4,aright,aleft);                               

                                ArrayList parentesisA = new ArrayList<>();
                                parentesisA.add(d);
                                Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

                                ArrayList parentesisC = new ArrayList<>();
                                parentesisC.add(f);
                                Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);

                                ArrayList tmp2 = new ArrayList<>(); 
                                tmp2.add(a);
                                tmp2.add(punto);
                                tmp2.add(c);
                                tmp2.add(parentesis_abierto);
                                tmp2.add(e);
                                tmp2.add(parentesis_cerrado);
                                RESULT = new Nodo("funcion_char_at", tmp2 ,aright,aleft);                                
                            :}
                ;


funcion_concat ::= variables_string:a PUNTO:b CONCAT:c PARENTESIS_ABIERTO:d instruccion:e PARENTESIS_CERRADO:f
                    {:

                        ArrayList tmp4 = new ArrayList<>();                                         
                        tmp4.add(b);
                        Nodo punto = new Nodo("punto",tmp4,aright,aleft);    

                        ArrayList parentesisA = new ArrayList<>();
                        parentesisA.add(d);
                        Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

                        ArrayList parentesisC = new ArrayList<>();
                        parentesisC.add(f);
                        Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);

                        ArrayList tmp2 = new ArrayList<>(); 
                        tmp2.add(a);
                        tmp2.add(punto);
                        tmp2.add(c);
                        tmp2.add(parentesis_abierto);
                        tmp2.add(e);
                        tmp2.add(parentesis_cerrado);
                        RESULT = new Nodo("funcion_concat", tmp2 ,aright,aleft);                                
                    :}
                |  TEXTO:a PUNTO:b CONCAT:c PARENTESIS_ABIERTO:d instruccion:e PARENTESIS_CERRADO:f
                    {:

                        ArrayList tmp = new ArrayList<>(); 
                        tmp.add(a);
                        Nodo nt = new Nodo("String", tmp ,aright,aleft);

                        ArrayList tmp4 = new ArrayList<>();                                         
                        tmp4.add(b);
                        Nodo punto = new Nodo("punto",tmp4,aright,aleft);                               

                        ArrayList parentesisA = new ArrayList<>();
                        parentesisA.add(d);
                        Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

                        ArrayList parentesisC = new ArrayList<>();
                        parentesisC.add(f);
                        Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);

                        ArrayList tmp2 = new ArrayList<>(); 
                        tmp2.add(nt);
                        tmp2.add(punto);
                        tmp2.add(c);
                        tmp2.add(parentesis_abierto);
                        tmp2.add(e);
                        tmp2.add(parentesis_cerrado);
                        RESULT = new Nodo("funcion_concat", tmp2 ,aright,aleft);                                

                    :}
                |  ID:a PUNTO:b CONCAT:c PARENTESIS_ABIERTO:d instruccion:e PARENTESIS_CERRADO:f
                    {:
                        ArrayList tmp = new ArrayList<>(); 
                        tmp.add(a);
                        Nodo nt = new Nodo("Id", tmp ,aright,aleft);


                        ArrayList parentesisA = new ArrayList<>();
                        parentesisA.add(d);
                        Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

                        ArrayList parentesisC = new ArrayList<>();
                        parentesisC.add(f);
                        Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);

                        ArrayList tmp4 = new ArrayList<>();                                         
                        tmp4.add(b);
                        Nodo punto = new Nodo("punto",tmp4,aright,aleft);                               

                        ArrayList tmp2 = new ArrayList<>(); 
                        tmp2.add(nt);
                        tmp2.add(punto);
                        tmp2.add(c);
                        tmp2.add(parentesis_abierto);
                        tmp2.add(e);
                        tmp2.add(parentesis_cerrado);
                        RESULT = new Nodo("funcion_concat", tmp2 ,aright,aleft);                                
                    :}
                ;

variables_string ::= funcion_string:a
                  {:
                     RESULT = a;
                  :}
                 |  funcion_char_at:a   
                  {:
                     RESULT = a;
                  :}
                 |  funcion_to_lower_case:a
                  {:
                    RESULT = a;
                  :}
                 |  funcion_to_upper_case:a
                  {:
                    RESULT = a;
                  :}
                 |  funcion_concat:a
                  {:
                    RESULT = a;
                  :}
                 |  llamada_funcion_asignacion:a
                  {:
                    RESULT = a;
                  :}
                 ;


funcion_to_lower_case ::= ID:a PUNTO:b TOLOWERCASE:c PARENTESIS_ABIERTO:d PARENTESIS_CERRADO:e
                        {:
                            ArrayList tmp = new ArrayList<>(); 
                            tmp.add(a);
                            Nodo nt = new Nodo("Id", tmp ,aright,aleft);

                            ArrayList parentesisA = new ArrayList<>();
                            parentesisA.add(d);
                            Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

                            ArrayList parentesisC = new ArrayList<>();
                            parentesisC.add(e);
                            Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);

                            ArrayList tmp4 = new ArrayList<>();                                         
                            tmp4.add(b);
                            Nodo punto = new Nodo("punto",tmp4,aright,aleft);                               

                            ArrayList tmp2 = new ArrayList<>(); 
                            tmp2.add(nt);
                            tmp2.add(punto);
                            tmp2.add(c);
                            tmp2.add(parentesis_abierto);
                            tmp2.add(parentesis_cerrado);
                            RESULT = new Nodo("funcion_to_lower_case", tmp2 ,aright,aleft);                                
                        :}
                       |  TEXTO:a PUNTO:b TOLOWERCASE:c PARENTESIS_ABIERTO:d PARENTESIS_CERRADO:e
                        {:
                            ArrayList tmp = new ArrayList<>(); 
                            tmp.add(a);
                            Nodo nt = new Nodo("String", tmp ,aright,aleft);

                            ArrayList parentesisA = new ArrayList<>();
                            parentesisA.add(d);
                            Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

                            ArrayList parentesisC = new ArrayList<>();
                            parentesisC.add(e);
                            Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);

                            ArrayList tmp4 = new ArrayList<>();                                         
                            tmp4.add(b);
                            Nodo punto = new Nodo("punto",tmp4,aright,aleft);                               

                            ArrayList tmp2 = new ArrayList<>(); 
                            tmp2.add(nt);
                            tmp2.add(punto);
                            tmp2.add(c);
                            tmp2.add(parentesis_abierto);
                            tmp2.add(parentesis_cerrado);
                            RESULT = new Nodo("funcion_to_lower_case", tmp2 ,aright,aleft);                                
                        :}
                       |  variables_string:a PUNTO:b TOLOWERCASE:c PARENTESIS_ABIERTO:d PARENTESIS_CERRADO:e
                        {:

                            ArrayList tmp4 = new ArrayList<>();                                         
                            tmp4.add(b);
                            Nodo punto = new Nodo("punto",tmp4,aright,aleft);                               
                                
                            ArrayList parentesisA = new ArrayList<>();
                            parentesisA.add(d);
                            Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

                            ArrayList parentesisC = new ArrayList<>();
                            parentesisC.add(e);
                            Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);

                            ArrayList tmp2 = new ArrayList<>(); 
                            tmp2.add(a);
                            tmp2.add(punto);
                            tmp2.add(c);
                            tmp2.add(parentesis_abierto);
                            tmp2.add(parentesis_cerrado);
                            RESULT = new Nodo("funcion_to_lower_case", tmp2 ,aright,aleft);                                
                        :}
                       ;

funcion_to_upper_case ::= ID:a PUNTO:b TOUPPERCASE:c PARENTESIS_ABIERTO:d PARENTESIS_CERRADO:e
                        {:
                            ArrayList tmp = new ArrayList<>(); 
                            tmp.add(a);
                            Nodo nt = new Nodo("Id", tmp ,aright,aleft);

                            ArrayList tmp4 = new ArrayList<>();                                         
                            tmp4.add(b);
                            Nodo punto = new Nodo("punto",tmp4,aright,aleft);                               

                            ArrayList parentesisA = new ArrayList<>();
                            parentesisA.add(d);
                            Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

                            ArrayList parentesisC = new ArrayList<>();
                            parentesisC.add(e);
                            Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);

                            ArrayList tmp2 = new ArrayList<>(); 
                            tmp2.add(nt);
                            tmp2.add(punto);
                            tmp2.add(c);
                            tmp2.add(parentesis_abierto);
                            tmp2.add(parentesis_cerrado);
                            RESULT = new Nodo("funcion_to_upper_case", tmp2 ,aright,aleft);                                
                        :}
                       |  TEXTO:a PUNTO:b TOUPPERCASE:c PARENTESIS_ABIERTO:d PARENTESIS_CERRADO:e
                        {:
                            ArrayList tmp = new ArrayList<>(); 
                            tmp.add(a);
                            Nodo nt = new Nodo("String", tmp ,aright,aleft);

                            ArrayList parentesisA = new ArrayList<>();
                            parentesisA.add(d);
                            Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

                            ArrayList parentesisC = new ArrayList<>();
                            parentesisC.add(e);
                            Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);

                            ArrayList tmp4 = new ArrayList<>();                                         
                            tmp4.add(b);
                            Nodo punto = new Nodo("punto",tmp4,aright,aleft);                               

                            ArrayList tmp2 = new ArrayList<>(); 
                            tmp2.add(nt);
                            tmp2.add(punto);
                            tmp2.add(c);
                            tmp2.add(parentesis_abierto);
                            tmp2.add(parentesis_cerrado);
                            RESULT = new Nodo("funcion_to_upper_case", tmp2 ,aright,aleft);                                
                        :}
                       |  variables_string:a PUNTO:b TOUPPERCASE:c PARENTESIS_ABIERTO:d PARENTESIS_CERRADO:e
                        {:
                            
                            ArrayList tmp4 = new ArrayList<>();                                         
                            tmp4.add(b);
                            Nodo punto = new Nodo("punto",tmp4,aright,aleft);                               

                            ArrayList parentesisA = new ArrayList<>();
                            parentesisA.add(d);
                            Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

                            ArrayList parentesisC = new ArrayList<>();
                            parentesisC.add(e);
                            Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);

                            ArrayList tmp2 = new ArrayList<>(); 
                            tmp2.add(a);
                            tmp2.add(punto);
                            tmp2.add(c);
                            tmp2.add(parentesis_abierto);
                            tmp2.add(parentesis_cerrado);
                            RESULT = new Nodo("funcion_to_upper_case", tmp2 ,aright,aleft);                                
                        :}
                       ;

funcion_console_log ::= CONSOLE:a PUNTO:b LOG:c PARENTESIS_ABIERTO:d lista_instrucciones_console:e PARENTESIS_CERRADO:f PUNTO_COMA:g
                    {:
                        
                        ArrayList tmp = new ArrayList<>();                                         
                        tmp.add(a);
                        Nodo console = new Nodo("console",tmp,aright,aleft);                               

                        ArrayList tmp1 = new ArrayList<>();                                         
                        tmp1.add(b);
                        Nodo punto = new Nodo("punto",tmp1,aright,aleft);                               

                        ArrayList tmp3 = new ArrayList<>();                                         
                        tmp3.add(c);
                        Nodo log =  new Nodo("log",tmp3,aright,aleft);          

                        ArrayList parentesisA = new ArrayList<>();
                        parentesisA.add(d);
                        Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

                        ArrayList parentesisC = new ArrayList<>();
                        parentesisC.add(f);
                        Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);

                        ArrayList puntoC = new ArrayList<>(); 
                        puntoC.add(g);
                        Nodo punto_coma = new Nodo("punto_coma", puntoC ,aright,aleft);

                        ArrayList tmp2 = new ArrayList<>(); 
                        tmp2.add(console);
                        tmp2.add(punto);
                        tmp2.add(log);
                        tmp2.add(parentesis_abierto);
                        tmp2.add(e);
                        tmp2.add(parentesis_cerrado);
                        tmp2.add(punto_coma);
                        RESULT = new Nodo("funcion_console_log", tmp2 ,aright,aleft);                                
                    :}
            ;

lista_instrucciones_console ::= lista_instrucciones_console:a COMA:b instruccion:c
                            {: 
                                
                                ArrayList tmp5 = new ArrayList<>();
                                tmp5.add(b);
                                Nodo coma = new Nodo("coma",tmp5,aright,aleft);

                                ArrayList tmp = new ArrayList<>();
                                tmp.add(a);
                                tmp.add(coma);
                                tmp.add(c);
                                RESULT = new Nodo("lista_instrucciones_console",tmp,aright,aleft);
                              
                            :}
                             |  instruccion:a 
                                {: 
                                  
                                  ArrayList tmp = new ArrayList<>();
                                  tmp.add(a);

                                  RESULT = new Nodo("lista_instrucciones_console",tmp,aright,aleft);

                                :}
                             ;

 

declaracion_funcion ::= 

 FUNCTION:a ID:b PARENTESIS_ABIERTO:c PARENTESIS_CERRADO:d DOS_PUNTOS:e RVOID:f CORCHETE_ABIERTO:g instrucciones_funciones_sin_return:h CORCHETE_CERRADO:i
 
 {:
            ArrayList tmp = new ArrayList<>(); 
            tmp.add(b);
            Nodo nt = new Nodo("Id", tmp ,aright,aleft);

            ArrayList dosP = new ArrayList<>();
            dosP.add(e);
            Nodo dos_puntos = new Nodo("dos_puntos",dosP,aright,aleft);

            ArrayList parentesisA = new ArrayList<>();
            parentesisA.add(c);
            Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

            ArrayList parentesisC = new ArrayList<>();
            parentesisC.add(d);
            Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);

            ArrayList corcheteA = new ArrayList<>();
            corcheteA.add(g);
            Nodo corchete_abierto = new Nodo("corchete_abierto",corcheteA,aright,aleft);

            ArrayList corcheteC = new ArrayList<>();
            corcheteC.add(i);
            Nodo corchete_cerrado = new Nodo("corchete_cerrado",corcheteC,aright,aleft);
            
            ArrayList tmp2 = new ArrayList<>(); 
            tmp2.add(a);
            tmp2.add(nt);
            tmp2.add(parentesis_abierto);
            tmp2.add(parentesis_cerrado);
            tmp2.add(dos_puntos);
            tmp2.add(f);
            tmp2.add(corchete_abierto);
            tmp2.add(h);
            tmp2.add(corchete_cerrado);

            RESULT = new Nodo("declaracion_funcion_sin_parametros_void",tmp2,aright,aleft);

 :}

|FUNCTION:a ID:b PARENTESIS_ABIERTO:c parametros_funcion_declaracion:d PARENTESIS_CERRADO:e DOS_PUNTOS:f RVOID:g CORCHETE_ABIERTO:h instrucciones_funciones_sin_return:i CORCHETE_CERRADO:j
{:
            ArrayList tmp = new ArrayList<>(); 
            tmp.add(b);
            Nodo nt = new Nodo("Id", tmp ,aright,aleft);

            ArrayList dosP = new ArrayList<>();
            dosP.add(f);
            Nodo dos_puntos = new Nodo("dos_puntos",dosP,fright,fleft);

            ArrayList parentesisA = new ArrayList<>();
            parentesisA.add(c);
            Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

            ArrayList parentesisC = new ArrayList<>();
            parentesisC.add(e);
            Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);            

            ArrayList corcheteA = new ArrayList<>();
            corcheteA.add(h);
            Nodo corchete_abierto = new Nodo("corchete_abierto",corcheteA,aright,aleft);

            ArrayList corcheteC = new ArrayList<>();
            corcheteC.add(j);
            Nodo corchete_cerrado = new Nodo("corchete_cerrado",corcheteC,aright,aleft);
            
            ArrayList tmp2 = new ArrayList<>(); 
            tmp2.add(a);
            tmp2.add(nt);
            tmp2.add(parentesis_abierto);
            tmp2.add(d);
            tmp2.add(parentesis_cerrado);
            tmp2.add(dos_puntos);
            tmp2.add(g);
            tmp2.add(corchete_abierto);
            tmp2.add(i);
            tmp2.add(corchete_cerrado);

            RESULT = new Nodo("declaracion_funcion_con_parametros_void",tmp2,aright,aleft);

 :}

|FUNCTION:a ID:b PARENTESIS_ABIERTO:c PARENTESIS_CERRADO:d CORCHETE_ABIERTO:e instrucciones_funcion:f CORCHETE_CERRADO:g
{:
            ArrayList tmp = new ArrayList<>(); 
            tmp.add(b);
            Nodo nt = new Nodo("Id", tmp ,aright,aleft);

            ArrayList parentesisA = new ArrayList<>();
            parentesisA.add(c);
            Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

            ArrayList parentesisC = new ArrayList<>();
            parentesisC.add(d);
            Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);

            ArrayList corcheteA = new ArrayList<>();
            corcheteA.add(e);
            Nodo corchete_abierto = new Nodo("corchete_abierto",corcheteA,aright,aleft);

            ArrayList corcheteC = new ArrayList<>();
            corcheteC.add(g);
            Nodo corchete_cerrado = new Nodo("corchete_cerrado",corcheteC,aright,aleft);
            
            ArrayList tmp2 = new ArrayList<>(); 
            tmp2.add(a);
            tmp2.add(nt);
            tmp2.add(parentesis_abierto);
            tmp2.add(parentesis_cerrado);
            tmp2.add(corchete_abierto);
            tmp2.add(f);
            tmp2.add(corchete_cerrado);
            
            RESULT = new Nodo("declaracion_funcion_sin_parametros_sin_tipo",tmp2,aright,aleft);

 :}

|FUNCTION:a ID:b PARENTESIS_ABIERTO:c parametros_funcion_declaracion:d PARENTESIS_CERRADO:e CORCHETE_ABIERTO:f instrucciones_funcion:g CORCHETE_CERRADO:h
{:
            ArrayList tmp = new ArrayList<>(); 
            tmp.add(b);
            Nodo nt = new Nodo("Id", tmp ,aright,aleft);

            ArrayList parentesisA = new ArrayList<>();
            parentesisA.add(c);
            Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

            ArrayList parentesisC = new ArrayList<>();
            parentesisC.add(e);
            Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);

            ArrayList corcheteA = new ArrayList<>();
            corcheteA.add(f);
            Nodo corchete_abierto = new Nodo("corchete_abierto",corcheteA,aright,aleft);

            ArrayList corcheteC = new ArrayList<>();
            corcheteC.add(h);
            Nodo corchete_cerrado = new Nodo("corchete_cerrado",corcheteC,aright,aleft);
            
            ArrayList tmp2 = new ArrayList<>(); 
            tmp2.add(a);
            tmp2.add(nt);
            tmp2.add(parentesis_abierto);
            tmp2.add(d);
            tmp2.add(parentesis_cerrado);
            tmp2.add(corchete_abierto);
            tmp2.add(g);
            tmp2.add(corchete_cerrado);
            
            RESULT = new Nodo("declaracion_funcion_con_parametros_sin_tipo",tmp2,aright,aleft);
 :}

|FUNCTION:a ID:b PARENTESIS_ABIERTO:c PARENTESIS_CERRADO:d DOS_PUNTOS:e tipo_dato_variable:f CORCHETE_ABIERTO:g instrucciones_funcion:h CORCHETE_CERRADO:i
{:
            ArrayList tmp = new ArrayList<>(); 
            tmp.add(b);
            Nodo nt = new Nodo("Id", tmp ,aright,aleft);

            ArrayList dosP = new ArrayList<>();
            dosP.add(e);
            Nodo dos_puntos = new Nodo("dos_puntos",dosP,eright,eleft);

            ArrayList parentesisA = new ArrayList<>();
            parentesisA.add(c);
            Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

            ArrayList parentesisC = new ArrayList<>();
            parentesisC.add(d);
            Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);

            ArrayList corcheteA = new ArrayList<>();
            corcheteA.add(g);
            Nodo corchete_abierto = new Nodo("corchete_abierto",corcheteA,aright,aleft);

            ArrayList corcheteC = new ArrayList<>();
            corcheteC.add(i);
            Nodo corchete_cerrado = new Nodo("corchete_cerrado",corcheteC,aright,aleft);
            
            ArrayList tmp2 = new ArrayList<>(); 
            tmp2.add(a);
            tmp2.add(nt);
            tmp2.add(parentesis_abierto);
            tmp2.add(parentesis_cerrado);
            tmp2.add(dos_puntos);
            tmp2.add(f);
            tmp2.add(corchete_abierto);
            tmp2.add(h);
            tmp2.add(corchete_cerrado);
            
            RESULT = new Nodo("declaracion_funcion_sin_parametros_con_tipo",tmp2,aright,aleft);
 :}

|FUNCTION:a ID:b PARENTESIS_ABIERTO:c parametros_funcion_declaracion:d PARENTESIS_CERRADO:e DOS_PUNTOS:f tipo_dato_variable:g CORCHETE_ABIERTO:h instrucciones_funcion:i CORCHETE_CERRADO:j
{:
            ArrayList tmp = new ArrayList<>(); 
            tmp.add(b);
            Nodo nt = new Nodo("Id", tmp ,aright,aleft);

            ArrayList dosP = new ArrayList<>();
            dosP.add(f);
            Nodo dos_puntos = new Nodo("dos_puntos",dosP,fright,fleft);

            ArrayList parentesisA = new ArrayList<>();
            parentesisA.add(c);
            Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

            ArrayList parentesisC = new ArrayList<>();
            parentesisC.add(e);
            Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);

            ArrayList corcheteA = new ArrayList<>();
            corcheteA.add(h);
            Nodo corchete_abierto = new Nodo("corchete_abierto",corcheteA,aright,aleft);

            ArrayList corcheteC = new ArrayList<>();
            corcheteC.add(j);
            Nodo corchete_cerrado = new Nodo("corchete_cerrado",corcheteC,aright,aleft);
            
            ArrayList tmp2 = new ArrayList<>(); 
            tmp2.add(a);
            tmp2.add(nt);
            tmp2.add(parentesis_abierto);
            tmp2.add(d);
            tmp2.add(parentesis_cerrado);
            tmp2.add(dos_puntos);
            tmp2.add(g);
            tmp2.add(corchete_abierto);
            tmp2.add(i);
            tmp2.add(corchete_cerrado);
            
            RESULT = new Nodo("declaracion_funcion_con_parametros_con_tipo",tmp2,aright,aleft);
 :}        
                    ;


instrucciones_funciones_sin_return ::= instrucciones_funciones_sin_return:a opciones_instrucciones_sin_return:b
                                    {:
                                        ArrayList tmp = new ArrayList<>();
                                        tmp.add(a);
                                        tmp.add(a);

                                        RESULT = new Nodo("instrucciones_funciones_sin_return",tmp,aright,aleft);
                                    :}
                                    | opciones_instrucciones_sin_return:a
                                    {:
                                        ArrayList tmp = new ArrayList<>();
                                        tmp.add(a);

                                        RESULT = new Nodo("instrucciones_funciones_sin_return",tmp,aright,aleft);
                                    :}
                                    ;


instrucciones_funcion ::= instrucciones:a 
                      {: 
                            ArrayList tmp = new ArrayList<>(); 
                            tmp.add(a);
                            RESULT = new Nodo("instrucciones_funcion",tmp,aright,aleft);      
                      :}

                       | 
                       
                       {: 
                            ArrayList tmp = new ArrayList<>(); 
                            RESULT = new Nodo("vacio",tmp,0,0);
                       :}

                       ;

parametros_funcion_declaracion ::= parametros_funcion_declaracion:a COMA:b parametro_funcion_declaracion:c
                                {:

                                    ArrayList tmp5 = new ArrayList<>();
                                    tmp5.add(b);
                                    Nodo coma = new Nodo("coma",tmp5,aright,aleft);

                                    ArrayList tmp = new ArrayList<>(); 
                                    tmp.add(a);
                                    tmp.add(coma);
                                    tmp.add(b);
                                    Nodo nt = new Nodo("parametros_funcion_declaracion", tmp ,aright,aleft);                    

                                :}

                                |  parametro_funcion_declaracion:a
                                {:
                                    ArrayList tmp = new ArrayList<>(); 
                                    tmp.add(a);
                                    Nodo nt = new Nodo("parametros_funcion_declaracion", tmp ,aright,aleft);                    
                                :}
                                ;

parametro_funcion_declaracion ::= ID:a DOS_PUNTOS:b tipo_dato_variable:c
                                {:

                                    ArrayList tmp = new ArrayList<>(); 
                                    tmp.add(a);
                                    Nodo nt = new Nodo("Id", tmp ,aright,aleft);

                                    ArrayList dosP = new ArrayList<>();
                                    dosP.add(b);
                                    Nodo dos_puntos = new Nodo("dos_puntos",dosP,bright,bleft);

                                    ArrayList tmp2 = new ArrayList<>(); 
                                    tmp2.add(nt);
                                    tmp2.add(dos_puntos);
                                    tmp2.add(c);
                                    RESULT = new Nodo("parametro_funcion_declaracion",tmp2,aright,aleft);
                                :}
                                ;


funcion_return ::= RETURN:a instruccion:b PUNTO_COMA:c
                    {:

                        ArrayList puntoC = new ArrayList<>(); 
                        puntoC.add(c);
                        Nodo punto_coma = new Nodo("punto_coma", puntoC ,aright,aleft);
                        
                        ArrayList tmp = new ArrayList<>();
                        tmp.add(a);
                        tmp.add(b);
                        tmp.add(punto_coma);

                        RESULT = new Nodo("return_con_instruccion",tmp,aright,aleft);

                    :}
                | RETURN:a PUNTO_COMA:b
                    {:
                        
                        ArrayList puntoC = new ArrayList<>(); 
                        puntoC.add(b);
                        Nodo punto_coma = new Nodo("punto_coma", puntoC ,aright,aleft);

                        ArrayList tmp = new ArrayList<>();
                        tmp.add(a);
                        tmp.add(punto_coma);
                        RESULT = new Nodo("return_sin_instruccion",tmp,aright,aleft);
                    :}
                ;

llamada_funcion_asignacion ::= ID:a PARENTESIS_ABIERTO:b PARENTESIS_CERRADO:c
                              {:

                                ArrayList tmp = new ArrayList<>();
                                tmp.add(a);
                                Nodo nt = new Nodo("Id",tmp,aright, aleft);

                                ArrayList parentesisA = new ArrayList<>();
                                parentesisA.add(b);
                                Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

                                ArrayList parentesisC = new ArrayList<>();
                                parentesisC.add(c);
                                Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);

                                ArrayList tmp2 = new ArrayList<>();
                                tmp2.add(nt);
                                tmp2.add(parentesis_abierto);
                                tmp2.add(parentesis_cerrado);

                                RESULT = new Nodo("llamada_funcion_asignacion_sin_parametros",tmp2,aright,aleft);

                              :}
                            |  ID:a PARENTESIS_ABIERTO:b parametros_funcion_asignacion:c PARENTESIS_CERRADO:d
                              {:

                                ArrayList tmp = new ArrayList<>();
                                tmp.add(a);
                                Nodo nt = new Nodo("Id",tmp,aright, aleft);

                                ArrayList parentesisA = new ArrayList<>();
                                parentesisA.add(b);
                                Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

                                ArrayList parentesisC = new ArrayList<>();
                                parentesisC.add(d);
                                Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);                                

                                ArrayList tmp2 = new ArrayList<>();
                                tmp2.add(nt);
                                tmp2.add(parentesis_abierto);
                                tmp2.add(c);
                                tmp2.add(parentesis_cerrado);

                                RESULT = new Nodo("llamada_funcion_asignacion_con_parametros",tmp2,aright,aleft);

                              :}
                            ;

parametros_funcion_asignacion ::= parametros_funcion_asignacion:a COMA:b instruccion:c
                               {:
                                    
                                    ArrayList tmp5 = new ArrayList<>();
                                    tmp5.add(b);
                                    Nodo coma = new Nodo("coma",tmp5,aright,aleft);

                                    ArrayList tmp = new ArrayList<>();
                                    tmp.add(a);
                                    tmp.add(coma);
                                    tmp.add(c);
                                                                
                                    RESULT = new Nodo("parametros_funcion_asignacion",tmp,aright,aleft);
                               :}
                               |  instruccion:a
                               {:
                                    ArrayList tmp = new ArrayList<>();
                                    tmp.add(a);
                                                                
                                    RESULT = new Nodo("parametros_funcion_asignacion",tmp,aright,aleft);
                               :}
                               ;



llamada_funcion_normal ::= ID:a PARENTESIS_ABIERTO:b PARENTESIS_CERRADO:c PUNTO_COMA:d
                           {:
    
                                ArrayList tmp = new ArrayList<>();
                                tmp.add(a);
                                Nodo nt = new Nodo("Id",tmp,aright, aleft);

                                ArrayList parentesisA = new ArrayList<>();
                                parentesisA.add(b);
                                Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

                                ArrayList parentesisC = new ArrayList<>();
                                parentesisC.add(c);
                                Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);

                                ArrayList puntoC = new ArrayList<>(); 
                                puntoC.add(d);
                                Nodo punto_coma = new Nodo("punto_coma", puntoC ,aright,aleft);

                                ArrayList tmp2 = new ArrayList<>();
                                tmp2.add(nt);
                                tmp2.add(parentesis_abierto);
                                tmp2.add(parentesis_cerrado);
                                tmp2.add(punto_coma);

                                RESULT = new Nodo("llamada_funcion_sin_parametros",tmp2,aright,aleft);

                           :}
                        |  ID:a PARENTESIS_ABIERTO:b instruccion:c PARENTESIS_CERRADO:d PUNTO_COMA:e
                           {:
    
                                ArrayList tmp = new ArrayList<>();
                                tmp.add(a);
                                Nodo nt = new Nodo("Id",tmp,aright, aleft);

                                ArrayList parentesisA = new ArrayList<>();
                                parentesisA.add(b);
                                Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

                                ArrayList parentesisC = new ArrayList<>();
                                parentesisC.add(d);
                                Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);

                                ArrayList puntoC = new ArrayList<>(); 
                                puntoC.add(e);
                                Nodo punto_coma = new Nodo("punto_coma", puntoC ,aright,aleft);

                                ArrayList tmp2 = new ArrayList<>();
                                tmp2.add(nt);
                                tmp2.add(parentesis_abierto);
                                tmp2.add(c);
                                tmp2.add(parentesis_cerrado);
                                tmp2.add(punto_coma);

                                RESULT = new Nodo("llamada_funcion_con_parametros",tmp2,aright,aleft);

                           :}
                        ;

funcion_if ::= IF:a PARENTESIS_ABIERTO:b instruccion:c PARENTESIS_CERRADO:d CORCHETE_ABIERTO:e instrucciones_funcion:f CORCHETE_CERRADO:g
              {:

                    ArrayList parentesisA = new ArrayList<>();
                    parentesisA.add(b);
                    Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

                    ArrayList parentesisC = new ArrayList<>();
                    parentesisC.add(d);
                    Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);

                    ArrayList corcheteA = new ArrayList<>();
                    corcheteA.add(e);
                    Nodo corchete_abierto = new Nodo("corchete_abierto",corcheteA,aright,aleft);

                    ArrayList corcheteC = new ArrayList<>();
                    corcheteC.add(g);
                    Nodo corchete_cerrado = new Nodo("corchete_cerrado",corcheteC,aright,aleft);

                    ArrayList tmp = new ArrayList<>();
                    tmp.add(a);
                    tmp.add(parentesis_abierto);
                    tmp.add(c);
                    tmp.add(parentesis_cerrado);
                    tmp.add(corchete_abierto);
                    tmp.add(f);
                    tmp.add(corchete_cerrado);

                    RESULT = new Nodo("if",tmp,aright,aleft);                

              :}
            ;

funcion_else ::= ELSE:a CORCHETE_ABIERTO:b instrucciones_funcion:c CORCHETE_CERRADO:d
              {:

                    ArrayList corcheteA = new ArrayList<>();
                    corcheteA.add(b);
                    Nodo corchete_abierto = new Nodo("corchete_abierto",corcheteA,aright,aleft);

                    ArrayList corcheteC = new ArrayList<>();
                    corcheteC.add(d);
                    Nodo corchete_cerrado = new Nodo("corchete_cerrado",corcheteC,aright,aleft);

                    ArrayList tmp = new ArrayList<>();
                    tmp.add(a);
                    tmp.add(corchete_abierto);
                    tmp.add(c);
                    tmp.add(corchete_cerrado);
                    
                    RESULT = new Nodo("else",tmp,aright,aleft);                

              :}
              ;  


funcion_else_if ::= ELSE:a IF:b PARENTESIS_ABIERTO:c instruccion:d PARENTESIS_CERRADO:e CORCHETE_ABIERTO:f instrucciones_funcion:g CORCHETE_CERRADO:h
              {:
                    

                    ArrayList parentesisA = new ArrayList<>();
                    parentesisA.add(c);
                    Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

                    ArrayList parentesisC = new ArrayList<>();
                    parentesisC.add(e);
                    Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);

                    ArrayList corcheteA = new ArrayList<>();
                    corcheteA.add(f);
                    Nodo corchete_abierto = new Nodo("corchete_abierto",corcheteA,aright,aleft);

                    ArrayList corcheteC = new ArrayList<>();
                    corcheteC.add(h);
                    Nodo corchete_cerrado = new Nodo("corchete_cerrado",corcheteC,aright,aleft);

                    ArrayList tmp = new ArrayList<>();
                    tmp.add(a);
                    tmp.add(b);
                    tmp.add(parentesis_abierto);
                    tmp.add(d);
                    tmp.add(parentesis_cerrado);
                    tmp.add(corchete_abierto);
                    tmp.add(g);
                    tmp.add(corchete_cerrado);
                    
                    RESULT = new Nodo("else_if",tmp,aright,aleft);                
              :}
                ;

lista_else_if ::= lista_else_if:a funcion_else_if:b
                  {:
                            ArrayList tmp = new ArrayList<>();
                            tmp.add(a);
                            tmp.add(b);
                            RESULT = new Nodo("lista_else_if",tmp,aright,aleft);
                  :}
                | funcion_else_if:a {:
                            ArrayList tmp = new ArrayList<>();
                            tmp.add(a);
                            RESULT = new Nodo("lista_else_if",tmp,aright,aleft);
                                  :}
                ;

opciones_if ::=  funcion_if:a
                {:
                    ArrayList tmp = new ArrayList<>();
                    tmp.add(a);
                    RESULT = new Nodo("funcion_if",tmp,aright,aleft);
                :}
                | funcion_if:a funcion_else:b
                {:
                    ArrayList tmp = new ArrayList<>();
                    tmp.add(a);
                    tmp.add(b);
                    RESULT = new Nodo("funcion_if_else",tmp,aright,aleft);
                :}
                | funcion_if:a lista_else_if:b funcion_else:c
                {:
                    ArrayList tmp = new ArrayList<>();
                    tmp.add(a);
                    tmp.add(b);
                    tmp.add(c);
                    RESULT = new Nodo("funcion_if_else_if_else",tmp,aright,aleft);
                :}                
                | funcion_if:a lista_else_if:b
                {:
                    ArrayList tmp = new ArrayList<>();
                    tmp.add(a);
                    tmp.add(b);
                    RESULT = new Nodo("funcion_if_else_if",tmp,aright,aleft);
                :}                                
                ;


instruccion_break ::= BREAK:a PUNTO_COMA:b
                    {: 
                                
                        ArrayList puntoC = new ArrayList<>(); 
                        puntoC.add(b);
                        Nodo punto_coma = new Nodo("punto_coma", puntoC ,aright,aleft);

                        ArrayList tmp = new ArrayList<>();
                        tmp.add(a);
                        tmp.add(punto_coma);

                        RESULT = new Nodo("break",tmp,aright,aleft);

                    :}
                  ;


instruccion_continue ::= CONTINUE:a PUNTO_COMA:b
                    {: 
                        
                        ArrayList puntoC = new ArrayList<>(); 
                        puntoC.add(b);
                        Nodo punto_coma = new Nodo("punto_coma", puntoC ,aright,aleft);

                        ArrayList tmp = new ArrayList<>();
                        tmp.add(a);
                        tmp.add(punto_coma);

                        RESULT = new Nodo("continue",tmp,aright,aleft);

                    :}
                     ;


funcion_for ::= 
FOR:a PARENTESIS_ABIERTO:b declaracion_variable:c operaciones_logicas:d PUNTO_COMA:e accion_asignacion_for:f PARENTESIS_CERRADO:g CORCHETE_ABIERTO:h instrucciones_funcion:i CORCHETE_CERRADO:j
    {:


        ArrayList parentesisA = new ArrayList<>();
        parentesisA.add(b);
        Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

        ArrayList parentesisC = new ArrayList<>();
        parentesisC.add(g);
        Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);

        ArrayList corcheteA = new ArrayList<>();
        corcheteA.add(h);
        Nodo corchete_abierto = new Nodo("corchete_abierto",corcheteA,aright,aleft);

        ArrayList corcheteC = new ArrayList<>();
        corcheteC.add(j);
        Nodo corchete_cerrado = new Nodo("corchete_cerrado",corcheteC,aright,aleft);

        ArrayList puntoC = new ArrayList<>(); 
        puntoC.add(e);
        Nodo punto_coma = new Nodo("punto_coma", puntoC ,aright,aleft);

        ArrayList tmp = new ArrayList<>();
        tmp.add(a);
        tmp.add(parentesis_abierto);
        tmp.add(c);
        tmp.add(d);
        tmp.add(punto_coma);
        tmp.add(f);
        tmp.add(parentesis_cerrado);
        tmp.add(corchete_abierto);
        tmp.add(i);
        tmp.add(corchete_cerrado);

        RESULT = new Nodo("for_declaracion_variable",tmp,aright,aleft);

    :}


|FOR:a PARENTESIS_ABIERTO:b asignacion:c operaciones_logicas:d PUNTO_COMA:e accion_asignacion_for:f PARENTESIS_CERRADO:g CORCHETE_ABIERTO:h instrucciones_funcion:i CORCHETE_CERRADO:j
    {:


        ArrayList parentesisA = new ArrayList<>();
        parentesisA.add(b);
        Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

        ArrayList parentesisC = new ArrayList<>();
        parentesisC.add(g);
        Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);

        ArrayList corcheteA = new ArrayList<>();
        corcheteA.add(h);
        Nodo corchete_abierto = new Nodo("corchete_abierto",corcheteA,aright,aleft);

        ArrayList corcheteC = new ArrayList<>();
        corcheteC.add(j);
        Nodo corchete_cerrado = new Nodo("corchete_cerrado",corcheteC,aright,aleft);

        ArrayList puntoC = new ArrayList<>(); 
        puntoC.add(e);
        Nodo punto_coma = new Nodo("punto_coma", puntoC ,aright,aleft);

        ArrayList tmp = new ArrayList<>();
        tmp.add(a);
        tmp.add(parentesis_abierto);
        tmp.add(c);
        tmp.add(d);
        tmp.add(punto_coma);
        tmp.add(f);
        tmp.add(parentesis_cerrado);
        tmp.add(corchete_abierto);
        tmp.add(i);
        tmp.add(corchete_cerrado);

        RESULT = new Nodo("for_asignacion_variable",tmp,aright,aleft);

    :}
            ;


accion_asignacion_for ::= incremento:a
                        {:
                            RESULT = a;    
                        :}

                       | decremento:a
                        {:
                            RESULT = a;    
                        :}                       
                        
                       | ID:a ASIGNACION:b instruccion:c
                        
                        {:
                            ArrayList tmp = new ArrayList<>();
                            tmp.add(a);
                            Nodo nt = new Nodo("Id",tmp,aright, aleft);

                            ArrayList tmp3 = new ArrayList<>();
                            tmp3.add(b);
                            Nodo equals = new Nodo("igual",tmp3,aright,aleft);

                            ArrayList tmp2 = new ArrayList<>();
                            tmp2.add(nt);
                            tmp2.add(equals);
                            tmp2.add(c);
                                                        
                            RESULT = new Nodo("asignacion_for",tmp2,aright,aleft);

                        :}

                       ;


funcion_while ::= WHILE:a PARENTESIS_ABIERTO:b instruccion:c PARENTESIS_CERRADO:d CORCHETE_ABIERTO:e instrucciones_funcion:f CORCHETE_CERRADO:g
                {:

                    ArrayList parentesisA = new ArrayList<>();
                    parentesisA.add(b);
                    Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

                    ArrayList parentesisC = new ArrayList<>();
                    parentesisC.add(d);
                    Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);

                    ArrayList corcheteA = new ArrayList<>();
                    corcheteA.add(e);
                    Nodo corchete_abierto = new Nodo("corchete_abierto",corcheteA,aright,aleft);

                    ArrayList corcheteC = new ArrayList<>();
                    corcheteC.add(g);
                    Nodo corchete_cerrado = new Nodo("corchete_cerrado",corcheteC,aright,aleft);

                    ArrayList tmp = new ArrayList<>();
                    tmp.add(a);
                    tmp.add(parentesis_abierto);
                    tmp.add(c);
                    tmp.add(parentesis_cerrado);
                    tmp.add(corchete_abierto);
                    tmp.add(f);
                    tmp.add(corchete_cerrado);

                    RESULT = new Nodo("while",tmp,aright,aleft);

                :}
              ;


funcion_do_while ::= DO:a CORCHETE_ABIERTO:b instrucciones_funcion:c CORCHETE_CERRADO:d WHILE:e PARENTESIS_ABIERTO:f instruccion:g PARENTESIS_CERRADO:h PUNTO_COMA:i
                {:

                    
                    ArrayList parentesisA = new ArrayList<>();
                    parentesisA.add(f);
                    Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

                    ArrayList parentesisC = new ArrayList<>();
                    parentesisC.add(h);
                    Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);

                    ArrayList corcheteA = new ArrayList<>();
                    corcheteA.add(b);
                    Nodo corchete_abierto = new Nodo("corchete_abierto",corcheteA,aright,aleft);

                    ArrayList corcheteC = new ArrayList<>();
                    corcheteC.add(d);
                    Nodo corchete_cerrado = new Nodo("corchete_cerrado",corcheteC,aright,aleft);

                    ArrayList puntoC = new ArrayList<>(); 
                    puntoC.add(i);
                    Nodo punto_coma = new Nodo("punto_coma", puntoC ,aright,aleft);

                    ArrayList tmp = new ArrayList<>();
                    tmp.add(a);
                    tmp.add(corchete_abierto);
                    tmp.add(c);
                    tmp.add(corchete_cerrado);
                    tmp.add(e);
                    tmp.add(parentesis_abierto);
                    tmp.add(g);
                    tmp.add(parentesis_cerrado);
                    tmp.add(punto_coma);

                    RESULT = new Nodo("do_while",tmp,aright,aleft);

                :}
                 ;


funcion_printAst ::= PRINTAST:a PARENTESIS_ABIERTO:b instruccion:c PARENTESIS_CERRADO:d PUNTO_COMA:e
                    {:

                        ArrayList parentesisA = new ArrayList<>();
                        parentesisA.add(b);
                        Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

                        ArrayList parentesisC = new ArrayList<>();
                        parentesisC.add(d);
                        Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);

                        ArrayList puntoC = new ArrayList<>(); 
                        puntoC.add(e);
                        Nodo punto_coma = new Nodo("punto_coma", puntoC ,aright,aleft);

                        ArrayList tmp = new ArrayList<>();
                        tmp.add(a);
                        tmp.add(parentesis_abierto);
                        tmp.add(c);
                        tmp.add(parentesis_cerrado);
                        tmp.add(punto_coma);

                        RESULT = new Nodo("funcion_printAst",tmp,aright,aleft);

                    :}
                  ;


funcion_getSymbolTable ::= GETSYMBOLTABLE:a PARENTESIS_ABIERTO:b PARENTESIS_CERRADO:c PUNTO_COMA:d
                    {:

                        ArrayList parentesisA = new ArrayList<>();
                        parentesisA.add(b);
                        Nodo parentesis_abierto = new Nodo("parentesis_abierto",parentesisA,aright,aleft);

                        ArrayList parentesisC = new ArrayList<>();
                        parentesisC.add(c);
                        Nodo parentesis_cerrado = new Nodo("parentesis_cerrado",parentesisC,aright,aleft);

                        ArrayList puntoC = new ArrayList<>(); 
                        puntoC.add(d);
                        Nodo punto_coma = new Nodo("punto_coma", puntoC ,aright,aleft);

                        ArrayList tmp = new ArrayList<>();
                        tmp.add(a);
                        tmp.add(parentesis_abierto);
                        tmp.add(parentesis_cerrado);
                        tmp.add(punto_coma);
                        
                        RESULT = new Nodo("funcion_getSymbolTable",tmp,aright,aleft);

                    :}
                     ;

