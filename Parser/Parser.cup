/* Codigo de usuario */

// importaciones y paquetes

package com.peter.typesecure.parser;

import com.peter.typesecure.lexer.Lexer;
import java_cup.runtime.Symbol;
import com.peter.typesecure.error.Error_analizadores;
import java.util.ArrayList;
import com.peter.typesecure.arbol.Nodo;


// Codigo para el parser, variables, metodos

parser code {:

    public Parser(Lexer lexer) {
        super(lexer);
    }

    //Array donde esta toda la produccion
    public ArrayList<Nodo> arbol = new ArrayList<Nodo>();


    //Array errores
    
    public static ArrayList<Error_analizadores> errores = Lexer.errores;

    //Metodo llamado automaticamente al encontrar error sintanctico

    public void syntax_error(Symbol s){

    

    if(s.sym == 0){

    errores.add( new Error_analizadores("Sintactico", "No se esperaba el fin del archivo ") );

    }else{

        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        errores.add( new Error_analizadores("Sintactico", lexema, fila, columna, "No se esperaba este token") );
        //System.out.println("Error Sintactico hallado");
        //System.out.println("Lexema " + lexema + " linea"  + fila + " columna " + columna);
    }

    
    }

    //Metodo llamado cuando no se puede recuperar de un error
    
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 

    
        
    if(s.sym == 0){

    errores.add( new Error_analizadores("Sintactico", "No se esperaba el fin del archivo ") );

    }else{

        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        errores.add( new Error_analizadores("Sintactico", lexema, fila, columna, "No se esperaba este token") );
        //System.out.println("Error Sintactico hallado");
        //System.out.println("Lexema " + lexema + " linea"  + fila + " columna " + columna);
    }
        
    } 

:}

                                                    // CODIGO PARA LAS ACCIONES GRAMATICALES

            /* Declaraciones de terminales y no terminales */

    /* TERMINALES */

/* NUMEROS */

terminal NUMBER;

terminal BIGINT;

/* ID */
terminal ID;

/* TEXTO */
terminal TEXTO;

/* BOOLEANOS */
terminal TRUE,FALSE;

/* TIPOS DE DATOS */
terminal RNUMBER,RBIGINT,RSTRING,RBOOLEAN,RVOID,RCONST,RLET;

/* SIMBOLOS ARITMETICOS */

terminal MAS,MENOS,MULTIPLICACION,MOD,DIVISION,UMENOS;
terminal PARENTESIS_ABIERTO,PARENTESIS_CERRADO;
terminal INCREMENTO,DECREMENTO;

/* ASIGNACION */
terminal ASIGNACION;

/* OPERADORES LOGICOS */
terminal AND, OR, NOT;

/* OPERADORES RELACIONALES */
terminal MENOR_QUE, MENOR_IGUAL, MAYOR_QUE, MAYOR_IGUAL, COMPARACION, DISTINTO;

/* SIMBOLOS DE PUNTUACION*/

terminal PUNTO, COMA, DOS_PUNTOS, PUNTO_COMA;

/* SIMBOLOS DE AGRUPACION */

terminal CORCHETE_ABIERTO, CORCHETE_CERRADO;

/* FUNCIONES */

terminal FUNCTION;

//CONVERSION DE TIPOS
terminal FNUMBER, FBIGINT, FBOOLEAN, FSTRING;

//ACCESO PROPIEDAD
terminal LENGTH, CHARAT;

//MAYUSCULA, MINUSCULA
terminal TOLOWERCASE, TOUPPERCASE;

//ACCIONES VARIAS
terminal CONCAT, CONSOLE, LOG;

//SENTENCIAS DE CONTROL

terminal IF, ELSE, FOR, WHILE, DO, BREAK, CONTINUE, RETURN;

//VALORES ESTATICOS 
terminal MATH, E, PI, SQRT2, ABS, CEIL, COS, SIN, TAN, EXP, FLOOR, POW, SQRT, RANDOM, PRINTAST, GETSYMBOLTABLE;

/* NO TERMINALES */

//no terminal que da inicio a todo
non terminal inicio;

//no terminal que contiene el lenguaje TypeSecure
non terminal ts;

//opciones a ejecutar
non terminal instrucciones, opciones_instrucciones;

//instruccion
non terminal instruccion;

//declaracion de variable
non terminal declaracion_variable, tipo_acceso_variable, id_valor_variable_lista, id_valor_variable;
non terminal tipo_dato_variable, variable_valor;

//asignacion
non terminal asignacion;

//operaciones matematicas
non terminal operaciones_matematicas,funciones_numericas_estaticas;

//incremento decremento
non terminal incremento, decremento;

//funcion incremento decremento
non terminal funcion_incremento_decremento;

//operaciones relacionales
non terminal operaciones_relacionales;

//operaciones logicas
non terminal operaciones_logicas;

        /* FUNCIONES */

//funcion length
non terminal funcion_length;

//funcion number
non terminal funcion_number;

//funcion biging
non terminal funcion_bigint;

//funcion boolean
non terminal funcion_boolean;

//funcion string
non terminal funcion_string;

//funcion charAt
non terminal funcion_char_at;

//funcion toLowerCase
non terminal funcion_to_lower_case;

//funcion toUpperCase
non terminal funcion_to_upper_case;

//funcion concat
non terminal variables_string, funcion_concat;

//funcion console log
non terminal funcion_console_log,lista_instrucciones_console;

//declaracion de funciones
non terminal declaracion_funcion, parametro_funcion_declaracion,parametros_funcion_declaracion, instrucciones_funcion;
non terminal instrucciones_funciones_sin_return,opciones_instrucciones_sin_return;

//funcion return
non terminal funcion_return;

//funcion if
non terminal funcion_if, funcion_else, funcion_else_if, lista_else_if, opciones_if;


//llamada de funciones
non terminal llamada_funcion_asignacion, parametros_funcion_asignacion, llamada_funcion_normal;

//instruccion break
non terminal instruccion_break;

//instruccion continue
non terminal instruccion_continue;

//instruccion for Loop
non terminal funcion_for, accion_asignacion_for;

//instruccion do while
non terminal funcion_do_while;

//instruccion while
non terminal funcion_while;

//funcion printAst
non terminal funcion_printAst;

//funcion getSymbolTable
non terminal funcion_getSymbolTable;

// PRECEDENCIA
precedence left AND;
precedence left OR;
precedence left NOT;
precedence left COMPARACION, MENOR_QUE, MAYOR_QUE,MENOR_IGUAL,MAYOR_IGUAL;
precedence left MAS,MENOS,MOD;
precedence left MULTIPLICACION,DIVISION;
precedence left PARENTESIS_ABIERTO,PARENTESIS_CERRADO;
precedence right UMENOS; 

start with inicio;

/* Reglas sintacticas */
 

// Da inicio a las transiciones

inicio ::= ts:a {: System.out.println("Doc ok"); 
                            ArrayList tmp = new ArrayList<>(); 
                            tmp.add(a);
                            arbol.add(new Nodo("Inicial", tmp ,aright,aleft));
             :}
       ;

ts ::= instrucciones:a {: RESULT = a; :}
   ;

instrucciones ::= instrucciones:a opciones_instrucciones:b {:  
                                                            ArrayList tmp = new ArrayList<>(); 
                                                            tmp.add(a);
                                                            tmp.add(b);
                                                            RESULT = new Nodo("instrucciones", tmp ,aright,aleft); 
                                         :}
                | opciones_instrucciones:a {:  
                                            ArrayList tmp = new ArrayList<>(); 
                                            tmp.add(a);
                                            RESULT = new Nodo("instrucciones", tmp ,aright,aleft); 
                                         :}
               ;

opciones_instrucciones ::= declaracion_variable
                        |  asignacion:a   {: 
                                            ArrayList tmp = new ArrayList<>(); 
                                            tmp.add(a);
                                            RESULT = new Nodo("instruccion", tmp ,aright,aleft); 
                                           :}
                        |  funcion_console_log
                        |  declaracion_funcion
                        |  llamada_funcion_normal
                        |  opciones_if
                        |  funcion_return
                        |  instruccion_break
                        |  instruccion_continue
                        |  funcion_incremento_decremento
                        |  funcion_for
                        |  funcion_while
                        |  funcion_do_while
                        |  funcion_printAst
                        |  funcion_getSymbolTable
                        ;

opciones_instrucciones_sin_return ::= 
                        declaracion_variable
                        |  asignacion:a {: 
                                            RESULT = a;
                                        :}
                        |  funcion_console_log
                        |  declaracion_funcion
                        |  llamada_funcion_normal
                        |  opciones_if
                        |  instruccion_break
                        |  instruccion_continue
                        |  funcion_incremento_decremento
                        |  funcion_for
                        |  funcion_while
                        |  funcion_do_while
                        |  funcion_printAst
                        |  funcion_getSymbolTable
                        ;

asignacion ::= ID:id ASIGNACION:igual variable_valor:value PUNTO_COMA:puntoComa {: 
                                                                                    

                                  ArrayList tmp2 = new ArrayList<>();   
                                  tmp2.add(id);
                                  Nodo nt = new Nodo("Id",tmp2,idright,idleft);
                                  ArrayList tmp = new ArrayList<>(); 
                                  tmp.add(nt);
                                  tmp.add(igual);
                                  tmp.add(value);
                                  tmp.add(puntoComa);
                                  RESULT = new Nodo("asignacion", tmp ,idright,idleft); 
                                                                                :}
            ;

declaracion_variable ::= tipo_acceso_variable:a id_valor_variable_lista:b PUNTO_COMA:c
                        {:



                        :}
                      ;

id_valor_variable_lista ::=  id_valor_variable_lista COMA id_valor_variable
                         |   id_valor_variable
                         ;

id_valor_variable ::= ID:id DOS_PUNTOS tipo_dato_variable:tipoDato ASIGNACION variable_valor:valor 

                    | ID:id ASIGNACION variable_valor:valor {: System.out.println(id + " " + valor); :}
                    | ID:id DOS_PUNTOS tipo_dato_variable:tipoDato {: System.out.println(id + " " + tipoDato + " " + " undefined"); :}
                   ;



tipo_acceso_variable ::= RCONST:rconst {:
                                     ArrayList tmp = new ArrayList<>(); 
                                     tmp.add(rconst);
                                     RESULT = new Nodo("Tipo_Acceso",tmp,rconstright,rconstleft);
                                  :}

                       | RLET:rlet   {: 
                                     ArrayList tmp = new ArrayList<>(); 
                                     tmp.add(rlet);
                                     RESULT = new Nodo("Tipo_Acceso",tmp,rletright,rletleft);
                                  :} 
                      ;

tipo_dato_variable ::= RNUMBER:rnumber  {: 
                                            ArrayList tmp = new ArrayList<>(); 
                                            tmp.add(rnumber);
                                            RESULT = new Nodo("Tipo_Variable",tmp,rnumberright,rnumberleft);
                                  :} 

                    |  RBIGINT:rbigint  {: 
                                            ArrayList tmp = new ArrayList<>(); 
                                            tmp.add(rbigint);
                                            RESULT = new Nodo("Tipo_Variable",tmp,rbigintright,rbigintleft);
                                 :}  
                    |  RSTRING:rstring  {: 
                                            ArrayList tmp = new ArrayList<>(); 
                                            tmp.add(rstring);
                                            RESULT = new Nodo("Tipo_Variable",tmp,rstringright,rstringleft);
                                  :} 

                    |  RBOOLEAN:rboolean {: 
                                            ArrayList tmp = new ArrayList<>(); 
                                            tmp.add(rboolean);
                                            RESULT = new Nodo("Tipo_Variable",tmp,rbooleanright,rbooleanleft);
                                        :}
                    ;

variable_valor ::= instruccion:a {: 
                                    ArrayList tmp = new ArrayList<>(); 
                                    tmp.add(a);
                                    RESULT = new Nodo("valor_de_la_variable",tmp,aright,aleft);
                                 :}
                ;

instruccion ::=  operaciones_matematicas:a {:
                                                ArrayList tmp = new ArrayList<>(); 
                                                tmp.add(a);
                                                RESULT = new Nodo("operacion_matematica",tmp,aright,aleft);

                                           :}
                | operaciones_logicas:a {:
                                                ArrayList tmp = new ArrayList<>(); 
                                                tmp.add(a);
                                                RESULT = new Nodo("operacion_logica",tmp,aright,aleft);
                                      :}
                | funcion_boolean:a {:
                                                ArrayList tmp = new ArrayList<>(); 
                                                tmp.add(a);
                                                RESULT = new Nodo("funcion_boolean",tmp,aright,aleft);
                                 :}
                | funcion_string:a  {:

                                                ArrayList tmp = new ArrayList<>(); 
                                                tmp.add(a);
                                                RESULT = new Nodo("funcion_string",tmp,aright,aleft);
                                  :}
                | funcion_char_at:a {: 
                                                ArrayList tmp = new ArrayList<>(); 
                                                tmp.add(a);
                                                RESULT = new Nodo("funcion_char_at",tmp,aright,aleft);

                                  :}
                | funcion_to_lower_case:a {:
                                                ArrayList tmp = new ArrayList<>(); 
                                                tmp.add(a);
                                                RESULT = new Nodo("funcion_to_lower_case",tmp,aright,aleft);
                                        :}
                | funcion_to_upper_case:a {:
                                                ArrayList tmp = new ArrayList<>(); 
                                                tmp.add(a);
                                                RESULT = new Nodo("funcion_to_upper_case",tmp,aright,aleft);
                                        :}
                | funcion_concat:a {:

                                                ArrayList tmp = new ArrayList<>(); 
                                                tmp.add(a);
                                                RESULT = new Nodo("funcion_concat",tmp,aright,aleft);
                                 :}
                | llamada_funcion_asignacion:a {:
                                                ArrayList tmp = new ArrayList<>(); 
                                                tmp.add(a);
                                                RESULT = new Nodo("llamada_funcion_asignacion",tmp,aright,aleft);
                                              :}
                | incremento:a {:
                                                ArrayList tmp = new ArrayList<>(); 
                                                tmp.add(a);
                                                RESULT = new Nodo("incremento",tmp,aright,aleft);
                             :}
                | decremento:a {:
                                                ArrayList tmp = new ArrayList<>(); 
                                                tmp.add(a);
                                                RESULT = new Nodo("decremento",tmp,aright,aleft);
                             :}
                ;


operaciones_matematicas ::= 
                          MENOS:a operaciones_matematicas:b       
                                        {:
                                             ArrayList tmp = new ArrayList<>(); 
                                             tmp.add(a);
                                             tmp.add(b);
                                             RESULT = new Nodo("operacion_matematica", tmp ,aright,aleft);                                               
                                        :}%prec UMENOS 
                        | MAS:a operaciones_matematicas:b 
                                        {:
                                             ArrayList tmp = new ArrayList<>(); 
                                             tmp.add(a);
                                             tmp.add(b);
                                             RESULT = new Nodo("operacion_matematica", tmp ,aright,aleft);                                               
                                        :}%prec UMENOS 
                        | operaciones_matematicas:a MAS:b operaciones_matematicas:c
                                        {:
                                             ArrayList tmp = new ArrayList<>(); 
                                             tmp.add(a);
                                             tmp.add(b);
                                             tmp.add(c);
                                             RESULT = new Nodo("operacion_matematica", tmp ,aright,aleft);                                               
                                        :}
                        | operaciones_matematicas:a MENOS:b operaciones_matematicas:c
                                        {:
                                             ArrayList tmp = new ArrayList<>(); 
                                             tmp.add(a);
                                             tmp.add(b);
                                             tmp.add(c);
                                             RESULT = new Nodo("operacion_matematica", tmp ,aright,aleft);                                               
                                        :}
                        | operaciones_matematicas:a MULTIPLICACION:b operaciones_matematicas:c
                                        {:
                                             ArrayList tmp = new ArrayList<>(); 
                                             tmp.add(a);
                                             tmp.add(b);
                                             tmp.add(c);
                                             RESULT = new Nodo("operacion_matematica", tmp ,aright,aleft);                                               
                                        :}                        
                        | operaciones_matematicas:a DIVISION:b operaciones_matematicas:c
                                        {:
                                             ArrayList tmp = new ArrayList<>(); 
                                             tmp.add(a);
                                             tmp.add(b);
                                             tmp.add(c);
                                             RESULT = new Nodo("operacion_matematica", tmp ,aright,aleft);                                               
                                        :}
                        | operaciones_matematicas:a MOD:b operaciones_matematicas:c
                                        {:
                                             ArrayList tmp = new ArrayList<>(); 
                                             tmp.add(a);
                                             tmp.add(b);
                                             tmp.add(c);
                                             RESULT = new Nodo("operacion_matematica", tmp ,aright,aleft);                                               
                                        :}
                        | PARENTESIS_ABIERTO:a operaciones_matematicas:b PARENTESIS_CERRADO:c 
                                            {:
                                             ArrayList tmp = new ArrayList<>(); 
                                             tmp.add(a);
                                             tmp.add(b);
                                             tmp.add(c);
                                             RESULT = new Nodo("operaciones_matematicas_parentesis", tmp ,aright,aleft);                                               
                                            :}
                        | funcion_number:a {:
                                             ArrayList tmp = new ArrayList<>(); 
                                             tmp.add(a);
                                             RESULT = new Nodo("funcion_number", tmp ,aright,aleft);                                               
                                           :}
                        | funcion_bigint:a {:
                                             ArrayList tmp = new ArrayList<>(); 
                                             tmp.add(a);
                                             RESULT = new Nodo("funcion_bigint", tmp ,aright,aleft);                       
                                           :}
                        | funcion_length:a {:
                                             ArrayList tmp = new ArrayList<>(); 
                                             tmp.add(a);
                                             RESULT = new Nodo("funcion_length", tmp ,aright,aleft);                       
                                        :}

                        | funciones_numericas_estaticas:a {:
                                     ArrayList tmp = new ArrayList<>(); 
                                     tmp.add(a);
                                     RESULT = new Nodo("funciones_numericas_estaticas", tmp ,aright,aleft);                       
                                                          :}
                        | NUMBER:a {:
                                        ArrayList tmp = new ArrayList<>(); 
                                        tmp.add(a);
                                        RESULT = new Nodo("Number", tmp ,aright,aleft);
                                   :}
                        | BIGINT:a {:
                                        ArrayList tmp = new ArrayList<>(); 
                                        tmp.add(a);
                                        RESULT = new Nodo("BigInt", tmp ,aright,aleft);
                                   :}
                        | ID:a    {: 
                                        ArrayList tmp = new ArrayList<>(); 
                                        tmp.add(a);
                                        Nodo nodoTmp = new Nodo("Id",tmp,aright,aleft);
                                  :}
                        | TEXTO:a {: 
                                        
                                        ArrayList tmp = new ArrayList<>(); 
                                        tmp.add(a);
                                        RESULT = new Nodo("String", tmp ,aright,aleft);
                                  :}
                        ;

funciones_numericas_estaticas ::= MATH:a PUNTO:b ABS:c PARENTESIS_ABIERTO:d operaciones_matematicas:e PARENTESIS_CERRADO:f
                                {:
                                        ArrayList tmp = new ArrayList<>(); 
                                        tmp.add(a);
                                        tmp.add(b);
                                        tmp.add(c);
                                        tmp.add(d);
                                        tmp.add(e);
                                        tmp.add(f);
                                        RESULT = new Nodo("ABS", tmp ,aright,aleft);
                                :}
                               |  MATH:a PUNTO:b CEIL:c   PARENTESIS_ABIERTO:d operaciones_matematicas:e PARENTESIS_CERRADO:f
                                {:
                                        ArrayList tmp = new ArrayList<>(); 
                                        tmp.add(a);
                                        tmp.add(b);
                                        tmp.add(c);
                                        tmp.add(d);
                                        tmp.add(e);
                                        tmp.add(f);
                                        RESULT = new Nodo("CEIL", tmp ,aright,aleft);
                                :}
                               |  MATH:a PUNTO:b COS:c    PARENTESIS_ABIERTO:d operaciones_matematicas:e PARENTESIS_CERRADO:f
                               {:
                                        ArrayList tmp = new ArrayList<>(); 
                                        tmp.add(a);
                                        tmp.add(b);
                                        tmp.add(c);
                                        tmp.add(d);
                                        tmp.add(e);
                                        tmp.add(f);
                                        RESULT = new Nodo("COS", tmp ,aright,aleft);
                               :}
                               |  MATH:a PUNTO:b SIN:c    PARENTESIS_ABIERTO:d operaciones_matematicas:e PARENTESIS_CERRADO:f
                               {:
                                        ArrayList tmp = new ArrayList<>(); 
                                        tmp.add(a);
                                        tmp.add(b);
                                        tmp.add(c);
                                        tmp.add(d);
                                        tmp.add(e);
                                        tmp.add(f);
                                        RESULT = new Nodo("SIN", tmp ,aright,aleft);
                               :}
                               |  MATH:a PUNTO:b TAN:c    PARENTESIS_ABIERTO:d operaciones_matematicas:e PARENTESIS_CERRADO:f
                               {:
                                        ArrayList tmp = new ArrayList<>(); 
                                        tmp.add(a);
                                        tmp.add(b);
                                        tmp.add(c);
                                        tmp.add(d);
                                        tmp.add(e);
                                        tmp.add(f);
                                        RESULT = new Nodo("TAN", tmp ,aright,aleft);

                               :}
                               |  MATH:a PUNTO:b EXP:c    PARENTESIS_ABIERTO:d operaciones_matematicas:e PARENTESIS_CERRADO:f
                                {:
                                        ArrayList tmp = new ArrayList<>(); 
                                        tmp.add(a);
                                        tmp.add(b);
                                        tmp.add(c);
                                        tmp.add(d);
                                        tmp.add(e);
                                        tmp.add(f);
                                        RESULT = new Nodo("EXP", tmp ,aright,aleft);

                                :}
                               |  MATH:a PUNTO:b FLOOR:c  PARENTESIS_ABIERTO:d operaciones_matematicas:e PARENTESIS_CERRADO:f
                                {:
                                        ArrayList tmp = new ArrayList<>(); 
                                        tmp.add(a);
                                        tmp.add(b);
                                        tmp.add(c);
                                        tmp.add(d);
                                        tmp.add(e);
                                        tmp.add(f);
                                        RESULT = new Nodo("FLOOR", tmp ,aright,aleft);

                                :}
                               |  MATH:a PUNTO:b POW:c    PARENTESIS_ABIERTO:d operaciones_matematicas:e COMA:f operaciones_matematicas:g PARENTESIS_CERRADO:h
                                {:
                                        ArrayList tmp = new ArrayList<>(); 
                                        tmp.add(a);
                                        tmp.add(b);
                                        tmp.add(c);
                                        tmp.add(d);
                                        tmp.add(e);
                                        tmp.add(f);
                                        tmp.add(g);
                                        tmp.add(h);
                                        RESULT = new Nodo("POW", tmp ,aright,aleft);

                                :}
                               |  MATH:a PUNTO:b SQRT:c   PARENTESIS_ABIERTO:d operaciones_matematicas:e PARENTESIS_CERRADO:f
                                {:
                                        ArrayList tmp = new ArrayList<>(); 
                                        tmp.add(a);
                                        tmp.add(b);
                                        tmp.add(c);
                                        tmp.add(d);
                                        tmp.add(e);
                                        tmp.add(f);
                                        RESULT = new Nodo("SQRT", tmp ,aright,aleft);

                                :}
                               |  MATH:a PUNTO:b RANDOM:c PARENTESIS_ABIERTO:d operaciones_matematicas:e PARENTESIS_CERRADO:f
                                {:
                                        ArrayList tmp = new ArrayList<>(); 
                                        tmp.add(a);
                                        tmp.add(b);
                                        tmp.add(c);
                                        tmp.add(d);
                                        tmp.add(e);
                                        tmp.add(f);
                                        RESULT = new Nodo("RANDOM", tmp ,aright,aleft);

                                :}
                               |  MATH:a PUNTO:b E:c
                                {:
                                        ArrayList tmp = new ArrayList<>(); 
                                        tmp.add(a);
                                        tmp.add(b);
                                        tmp.add(c);
                                        RESULT = new Nodo("E", tmp ,aright,aleft);

                                :}
                               |  MATH:a PUNTO:b PI:c
                                {:
                                        ArrayList tmp = new ArrayList<>(); 
                                        tmp.add(a);
                                        tmp.add(b);
                                        tmp.add(c);
                                        RESULT = new Nodo("PI", tmp ,aright,aleft);

                                :}
                               |  MATH:a PUNTO:b SQRT2:c
                                {:
                                        ArrayList tmp = new ArrayList<>(); 
                                        tmp.add(a);
                                        tmp.add(b);
                                        tmp.add(c);
                                        RESULT = new Nodo("SQRT2", tmp ,aright,aleft);

                                :}
                              ;

incremento ::= ID:id INCREMENTO:incremento
                {:
                    ArrayList tmp2 = new ArrayList<>();   
                    tmp2.add(id);
                    Nodo nt = new Nodo("Id",tmp2,idright,idleft);

                    ArrayList tmp = new ArrayList<>(); 
                    tmp.add(nt);
                    tmp.add(incremento);
                    RESULT = new Nodo("incremento", tmp ,incrementoright,incrementoleft); 
                :}

           ;

decremento ::= ID:id DECREMENTO:decremento
                {:
                    ArrayList tmp2 = new ArrayList<>();   
                    tmp2.add(id);
                    Nodo nt = new Nodo("Id",tmp2,idright,idleft);

                    ArrayList tmp = new ArrayList<>(); 
                    tmp.add(nt);
                    tmp.add(decremento);
                    RESULT = new Nodo("decremento", tmp ,decrementoright,decrementoleft); 
                :}
            ;

funcion_incremento_decremento ::= ID:a INCREMENTO:b PUNTO_COMA:c
                {:
                    ArrayList tmp2 = new ArrayList<>();   
                    tmp2.add(a);
                    Nodo nt = new Nodo("Id",tmp2,aright,aleft);

                    ArrayList tmp = new ArrayList<>(); 
                    tmp.add(nt);
                    tmp.add(b);
                    tmp.add(c);
                    RESULT = new Nodo("funcion_incremento", tmp ,bright,bleft); 
                :}

               |  ID:a DECREMENTO:b PUNTO_COMA:c
               {:
                    ArrayList tmp2 = new ArrayList<>();   
                    tmp2.add(a);
                    Nodo nt = new Nodo("Id",tmp2,aright,aleft);

                    ArrayList tmp = new ArrayList<>(); 
                    tmp.add(nt);
                    tmp.add(b);
                    tmp.add(c);
                    RESULT = new Nodo("funcion_decremento", tmp ,bright,bleft); 
                :}
                       ;

operaciones_relacionales ::= operaciones_matematicas:a MAYOR_QUE:b operaciones_matematicas:c
                            {:
                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(b);
                                tmp.add(c);
                                RESULT = new Nodo("mayor_que", tmp ,aright,aleft); 
                            :}
                           | operaciones_matematicas:a MAYOR_IGUAL:b operaciones_matematicas:c
                            {:
                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(b);
                                tmp.add(c);
                                RESULT = new Nodo("mayor_igual", tmp ,aright,aleft); 
                            :}
                           | operaciones_matematicas:a MENOR_QUE:b operaciones_matematicas:c
                            {:
                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(b);
                                tmp.add(c);
                                RESULT = new Nodo("menor_que", tmp ,aright,aleft); 
                            :}
                           | operaciones_matematicas:a MENOR_IGUAL:b operaciones_matematicas:c
                            {:
                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(b);
                                tmp.add(c);
                                RESULT = new Nodo("menor_igual", tmp ,aright,aleft); 
                            :}
                           | operaciones_matematicas:a COMPARACION:b operaciones_matematicas:c
                            {:
                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(b);
                                tmp.add(c);
                                RESULT = new Nodo("comparacion", tmp ,aright,aleft); 
                            :}
                           | operaciones_matematicas:a DISTINTO:b operaciones_matematicas:c
                            {:
                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(b);
                                tmp.add(c);
                                RESULT = new Nodo("distinto", tmp ,aright,aleft); 
                            :}

                           | TRUE:a COMPARACION:b TRUE:c
                            {:
                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(b);
                                tmp.add(c);
                                RESULT = new Nodo("comparacion", tmp ,aright,aleft); 
                            :}
                           | TRUE:a COMPARACION:b FALSE:c
                            {:
                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(b);
                                tmp.add(c);
                                RESULT = new Nodo("comparacion", tmp ,aright,aleft); 
                            :}
                           | FALSE:a COMPARACION:b TRUE:c
                            {:
                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(b);
                                tmp.add(c);
                                RESULT = new Nodo("comparacion", tmp ,aright,aleft); 
                            :}
                           | FALSE:a COMPARACION:b FALSE:c
                            {:
                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(b);
                                tmp.add(c);
                                RESULT = new Nodo("comparacion", tmp ,aright,aleft); 
                            :}
                           | operaciones_matematicas:a COMPARACION:b TRUE:c
                            {:
                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(b);
                                tmp.add(c);
                                RESULT = new Nodo("comparacion", tmp ,aright,aleft); 
                            :}
                           | TRUE:a COMPARACION:b operaciones_matematicas:c
                            {:
                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(b);
                                tmp.add(c);
                                RESULT = new Nodo("comparacion", tmp ,aright,aleft); 
                            :}
                           | operaciones_matematicas:a COMPARACION:b FALSE:c
                            {:
                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(b);
                                tmp.add(c);
                                RESULT = new Nodo("comparacion", tmp ,aright,aleft); 
                            :}
                           | FALSE:a COMPARACION:b operaciones_matematicas:c
                            {:
                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(b);
                                tmp.add(c);
                                RESULT = new Nodo("comparacion", tmp ,aright,aleft); 
                            :}

                           | TRUE:a DISTINTO:b TRUE:c
                            {:
                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(b);
                                tmp.add(c);
                                RESULT = new Nodo("distinto", tmp ,aright,aleft); 
                            :}
                           | TRUE:a DISTINTO:b FALSE:c
                            {:
                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(b);
                                tmp.add(c);
                                RESULT = new Nodo("distinto", tmp ,aright,aleft); 
                            :}
                           | FALSE:a DISTINTO:b TRUE:c
                            {:
                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(b);
                                tmp.add(c);
                                RESULT = new Nodo("distinto", tmp ,aright,aleft); 
                            :}
                           | FALSE:a DISTINTO:b FALSE:c
                            {:
                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(b);
                                tmp.add(c);
                                RESULT = new Nodo("distinto", tmp ,aright,aleft); 
                            :}
                           | operaciones_matematicas:a DISTINTO:b TRUE:c
                            {:
                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(b);
                                tmp.add(c);
                                RESULT = new Nodo("distinto", tmp ,aright,aleft); 
                            :}
                           | TRUE:a DISTINTO:b operaciones_matematicas:c
                            {:
                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(b);
                                tmp.add(c);
                                RESULT = new Nodo("distinto", tmp ,aright,aleft); 
                            :}
                           | operaciones_matematicas:a DISTINTO:b FALSE:c
                            {:
                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(b);
                                tmp.add(c);
                                RESULT = new Nodo("distinto", tmp ,aright,aleft); 
                            :}
                           | FALSE:a DISTINTO:b operaciones_matematicas:c
                            {:
                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(b);
                                tmp.add(c);
                                RESULT = new Nodo("distinto", tmp ,aright,aleft); 
                            :}
                       
                           | TRUE:a 
                           {:
                                        ArrayList tmp = new ArrayList<>(); 
                                        tmp.add(a);
                                        RESULT = new Nodo("Boolean",tmp,aright,aleft);
                           :}
                           | FALSE:a 
                           {:
                                        ArrayList tmp = new ArrayList<>(); 
                                        tmp.add(a);
                                        RESULT =  new Nodo("Boolean",tmp,aright,aleft);
                           :}


                           
                           | funcion_boolean:a COMPARACION:b TRUE:c
                            {:
                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(b);
                                tmp.add(c);
                                RESULT = new Nodo("comparacion", tmp ,aright,aleft); 
                            :}

                           | funcion_boolean:a COMPARACION:b FALSE:c
                            {:
                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(b);
                                tmp.add(c);
                                RESULT = new Nodo("comparacion", tmp ,aright,aleft); 
                            :}
                           | TRUE:a COMPARACION:b funcion_boolean:c
                            {:
                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(b);
                                tmp.add(c);
                                RESULT = new Nodo("comparacion", tmp ,aright,aleft); 
                            :}
                           | FALSE:a COMPARACION:b funcion_boolean:c
                            {:
                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(b);
                                tmp.add(c);
                                RESULT = new Nodo("comparacion", tmp ,aright,aleft); 
                            :}


                           | funcion_boolean:a DISTINTO:b TRUE:c
                            {:
                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(b);
                                tmp.add(c);
                                RESULT = new Nodo("distinto", tmp ,aright,aleft); 
                            :}
                           | funcion_boolean:a DISTINTO:b FALSE:c
                            {:
                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(b);
                                tmp.add(c);
                                RESULT = new Nodo("distinto", tmp ,aright,aleft); 
                            :}
                           | TRUE:a DISTINTO:b funcion_boolean:c
                            {:
                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(b);
                                tmp.add(c);
                                RESULT = new Nodo("distinto", tmp ,aright,aleft); 
                            :}
                           | FALSE:a DISTINTO:b funcion_boolean:c
                            {:
                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(b);
                                tmp.add(c);
                                RESULT = new Nodo("distinto", tmp ,aright,aleft); 
                            :}


                           | funcion_boolean:a COMPARACION:b funcion_boolean:c
                            {:
                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(b);
                                tmp.add(c);
                                RESULT = new Nodo("comparacion", tmp ,aright,aleft); 
                            :}
                           | funcion_boolean:a DISTINTO:b funcion_boolean:c
                            {:
                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(b);
                                tmp.add(c);
                                RESULT = new Nodo("distinto", tmp ,aright,aleft); 
                            :}

                           | funcion_string:a COMPARACION:b funcion_string:c
                            {:
                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(b);
                                tmp.add(c);
                                RESULT = new Nodo("comparacion", tmp ,aright,aleft); 
                            :}
                           | funcion_string:a DISTINTO:b funcion_string:c
                            {:
                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(b);
                                tmp.add(c);
                                RESULT = new Nodo("distinto", tmp ,aright,aleft); 
                            :}

                           | funcion_string:a COMPARACION:b operaciones_matematicas:c
                            {:
                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(b);
                                tmp.add(c);
                                RESULT = new Nodo("comparacion", tmp ,aright,aleft); 
                            :}

                           | funcion_string:a DISTINTO:b operaciones_matematicas:c
                            {:
                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(b);
                                tmp.add(c);
                                RESULT = new Nodo("distinto", tmp ,aright,aleft); 
                            :}

                           | operaciones_matematicas:a COMPARACION:b funcion_string:c
                                                       {:
                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(b);
                                tmp.add(c);
                                RESULT = new Nodo("comparacion", tmp ,aright,aleft); 
                            :}

                           | operaciones_matematicas:a DISTINTO:b funcion_string:c
                            {:
                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(b);
                                tmp.add(c);
                                RESULT = new Nodo("distinto", tmp ,aright,aleft); 
                            :}

                           | PARENTESIS_ABIERTO:a operaciones_relacionales:b PARENTESIS_CERRADO:c
                            {:
                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(b);
                                tmp.add(c);
                                RESULT = new Nodo("operaciones_relacionales_parentesis", tmp ,aright,aleft); 
                            :}
                          ;  

operaciones_logicas ::= operaciones_logicas:a AND:b operaciones_logicas:c
                            {:
                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(b);
                                tmp.add(c);
                                RESULT = new Nodo("AND", tmp ,aright,aleft); 
                            :}
                    | operaciones_logicas:a OR:b operaciones_logicas:c
                            {:
                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(b);
                                tmp.add(c);
                                RESULT = new Nodo("OR", tmp ,aright,aleft); 
                            :}
                    | NOT:a operaciones_logicas:b
                            {:
                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(b);
                                RESULT = new Nodo("NOT", tmp ,aright,aleft); 
                            :}
                    | PARENTESIS_ABIERTO:a operaciones_logicas:b PARENTESIS_CERRADO:c
                            {:
                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);
                                tmp.add(b);
                                tmp.add(c);
                                RESULT = new Nodo("operaciones_logicas_parentesis", tmp ,aright,aleft); 
                            :}
                    | operaciones_relacionales:a
                            {:
                                ArrayList tmp = new ArrayList<>(); 
                                tmp.add(a);                                
                                RESULT = new Nodo("operaciones_relacionales", tmp ,aright,aleft); 
                            :}

                    ;

funcion_length ::= TEXTO PUNTO LENGTH
                |  ID PUNTO LENGTH
                |  variables_string PUNTO LENGTH
                ;


funcion_number ::= FNUMBER PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO
                |  FNUMBER PARENTESIS_ABIERTO operaciones_logicas PARENTESIS_CERRADO
                |  FNUMBER PARENTESIS_ABIERTO TEXTO PARENTESIS_CERRADO
                ;

funcion_bigint  ::= FBIGINT PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO
                |   FBIGINT PARENTESIS_ABIERTO operaciones_logicas PARENTESIS_CERRADO
                |   FBIGINT PARENTESIS_ABIERTO TEXTO PARENTESIS_CERRADO
                ;


funcion_boolean  ::= FBOOLEAN PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO
                 |   FBOOLEAN PARENTESIS_ABIERTO operaciones_logicas PARENTESIS_CERRADO
                 |   FBOOLEAN PARENTESIS_ABIERTO TEXTO PARENTESIS_CERRADO
                 ;


funcion_string  ::= FSTRING PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO
                 |  FSTRING PARENTESIS_ABIERTO operaciones_logicas PARENTESIS_CERRADO
                 |  FSTRING PARENTESIS_ABIERTO TEXTO PARENTESIS_CERRADO
                 ;

funcion_char_at ::= ID PUNTO CHARAT PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO
                |   TEXTO PUNTO CHARAT PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO
                ;


funcion_concat ::= variables_string PUNTO CONCAT PARENTESIS_ABIERTO instruccion PARENTESIS_CERRADO  
                |  TEXTO PUNTO CONCAT PARENTESIS_ABIERTO instruccion PARENTESIS_CERRADO  
                |  ID PUNTO CONCAT PARENTESIS_ABIERTO instruccion PARENTESIS_CERRADO  
                ;

variables_string ::= funcion_string
                 |  funcion_char_at   
                 |  funcion_to_lower_case
                 |  funcion_to_upper_case
                 |  funcion_concat
                 |  llamada_funcion_asignacion
                 ;


funcion_to_lower_case ::= ID PUNTO TOLOWERCASE PARENTESIS_ABIERTO PARENTESIS_CERRADO
                       |  TEXTO PUNTO TOLOWERCASE PARENTESIS_ABIERTO PARENTESIS_CERRADO
                       |  variables_string PUNTO TOLOWERCASE PARENTESIS_ABIERTO PARENTESIS_CERRADO
                       ;

funcion_to_upper_case ::= ID PUNTO TOUPPERCASE PARENTESIS_ABIERTO PARENTESIS_CERRADO
                       |  TEXTO PUNTO TOUPPERCASE PARENTESIS_ABIERTO PARENTESIS_CERRADO
                       |  variables_string PUNTO TOUPPERCASE PARENTESIS_ABIERTO PARENTESIS_CERRADO
                       ;

funcion_console_log ::= CONSOLE PUNTO LOG PARENTESIS_ABIERTO lista_instrucciones_console:a PARENTESIS_CERRADO PUNTO_COMA {: System.out.println(a); :}
            ;

lista_instrucciones_console ::= lista_instrucciones_console COMA instruccion:a {: RESULT = a; :}
                             |  instruccion:a {: RESULT = a; :}
                             ;

 

declaracion_funcion ::= 

 FUNCTION ID PARENTESIS_ABIERTO PARENTESIS_CERRADO DOS_PUNTOS RVOID CORCHETE_ABIERTO instrucciones_funciones_sin_return CORCHETE_CERRADO

|FUNCTION ID PARENTESIS_ABIERTO parametros_funcion_declaracion PARENTESIS_CERRADO DOS_PUNTOS RVOID CORCHETE_ABIERTO instrucciones_funciones_sin_return CORCHETE_CERRADO

|FUNCTION ID PARENTESIS_ABIERTO PARENTESIS_CERRADO CORCHETE_ABIERTO instrucciones_funcion CORCHETE_CERRADO

|FUNCTION ID PARENTESIS_ABIERTO parametros_funcion_declaracion PARENTESIS_CERRADO CORCHETE_ABIERTO instrucciones_funcion CORCHETE_CERRADO

|FUNCTION ID PARENTESIS_ABIERTO PARENTESIS_CERRADO DOS_PUNTOS tipo_dato_variable CORCHETE_ABIERTO instrucciones_funcion CORCHETE_CERRADO

|FUNCTION ID PARENTESIS_ABIERTO parametros_funcion_declaracion PARENTESIS_CERRADO  DOS_PUNTOS tipo_dato_variable  CORCHETE_ABIERTO instrucciones_funcion CORCHETE_CERRADO
        
                    ;


instrucciones_funciones_sin_return ::= instrucciones_funciones_sin_return opciones_instrucciones_sin_return 
                                    | opciones_instrucciones_sin_return
                                    ;


instrucciones_funcion ::= instrucciones
                       |
                       ;

parametros_funcion_declaracion ::= parametros_funcion_declaracion COMA parametro_funcion_declaracion
                    |  parametro_funcion_declaracion
                    ;

parametro_funcion_declaracion ::= ID DOS_PUNTOS tipo_dato_variable
                                ;


funcion_return ::= RETURN instruccion PUNTO_COMA
                | RETURN PUNTO_COMA
                ;

llamada_funcion_asignacion ::= ID PARENTESIS_ABIERTO PARENTESIS_CERRADO 
                            |  ID PARENTESIS_ABIERTO parametros_funcion_asignacion PARENTESIS_CERRADO 
                            ;

parametros_funcion_asignacion ::= parametros_funcion_asignacion COMA instruccion
                               |  instruccion
                               ;



llamada_funcion_normal ::= ID PARENTESIS_ABIERTO PARENTESIS_CERRADO PUNTO_COMA
                        |  ID PARENTESIS_ABIERTO instruccion PARENTESIS_CERRADO PUNTO_COMA
                        ;

funcion_if ::= IF PARENTESIS_ABIERTO instruccion PARENTESIS_CERRADO CORCHETE_ABIERTO instrucciones_funcion CORCHETE_CERRADO
            ;

funcion_else ::= ELSE CORCHETE_ABIERTO instrucciones_funcion CORCHETE_CERRADO
              ;  


funcion_else_if ::= ELSE IF PARENTESIS_ABIERTO instruccion PARENTESIS_CERRADO CORCHETE_ABIERTO instrucciones_funcion CORCHETE_CERRADO
                ;

lista_else_if ::= lista_else_if funcion_else_if
                | funcion_else_if
                ;

opciones_if ::=  funcion_if
                | funcion_if funcion_else
                | funcion_if lista_else_if funcion_else
                | funcion_if lista_else_if
                ;


instruccion_break ::= BREAK PUNTO_COMA
                  ;


instruccion_continue ::= CONTINUE PUNTO_COMA
                     ;


funcion_for ::= 
FOR PARENTESIS_ABIERTO declaracion_variable operaciones_logicas PUNTO_COMA accion_asignacion_for  PARENTESIS_CERRADO CORCHETE_ABIERTO instrucciones_funcion CORCHETE_CERRADO
|FOR PARENTESIS_ABIERTO asignacion operaciones_logicas PUNTO_COMA accion_asignacion_for  PARENTESIS_CERRADO CORCHETE_ABIERTO instrucciones_funcion CORCHETE_CERRADO
            ;


accion_asignacion_for ::= ID INCREMENTO
                       | ID DECREMENTO
                       | ID ASIGNACION instruccion
                       ;


funcion_while ::= WHILE PARENTESIS_ABIERTO instruccion PARENTESIS_CERRADO CORCHETE_ABIERTO instrucciones_funcion CORCHETE_CERRADO
              ;


funcion_do_while ::= DO CORCHETE_ABIERTO instrucciones_funcion CORCHETE_CERRADO WHILE PARENTESIS_ABIERTO instruccion PARENTESIS_CERRADO PUNTO_COMA
                  ;


funcion_printAst ::= PRINTAST PARENTESIS_ABIERTO instruccion PARENTESIS_CERRADO PUNTO_COMA
                  ;


funcion_getSymbolTable ::= GETSYMBOLTABLE PARENTESIS_ABIERTO PARENTESIS_CERRADO PUNTO_COMA
                        ;

