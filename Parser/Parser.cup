/* Codigo de usuario */

// importaciones y paquetes

package com.peter.typesecure.parser;

import com.peter.typesecure.lexer.Lexer;
import java_cup.runtime.Symbol;


// Codigo para el parser, variables, metodos

parser code {:

    public Parser(Lexer lexer) {
        super(lexer);
    }

    //Metodo llamado automaticamente al encontrar error sintanctico


    public void syntax_error(Symbol s){

    String lexema = s.value.toString();
    int fila = s.right;
    int columna = s.left;
    
    System.out.println("Error Sintactico hallado");
    System.out.println("Lexema " + lexema + " linea"  + fila + " columna " + columna);

    }

    //Metodo llamado cuando no se puede recuperar de un error
    
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        
    String lexema = s.value.toString();
    int fila = s.right;
    int columna = s.left;
    
    System.out.println("Error Sintactico hallado PANIC MODE");
    System.out.println("Lexema " + lexema + " linea"  + fila + " columna " + columna);
        
    }

:}

                                                    // CODIGO PARA LAS ACCIONES GRAMATICALES

            /* Declaraciones de terminales y no terminales */

    /* TERMINALES */

/* NUMEROS */

terminal NUMBER;

terminal BIGINT;

/* ID */
terminal ID;

/* TEXTO */
terminal TEXTO;

/* BOOLEANOS */
terminal TRUE,FALSE;

/* TIPOS DE DATOS */
terminal RNUMBER,RBIGINT,RSTRING,RBOOLEAN,RVOID,RCONST,RLET;

/* SIMBOLOS ARITMETICOS */

terminal MAS,MENOS,MULTIPLICACION,DIVISION,MOD,UMENOS;
terminal PARENTESIS_ABIERTO,PARENTESIS_CERRADO;
terminal INCREMENTO,DECREMENTO;

/* ASIGNACION */
terminal ASIGNACION;

/* OPERADORES LOGICOS */
terminal AND, OR, NOT;

/* OPERADORES RELACIONALES */
terminal MENOR_QUE, MENOR_IGUAL, MAYOR_QUE, MAYOR_IGUAL, COMPARACION, DISTINTO;

/* SIMBOLOS DE PUNTUACION*/

terminal PUNTO, COMA, DOS_PUNTOS, PUNTO_COMA;

/* SIMBOLOS DE AGRUPACION */

terminal CORCHETE_ABIERTO, CORCHETE_CERRADO;

/* FUNCIONES */

terminal FUNCTION;

//CONVERSION DE TIPOS
terminal FNUMBER, FBIGINT, FBOOLEAN, FSTRING;

//ACCESO PROPIEDAD
terminal LENGTH, CHARAT;

//MAYUSCULA, MINUSCULA
terminal TOLOWERCASE, TOUPPERCASE;

//ACCIONES VARIAS
terminal CONCAT, CONSOLELOG;

//SENTENCIAS DE CONTROL

terminal IF, ELSE, FOR, WHILE, DO, BREAK, CONTINUE, RETURN;

//VALORES ESTATICOS 
terminal MATHE, MATHPI, MATHSQRT2, MATHABS, MATHCEIL, MATHCCOS, MATHSIN, MATHTAN, MATHEXP, MATHFLOOR, MATHPOW, MATHSQRT, MATHRANDOM, PRINTAST, GETSYMBOLTABLE;

/* NO TERMINALES */

//no terminal que da inicio a todo
non terminal inicio;

//no terminal que contiene el lenguaje TypeSecure
non terminal ts;

//declaracion de variable
non terminal declaracion_variables,declaracion_variable, tipo_acceso_variable, id_valor_variable_lista, id_valor_variable;
non terminal tipo_dato_variable, variable_valor;

// PRECEDENCIA
precedence left MAS,MENOS;
precedence left MULTIPLICACION,DIVISION;
precedence left PARENTESIS_ABIERTO,PARENTESIS_CERRADO;
precedence right UMENOS; 


start with inicio;

/* Reglas sintacticas */
 

// Da inicio a las transiciones

inicio ::= ts
       ;


ts ::= declaracion_variables
   ;

declaracion_variables ::= declaracion_variable declaracion_variables
                        | declaracion_variable
                       ;

declaracion_variable ::= tipo_acceso_variable id_valor_variable_lista PUNTO_COMA
                      ;

id_valor_variable_lista ::=  id_valor_variable_lista COMA id_valor_variable
                         |   id_valor_variable
                         ;

id_valor_variable ::= ID:id DOS_PUNTOS tipo_dato_variable:tipoDato ASIGNACION variable_valor:valor {: System.out.println(id + " " + tipoDato + " " + valor); :}
                    | ID:id ASIGNACION variable_valor:valor {: System.out.println(id + " " + valor); :}
                    | ID:id DOS_PUNTOS tipo_dato_variable:tipoDato {: System.out.println(id + " " + tipoDato + " " + " undefined"); :}
                   ;



tipo_acceso_variable ::= RCONST:a {: RESULT = a; :} 
                       | RLET:a   {: RESULT = a; :} 
                      ;

tipo_dato_variable ::= RNUMBER:a {: RESULT = a; :} 
                    |  RBIGINT:a {: RESULT = a; :}
                    |  RSTRING:a {: RESULT = a; :}
                    | RBOOLEAN:a {: RESULT = a; :}
                    ;

variable_valor ::= NUMBER:a  {: RESULT = a; :}
                |  BIGINT:a  {: RESULT = a; :}
                |  TRUE:a    {: RESULT = a; :}
                |  FALSE:a   {: RESULT = a; :}
                |  TEXTO:a   {: RESULT = a; :}
                ;    