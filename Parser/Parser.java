
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.peter.typesecure.parser;

import com.peter.typesecure.analisis.ejecucion.auxiliares.*;
import com.peter.typesecure.ejecucion.Condicionales.*;
import com.peter.typesecure.ejecucion.Genericos.*;
import com.peter.typesecure.ejecucion.instrucciones.*;
import com.peter.typesecure.ejecucion.instrucciones.functions.*;
import com.peter.typesecure.lexer.Lexer;
import java_cup.runtime.Symbol;
import com.peter.typesecure.error.Error_analizadores;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.Map;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\341\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\004\004\000\002\004\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\047\003\000\002\047\003\000" +
    "\002\047\003\000\002\047\003\000\002\047\003\000\002" +
    "\047\003\000\002\047\003\000\002\047\003\000\002\047" +
    "\003\000\002\047\003\000\002\047\003\000\002\047\003" +
    "\000\002\047\003\000\002\047\003\000\002\015\006\000" +
    "\002\007\005\000\002\012\005\000\002\012\003\000\002" +
    "\011\007\000\002\011\005\000\002\011\005\000\002\010" +
    "\003\000\002\010\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\014\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\016\004\000\002\016\004\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\005\000\002\016\006\000\002\017\010\000\002" +
    "\017\010\000\002\017\010\000\002\017\010\000\002\017" +
    "\010\000\002\017\010\000\002\017\010\000\002\017\012" +
    "\000\002\017\010\000\002\017\007\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\020\004\000\002" +
    "\021\004\000\002\022\005\000\002\022\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\003\000\002" +
    "\023\003\000\002\023\005\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\024\005\000\002\024\005" +
    "\000\002\024\004\000\002\024\004\000\002\024\005\000" +
    "\002\024\003\000\002\025\005\000\002\025\005\000\002" +
    "\025\005\000\002\025\007\000\002\025\010\000\002\026" +
    "\006\000\002\026\006\000\002\026\006\000\002\027\006" +
    "\000\002\027\006\000\002\027\006\000\002\030\006\000" +
    "\002\030\006\000\002\030\006\000\002\031\006\000\002" +
    "\031\006\000\002\031\006\000\002\032\010\000\002\032" +
    "\010\000\002\032\010\000\002\032\012\000\002\032\013" +
    "\000\002\033\003\000\002\037\010\000\002\037\010\000" +
    "\002\037\010\000\002\037\012\000\002\037\013\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\034\007\000\002\034\007" +
    "\000\002\034\007\000\002\034\011\000\002\034\012\000" +
    "\002\035\007\000\002\035\007\000\002\035\007\000\002" +
    "\035\011\000\002\035\012\000\002\040\011\000\002\041" +
    "\005\000\002\041\003\000\002\042\013\000\002\042\014" +
    "\000\002\042\011\000\002\042\012\000\002\042\013\000" +
    "\002\042\014\000\002\046\004\000\002\046\003\000\002" +
    "\045\003\000\002\045\002\000\002\044\005\000\002\044" +
    "\003\000\002\043\005\000\002\050\005\000\002\050\004" +
    "\000\002\056\005\000\002\056\003\000\002\057\006\000" +
    "\002\057\007\000\002\051\011\000\002\052\006\000\002" +
    "\053\012\000\002\054\004\000\002\054\003\000\002\055" +
    "\003\000\002\055\004\000\002\055\005\000\002\055\004" +
    "\000\002\060\004\000\002\061\004\000\002\062\014\000" +
    "\002\062\014\000\002\063\003\000\002\063\003\000\002" +
    "\063\005\000\002\065\011\000\002\064\013\000\002\066" +
    "\007\000\002\067\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01e1\000\036\006\021\017\032\020\045\053\017\065" +
    "\016\067\020\071\041\072\012\073\024\074\031\075\010" +
    "\076\013\115\030\116\046\001\002\000\042\002\ufff9\006" +
    "\ufff9\017\ufff9\020\ufff9\052\ufff9\053\ufff9\065\ufff9\067\ufff9" +
    "\071\ufff9\072\ufff9\073\ufff9\074\ufff9\075\ufff9\076\ufff9\115" +
    "\ufff9\116\ufff9\001\002\000\042\002\ufff7\006\ufff7\017\ufff7" +
    "\020\ufff7\052\ufff7\053\ufff7\065\ufff7\067\ufff7\071\ufff7\072" +
    "\ufff7\073\ufff7\074\ufff7\075\ufff7\076\ufff7\115\ufff7\116\ufff7" +
    "\001\002\000\004\002\000\001\002\000\040\002\uffff\006" +
    "\021\017\032\020\045\053\017\065\016\067\020\071\041" +
    "\072\012\073\024\074\031\075\010\076\013\115\030\116" +
    "\046\001\002\000\004\050\u01e3\001\002\000\042\002\ufff8" +
    "\006\ufff8\017\ufff8\020\ufff8\052\ufff8\053\ufff8\065\ufff8\067" +
    "\ufff8\071\ufff8\072\ufff8\073\ufff8\074\ufff8\075\ufff8\076\ufff8" +
    "\115\ufff8\116\ufff8\001\002\000\004\027\u01dd\001\002\000" +
    "\042\004\106\005\071\006\100\007\113\010\076\011\111" +
    "\021\117\022\061\027\063\036\073\050\u01db\054\104\055" +
    "\070\056\116\057\102\077\103\001\002\000\004\006\u01d0" +
    "\001\002\000\042\002\ufffa\006\ufffa\017\ufffa\020\ufffa\052" +
    "\ufffa\053\ufffa\065\ufffa\067\ufffa\071\ufffa\072\ufffa\073\ufffa" +
    "\074\ufffa\075\ufffa\076\ufffa\115\ufffa\116\ufffa\001\002\000" +
    "\004\045\u01c5\001\002\000\004\006\u018e\001\002\000\004" +
    "\027\u0188\001\002\000\012\027\u017f\031\u0180\032\u017e\033" +
    "\u016c\001\002\000\042\002\ufffb\006\ufffb\017\ufffb\020\ufffb" +
    "\052\ufffb\053\ufffb\065\ufffb\067\ufffb\071\ufffb\072\ufffb\073" +
    "\ufffb\074\ufffb\075\ufffb\076\ufffb\115\ufffb\116\ufffb\001\002" +
    "\000\042\002\ufffd\006\ufffd\017\ufffd\020\ufffd\052\ufffd\053" +
    "\ufffd\065\ufffd\067\ufffd\071\ufffd\072\ufffd\073\ufffd\074\ufffd" +
    "\075\ufffd\076\ufffd\115\ufffd\116\ufffd\001\002\000\004\051" +
    "\u0176\001\002\000\004\002\u0175\001\002\000\042\002\uffef" +
    "\006\uffef\017\uffef\020\uffef\052\uffef\053\uffef\065\uffef\067" +
    "\uffef\071\uffef\072\uffef\073\uffef\074\uffef\075\uffef\076\uffef" +
    "\115\uffef\116\uffef\001\002\000\042\002\ufff2\006\ufff2\017" +
    "\ufff2\020\ufff2\052\ufff2\053\ufff2\065\ufff2\067\ufff2\071\ufff2" +
    "\072\ufff2\073\ufff2\074\ufff2\075\ufff2\076\ufff2\115\ufff2\116" +
    "\ufff2\001\002\000\004\027\u0171\001\002\000\004\050\u0170" +
    "\001\002\000\004\006\uffd8\001\002\000\042\002\ufff5\006" +
    "\ufff5\017\ufff5\020\ufff5\052\ufff5\053\ufff5\065\ufff5\067\ufff5" +
    "\071\ufff5\072\ufff5\073\ufff5\074\ufff5\075\ufff5\076\ufff5\115" +
    "\ufff5\116\ufff5\001\002\000\042\002\ufff4\006\ufff4\017\ufff4" +
    "\020\ufff4\052\ufff4\053\ufff4\065\ufff4\067\ufff4\071\ufff4\072" +
    "\ufff4\073\ufff4\074\ufff4\075\ufff4\076\ufff4\115\ufff4\116\ufff4" +
    "\001\002\000\042\002\ufff0\006\ufff0\017\ufff0\020\ufff0\052" +
    "\ufff0\053\ufff0\065\ufff0\067\ufff0\071\ufff0\072\ufff0\073\ufff0" +
    "\074\ufff0\075\ufff0\076\ufff0\115\ufff0\116\ufff0\001\002\000" +
    "\042\002\ufff1\006\ufff1\017\ufff1\020\ufff1\052\ufff1\053\ufff1" +
    "\065\ufff1\067\ufff1\071\ufff1\072\ufff1\073\ufff1\074\ufff1\075" +
    "\ufff1\076\ufff1\115\ufff1\116\ufff1\001\002\000\042\002\ufffc" +
    "\006\ufffc\017\ufffc\020\ufffc\052\ufffc\053\ufffc\065\ufffc\067" +
    "\ufffc\071\ufffc\072\ufffc\073\ufffc\074\ufffc\075\ufffc\076\ufffc" +
    "\115\ufffc\116\ufffc\001\002\000\042\002\uffee\006\uffee\017" +
    "\uffee\020\uffee\052\uffee\053\uffee\065\uffee\067\uffee\071\uffee" +
    "\072\uffee\073\uffee\074\uffee\075\uffee\076\uffee\115\uffee\116" +
    "\uffee\001\002\000\004\027\u0155\001\002\000\042\002\ufff6" +
    "\006\ufff6\017\ufff6\020\ufff6\052\ufff6\053\ufff6\065\ufff6\067" +
    "\ufff6\071\ufff6\072\ufff6\073\ufff6\074\ufff6\075\ufff6\076\ufff6" +
    "\115\ufff6\116\ufff6\001\002\000\044\002\uff2f\006\uff2f\017" +
    "\uff2f\020\uff2f\052\uff2f\053\uff2f\065\uff2f\067\uff2f\070\053" +
    "\071\uff2f\072\uff2f\073\uff2f\074\uff2f\075\uff2f\076\uff2f\115" +
    "\uff2f\116\uff2f\001\002\000\042\002\ufff3\006\ufff3\017\ufff3" +
    "\020\ufff3\052\ufff3\053\ufff3\065\ufff3\067\ufff3\071\ufff3\072" +
    "\ufff3\073\ufff3\074\ufff3\075\ufff3\076\ufff3\115\ufff3\116\ufff3" +
    "\001\002\000\004\006\uffd7\001\002\000\004\027\047\001" +
    "\002\000\004\030\050\001\002\000\004\050\051\001\002" +
    "\000\042\002\uff21\006\uff21\017\uff21\020\uff21\052\uff21\053" +
    "\uff21\065\uff21\067\uff21\071\uff21\072\uff21\073\uff21\074\uff21" +
    "\075\uff21\076\uff21\115\uff21\116\uff21\001\002\000\044\002" +
    "\uff2c\006\uff2c\017\uff2c\020\uff2c\052\uff2c\053\uff2c\065\uff2c" +
    "\067\uff2c\070\053\071\uff2c\072\uff2c\073\uff2c\074\uff2c\075" +
    "\uff2c\076\uff2c\115\uff2c\116\uff2c\001\002\000\006\051\056" +
    "\067\057\001\002\000\042\002\uff2e\006\uff2e\017\uff2e\020" +
    "\uff2e\052\uff2e\053\uff2e\065\uff2e\067\uff2e\071\uff2e\072\uff2e" +
    "\073\uff2e\074\uff2e\075\uff2e\076\uff2e\115\uff2e\116\uff2e\001" +
    "\002\000\044\002\uff30\006\uff30\017\uff30\020\uff30\052\uff30" +
    "\053\uff30\065\uff30\067\uff30\070\uff30\071\uff30\072\uff30\073" +
    "\uff30\074\uff30\075\uff30\076\uff30\115\uff30\116\uff30\001\002" +
    "\000\040\006\021\017\032\020\045\052\uff3e\053\017\065" +
    "\016\067\020\071\041\072\012\073\024\074\031\075\010" +
    "\076\013\115\030\116\046\001\002\000\004\027\060\001" +
    "\002\000\040\004\106\005\071\006\100\007\113\010\076" +
    "\011\111\021\117\022\061\027\063\036\073\054\104\055" +
    "\070\056\116\057\102\077\103\001\002\000\030\004\106" +
    "\005\071\006\125\007\113\021\117\022\061\027\122\054" +
    "\104\055\070\057\102\077\103\001\002\000\012\030\uffcc" +
    "\045\uff57\046\uffcc\050\uffcc\001\002\000\040\004\106\005" +
    "\071\006\125\007\113\010\076\011\111\021\117\022\061" +
    "\027\063\036\073\054\104\055\070\056\116\057\102\077" +
    "\103\001\002\000\014\030\uffcf\043\324\044\323\046\uffcf" +
    "\050\uffcf\001\002\000\016\030\uffce\043\316\044\315\045" +
    "\uff59\046\uffce\050\uffce\001\002\000\014\030\uff76\034\uff76" +
    "\035\uff76\046\uff76\050\uff76\001\002\000\042\021\uffbf\022" +
    "\uffbf\023\uffbf\024\uffbf\025\uffbf\030\uffbf\034\uffbf\035\uffbf" +
    "\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf\046" +
    "\uffbf\050\uffbf\001\002\000\004\027\u0144\001\002\000\042" +
    "\021\uffba\022\uffba\023\uffba\024\uffba\025\uffba\030\uffba\034" +
    "\uffba\035\uffba\037\uffba\040\uffba\041\uffba\042\uffba\043\uffba" +
    "\044\uffba\046\uffba\050\uffba\001\002\000\042\021\uffbe\022" +
    "\uffbe\023\uffbe\024\uffbe\025\uffbe\030\uffbe\034\uffbe\035\uffbe" +
    "\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\046" +
    "\uffbe\050\uffbe\001\002\000\040\004\106\005\071\006\125" +
    "\007\113\010\076\011\111\021\117\022\061\027\063\036" +
    "\073\054\104\055\070\056\116\057\102\077\103\001\002" +
    "\000\042\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\030" +
    "\uffbd\034\uffbd\035\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd" +
    "\043\uffbd\044\uffbd\046\uffbd\050\uffbd\001\002\000\004\030" +
    "\u013c\001\002\000\020\030\uff8e\034\uff8e\035\uff8e\043\u0133" +
    "\044\u0132\046\uff8e\050\uff8e\001\002\000\012\030\uffca\045" +
    "\uff55\046\uffca\050\uffca\001\002\000\046\021\uffb9\022\uffb9" +
    "\023\uffb9\024\uffb9\025\uffb9\027\144\030\uffb9\031\u0131\032" +
    "\u0130\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9" +
    "\045\143\046\uffb9\050\uffb9\001\002\000\014\030\uffd0\034" +
    "\307\035\311\046\uffd0\050\uffd0\001\002\000\004\027\u0129" +
    "\001\002\000\004\045\374\001\002\000\004\027\365\001" +
    "\002\000\010\030\uffc9\046\uffc9\050\uffc9\001\002\000\042" +
    "\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\030\uffbb\034" +
    "\uffbb\035\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb" +
    "\044\uffbb\046\uffbb\050\uffbb\001\002\000\042\021\uffbc\022" +
    "\uffbc\023\uffbc\024\uffbc\025\uffbc\030\uffbc\034\uffbc\035\uffbc" +
    "\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\046" +
    "\uffbc\050\uffbc\001\002\000\010\030\uffc8\046\uffc8\050\uffc8" +
    "\001\002\000\020\030\uff8d\034\uff8d\035\uff8d\043\354\044" +
    "\353\046\uff8d\050\uff8d\001\002\000\036\021\133\022\135" +
    "\023\131\024\132\025\134\030\uffd1\037\270\040\272\041" +
    "\265\042\266\043\264\044\271\046\uffd1\050\uffd1\001\002" +
    "\000\044\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\030" +
    "\uffb8\034\uffb8\035\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8" +
    "\043\uffb8\044\uffb8\045\333\046\uffb8\050\uffb8\001\002\000" +
    "\012\030\uffcb\045\uff56\046\uffcb\050\uffcb\001\002\000\004" +
    "\045\243\001\002\000\004\027\235\001\002\000\030\004" +
    "\106\005\071\006\125\007\113\021\117\022\061\027\122" +
    "\054\104\055\070\057\102\077\103\001\002\000\012\030" +
    "\uffcd\045\uff58\046\uffcd\050\uffcd\001\002\000\006\030\uff57" +
    "\045\uff57\001\002\000\030\004\106\005\071\006\125\007" +
    "\113\021\117\022\061\027\122\054\104\055\070\057\102" +
    "\077\103\001\002\000\004\045\uff59\001\002\000\006\030" +
    "\uff55\045\uff55\001\002\000\046\021\uffb9\022\uffb9\023\uffb9" +
    "\024\uffb9\025\uffb9\027\144\030\uffb9\034\uffb9\035\uffb9\037" +
    "\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045\143" +
    "\046\uffb9\050\uffb9\001\002\000\042\021\uffc6\022\uffc6\023" +
    "\uffc6\024\uffc6\025\uffc6\030\uffc6\034\uffc6\035\uffc6\037\uffc6" +
    "\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\046\uffc6\050" +
    "\uffc6\001\002\000\006\030\uff56\045\uff56\001\002\000\006" +
    "\030\uff58\045\uff58\001\002\000\030\004\106\005\071\006" +
    "\125\007\113\021\117\022\061\027\122\054\104\055\070" +
    "\057\102\077\103\001\002\000\030\004\106\005\071\006" +
    "\125\007\113\021\117\022\061\027\122\054\104\055\070" +
    "\057\102\077\103\001\002\000\030\004\106\005\071\006" +
    "\125\007\113\021\117\022\061\027\122\054\104\055\070" +
    "\057\102\077\103\001\002\000\030\004\106\005\071\006" +
    "\125\007\113\021\117\022\061\027\122\054\104\055\070" +
    "\057\102\077\103\001\002\000\030\004\106\005\071\006" +
    "\125\007\113\021\117\022\061\027\122\054\104\055\070" +
    "\057\102\077\103\001\002\000\042\021\uffc4\022\uffc4\023" +
    "\131\024\132\025\134\030\uffc4\034\uffc4\035\uffc4\037\uffc4" +
    "\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\046\uffc4\050" +
    "\uffc4\001\002\000\042\021\uffc2\022\uffc2\023\uffc2\024\uffc2" +
    "\025\uffc2\030\uffc2\034\uffc2\035\uffc2\037\uffc2\040\uffc2\041" +
    "\uffc2\042\uffc2\043\uffc2\044\uffc2\046\uffc2\050\uffc2\001\002" +
    "\000\042\021\uffc5\022\uffc5\023\131\024\132\025\134\030" +
    "\uffc5\034\uffc5\035\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5" +
    "\043\uffc5\044\uffc5\046\uffc5\050\uffc5\001\002\000\042\021" +
    "\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\030\uffc1\034\uffc1" +
    "\035\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044" +
    "\uffc1\046\uffc1\050\uffc1\001\002\000\042\021\uffc3\022\uffc3" +
    "\023\uffc3\024\uffc3\025\uffc3\030\uffc3\034\uffc3\035\uffc3\037" +
    "\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\046\uffc3" +
    "\050\uffc3\001\002\000\014\060\216\061\220\062\217\063" +
    "\214\064\215\001\002\000\042\004\106\005\071\006\100" +
    "\007\113\010\076\011\111\021\117\022\061\027\063\030" +
    "\147\036\073\054\104\055\070\056\116\057\102\077\103" +
    "\001\002\000\006\030\172\046\171\001\002\000\006\030" +
    "\uff37\046\uff37\001\002\000\044\021\uffb7\022\uffb7\023\uffb7" +
    "\024\uffb7\025\uffb7\030\uffb7\034\uffb7\035\uffb7\037\uffb7\040" +
    "\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045\150\046\uffb7" +
    "\050\uffb7\001\002\000\014\060\152\061\155\062\154\063" +
    "\151\064\153\001\002\000\004\027\167\001\002\000\042" +
    "\021\uff72\022\uff72\023\uff72\024\uff72\025\uff72\030\uff72\034" +
    "\uff72\035\uff72\037\uff72\040\uff72\041\uff72\042\uff72\043\uff72" +
    "\044\uff72\046\uff72\050\uff72\001\002\000\004\027\164\001" +
    "\002\000\004\027\162\001\002\000\004\027\156\001\002" +
    "\000\030\004\106\005\071\006\125\007\113\021\117\022" +
    "\061\027\122\054\104\055\070\057\102\077\103\001\002" +
    "\000\004\030\161\001\002\000\016\021\133\022\135\023" +
    "\131\024\132\025\134\030\uff5f\001\002\000\012\030\uff61" +
    "\045\uff61\046\uff61\050\uff61\001\002\000\004\030\163\001" +
    "\002\000\012\030\uff51\045\uff51\046\uff51\050\uff51\001\002" +
    "\000\040\004\106\005\071\006\100\007\113\010\076\011" +
    "\111\021\117\022\061\027\063\036\073\054\104\055\070" +
    "\056\116\057\102\077\103\001\002\000\004\030\166\001" +
    "\002\000\012\030\uff5b\045\uff5b\046\uff5b\050\uff5b\001\002" +
    "\000\004\030\170\001\002\000\012\030\uff4c\045\uff4c\046" +
    "\uff4c\050\uff4c\001\002\000\040\004\106\005\071\006\100" +
    "\007\113\010\076\011\111\021\117\022\061\027\063\036" +
    "\073\054\104\055\070\056\116\057\102\077\103\001\002" +
    "\000\044\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\030" +
    "\uffb6\034\uffb6\035\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6" +
    "\043\uffb6\044\uffb6\045\173\046\uffb6\050\uffb6\001\002\000" +
    "\014\060\176\061\200\062\177\063\174\064\175\001\002" +
    "\000\004\027\211\001\002\000\004\027\206\001\002\000" +
    "\042\021\uff71\022\uff71\023\uff71\024\uff71\025\uff71\030\uff71" +
    "\034\uff71\035\uff71\037\uff71\040\uff71\041\uff71\042\uff71\043" +
    "\uff71\044\uff71\046\uff71\050\uff71\001\002\000\004\027\204" +
    "\001\002\000\004\027\201\001\002\000\030\004\106\005" +
    "\071\006\125\007\113\021\117\022\061\027\122\054\104" +
    "\055\070\057\102\077\103\001\002\000\004\030\203\001" +
    "\002\000\012\030\uff60\045\uff60\046\uff60\050\uff60\001\002" +
    "\000\004\030\205\001\002\000\012\030\uff50\045\uff50\046" +
    "\uff50\050\uff50\001\002\000\040\004\106\005\071\006\100" +
    "\007\113\010\076\011\111\021\117\022\061\027\063\036" +
    "\073\054\104\055\070\056\116\057\102\077\103\001\002" +
    "\000\004\030\210\001\002\000\012\030\uff5a\045\uff5a\046" +
    "\uff5a\050\uff5a\001\002\000\004\030\212\001\002\000\012" +
    "\030\uff4b\045\uff4b\046\uff4b\050\uff4b\001\002\000\006\030" +
    "\uff38\046\uff38\001\002\000\004\027\231\001\002\000\004" +
    "\027\226\001\002\000\042\021\uff74\022\uff74\023\uff74\024" +
    "\uff74\025\uff74\030\uff74\034\uff74\035\uff74\037\uff74\040\uff74" +
    "\041\uff74\042\uff74\043\uff74\044\uff74\046\uff74\050\uff74\001" +
    "\002\000\004\027\224\001\002\000\004\027\221\001\002" +
    "\000\030\004\106\005\071\006\125\007\113\021\117\022" +
    "\061\027\122\054\104\055\070\057\102\077\103\001\002" +
    "\000\004\030\223\001\002\000\012\030\uff64\045\uff64\046" +
    "\uff64\050\uff64\001\002\000\004\030\225\001\002\000\012" +
    "\030\uff54\045\uff54\046\uff54\050\uff54\001\002\000\040\004" +
    "\106\005\071\006\100\007\113\010\076\011\111\021\117" +
    "\022\061\027\063\036\073\054\104\055\070\056\116\057" +
    "\102\077\103\001\002\000\004\030\230\001\002\000\012" +
    "\030\uff5c\045\uff5c\046\uff5c\050\uff5c\001\002\000\004\030" +
    "\232\001\002\000\012\030\uff4f\045\uff4f\046\uff4f\050\uff4f" +
    "\001\002\000\016\021\133\022\135\023\131\024\132\025" +
    "\134\030\234\001\002\000\042\021\uffc0\022\uffc0\023\uffc0" +
    "\024\uffc0\025\uffc0\030\uffc0\034\uffc0\035\uffc0\037\uffc0\040" +
    "\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\046\uffc0\050\uffc0" +
    "\001\002\000\040\004\106\005\071\006\125\007\113\010" +
    "\076\011\111\021\117\022\061\027\063\036\073\054\104" +
    "\055\070\056\116\057\102\077\103\001\002\000\006\043" +
    "\324\044\323\001\002\000\012\030\uff59\043\316\044\315" +
    "\045\uff59\001\002\000\010\030\310\034\307\035\311\001" +
    "\002\000\032\021\133\022\135\023\131\024\132\025\134" +
    "\030\267\037\270\040\272\041\265\042\266\043\264\044" +
    "\271\001\002\000\006\030\244\045\243\001\002\000\014" +
    "\060\247\061\251\062\250\063\245\064\246\001\002\000" +
    "\020\030\uff68\034\uff68\035\uff68\043\uff68\044\uff68\046\uff68" +
    "\050\uff68\001\002\000\004\027\262\001\002\000\004\027" +
    "\257\001\002\000\042\021\uff73\022\uff73\023\uff73\024\uff73" +
    "\025\uff73\030\uff73\034\uff73\035\uff73\037\uff73\040\uff73\041" +
    "\uff73\042\uff73\043\uff73\044\uff73\046\uff73\050\uff73\001\002" +
    "\000\004\027\255\001\002\000\004\027\252\001\002\000" +
    "\030\004\106\005\071\006\125\007\113\021\117\022\061" +
    "\027\122\054\104\055\070\057\102\077\103\001\002\000" +
    "\004\030\254\001\002\000\012\030\uff62\045\uff62\046\uff62" +
    "\050\uff62\001\002\000\004\030\256\001\002\000\012\030" +
    "\uff52\045\uff52\046\uff52\050\uff52\001\002\000\040\004\106" +
    "\005\071\006\100\007\113\010\076\011\111\021\117\022" +
    "\061\027\063\036\073\054\104\055\070\056\116\057\102" +
    "\077\103\001\002\000\004\030\261\001\002\000\012\030" +
    "\uff5e\045\uff5e\046\uff5e\050\uff5e\001\002\000\004\030\263" +
    "\001\002\000\012\030\uff4d\045\uff4d\046\uff4d\050\uff4d\001" +
    "\002\000\034\004\106\005\071\006\125\007\113\010\304" +
    "\011\305\021\117\022\061\027\122\054\104\055\070\057" +
    "\102\077\103\001\002\000\030\004\106\005\071\006\125" +
    "\007\113\021\117\022\061\027\122\054\104\055\070\057" +
    "\102\077\103\001\002\000\030\004\106\005\071\006\125" +
    "\007\113\021\117\022\061\027\122\054\104\055\070\057" +
    "\102\077\103\001\002\000\020\030\uff6a\034\uff6a\035\uff6a" +
    "\043\uff6a\044\uff6a\046\uff6a\050\uff6a\001\002\000\030\004" +
    "\106\005\071\006\125\007\113\021\117\022\061\027\122" +
    "\054\104\055\070\057\102\077\103\001\002\000\034\004" +
    "\106\005\071\006\125\007\113\010\275\011\276\021\117" +
    "\022\061\027\122\054\104\055\070\057\102\077\103\001" +
    "\002\000\030\004\106\005\071\006\125\007\113\021\117" +
    "\022\061\027\122\054\104\055\070\057\102\077\103\001" +
    "\002\000\026\021\133\022\135\023\131\024\132\025\134" +
    "\030\uffa1\034\uffa1\035\uffa1\046\uffa1\050\uffa1\001\002\000" +
    "\016\030\uff7d\034\uff7d\035\uff7d\045\uff59\046\uff7d\050\uff7d" +
    "\001\002\000\014\030\uff92\034\uff92\035\uff92\046\uff92\050" +
    "\uff92\001\002\000\014\030\uff90\034\uff90\035\uff90\046\uff90" +
    "\050\uff90\001\002\000\026\021\133\022\135\023\131\024" +
    "\132\025\134\030\uff9f\034\uff9f\035\uff9f\046\uff9f\050\uff9f" +
    "\001\002\000\026\021\133\022\135\023\131\024\132\025" +
    "\134\030\uffa2\034\uffa2\035\uffa2\046\uffa2\050\uffa2\001\002" +
    "\000\026\021\133\022\135\023\131\024\132\025\134\030" +
    "\uffa3\034\uffa3\035\uffa3\046\uffa3\050\uffa3\001\002\000\026" +
    "\021\133\022\135\023\131\024\132\025\134\030\uffa4\034" +
    "\uffa4\035\uffa4\046\uffa4\050\uffa4\001\002\000\016\030\uff7e" +
    "\034\uff7e\035\uff7e\045\uff59\046\uff7e\050\uff7e\001\002\000" +
    "\014\030\uff9a\034\uff9a\035\uff9a\046\uff9a\050\uff9a\001\002" +
    "\000\014\030\uff98\034\uff98\035\uff98\046\uff98\050\uff98\001" +
    "\002\000\026\021\133\022\135\023\131\024\132\025\134" +
    "\030\uffa0\034\uffa0\035\uffa0\046\uffa0\050\uffa0\001\002\000" +
    "\040\004\106\005\071\006\125\007\113\010\076\011\111" +
    "\021\117\022\061\027\063\036\073\054\104\055\070\056" +
    "\116\057\102\077\103\001\002\000\020\030\uff69\034\uff69" +
    "\035\uff69\043\uff69\044\uff69\046\uff69\050\uff69\001\002\000" +
    "\040\004\106\005\071\006\125\007\113\010\076\011\111" +
    "\021\117\022\061\027\063\036\073\054\104\055\070\056" +
    "\116\057\102\077\103\001\002\000\014\030\uff7a\034\307" +
    "\035\uff7a\046\uff7a\050\uff7a\001\002\000\030\021\133\022" +
    "\135\023\131\024\132\025\134\037\270\040\272\041\265" +
    "\042\266\043\264\044\271\001\002\000\014\030\uff7b\034" +
    "\uff7b\035\uff7b\046\uff7b\050\uff7b\001\002\000\030\004\106" +
    "\005\071\006\125\007\113\021\117\022\061\027\122\054" +
    "\104\055\070\057\102\077\103\001\002\000\030\004\106" +
    "\005\071\006\125\007\113\021\117\022\061\027\122\054" +
    "\104\055\070\057\102\077\103\001\002\000\016\030\uff82" +
    "\034\uff82\035\uff82\045\uff59\046\uff82\050\uff82\001\002\000" +
    "\026\021\133\022\135\023\131\024\132\025\134\030\uff80" +
    "\034\uff80\035\uff80\046\uff80\050\uff80\001\002\000\016\030" +
    "\uff81\034\uff81\035\uff81\045\uff59\046\uff81\050\uff81\001\002" +
    "\000\026\021\133\022\135\023\131\024\132\025\134\030" +
    "\uff7f\034\uff7f\035\uff7f\046\uff7f\050\uff7f\001\002\000\010" +
    "\010\331\011\332\056\116\001\002\000\010\010\326\011" +
    "\327\056\116\001\002\000\014\030\uff84\034\uff84\035\uff84" +
    "\046\uff84\050\uff84\001\002\000\014\030\uff8c\034\uff8c\035" +
    "\uff8c\046\uff8c\050\uff8c\001\002\000\014\030\uff8b\034\uff8b" +
    "\035\uff8b\046\uff8b\050\uff8b\001\002\000\014\030\uff83\034" +
    "\uff83\035\uff83\046\uff83\050\uff83\001\002\000\014\030\uff88" +
    "\034\uff88\035\uff88\046\uff88\050\uff88\001\002\000\014\030" +
    "\uff87\034\uff87\035\uff87\046\uff87\050\uff87\001\002\000\014" +
    "\060\335\061\340\062\337\063\334\064\336\001\002\000" +
    "\004\027\351\001\002\000\042\021\uff75\022\uff75\023\uff75" +
    "\024\uff75\025\uff75\030\uff75\034\uff75\035\uff75\037\uff75\040" +
    "\uff75\041\uff75\042\uff75\043\uff75\044\uff75\046\uff75\050\uff75" +
    "\001\002\000\004\027\346\001\002\000\004\027\344\001" +
    "\002\000\004\027\341\001\002\000\030\004\106\005\071" +
    "\006\125\007\113\021\117\022\061\027\122\054\104\055" +
    "\070\057\102\077\103\001\002\000\004\030\343\001\002" +
    "\000\012\030\uff63\045\uff63\046\uff63\050\uff63\001\002\000" +
    "\004\030\345\001\002\000\012\030\uff53\045\uff53\046\uff53" +
    "\050\uff53\001\002\000\040\004\106\005\071\006\100\007" +
    "\113\010\076\011\111\021\117\022\061\027\063\036\073" +
    "\054\104\055\070\056\116\057\102\077\103\001\002\000" +
    "\004\030\350\001\002\000\012\030\uff5d\045\uff5d\046\uff5d" +
    "\050\uff5d\001\002\000\004\030\352\001\002\000\012\030" +
    "\uff4e\045\uff4e\046\uff4e\050\uff4e\001\002\000\036\004\106" +
    "\005\071\006\125\007\113\010\362\011\363\021\117\022" +
    "\061\027\122\054\104\055\070\056\116\057\102\077\103" +
    "\001\002\000\036\004\106\005\071\006\125\007\113\010" +
    "\356\011\357\021\117\022\061\027\122\054\104\055\070" +
    "\056\116\057\102\077\103\001\002\000\014\030\uff89\034" +
    "\uff89\035\uff89\046\uff89\050\uff89\001\002\000\014\030\uff9c" +
    "\034\uff9c\035\uff9c\046\uff9c\050\uff9c\001\002\000\014\030" +
    "\uff9b\034\uff9b\035\uff9b\046\uff9b\050\uff9b\001\002\000\026" +
    "\021\133\022\135\023\131\024\132\025\134\030\uff97\034" +
    "\uff97\035\uff97\046\uff97\050\uff97\001\002\000\014\030\uff85" +
    "\034\uff85\035\uff85\046\uff85\050\uff85\001\002\000\014\030" +
    "\uff94\034\uff94\035\uff94\046\uff94\050\uff94\001\002\000\014" +
    "\030\uff93\034\uff93\035\uff93\046\uff93\050\uff93\001\002\000" +
    "\026\021\133\022\135\023\131\024\132\025\134\030\uff8f" +
    "\034\uff8f\035\uff8f\046\uff8f\050\uff8f\001\002\000\040\004" +
    "\106\005\071\006\125\007\113\010\076\011\111\021\117" +
    "\022\061\027\063\036\073\054\104\055\070\056\116\057" +
    "\102\077\103\001\002\000\010\030\373\034\307\035\311" +
    "\001\002\000\032\021\133\022\135\023\131\024\132\025" +
    "\134\030\372\037\270\040\272\041\265\042\266\043\264" +
    "\044\271\001\002\000\006\030\371\045\243\001\002\000" +
    "\042\021\uff6e\022\uff6e\023\uff6e\024\uff6e\025\uff6e\030\uff6e" +
    "\034\uff6e\035\uff6e\037\uff6e\040\uff6e\041\uff6e\042\uff6e\043" +
    "\uff6e\044\uff6e\046\uff6e\050\uff6e\001\002\000\042\021\uff70" +
    "\022\uff70\023\uff70\024\uff70\025\uff70\030\uff70\034\uff70\035" +
    "\uff70\037\uff70\040\uff70\041\uff70\042\uff70\043\uff70\044\uff70" +
    "\046\uff70\050\uff70\001\002\000\042\021\uff6f\022\uff6f\023" +
    "\uff6f\024\uff6f\025\uff6f\030\uff6f\034\uff6f\035\uff6f\037\uff6f" +
    "\040\uff6f\041\uff6f\042\uff6f\043\uff6f\044\uff6f\046\uff6f\050" +
    "\uff6f\001\002\000\034\100\u0108\101\u0109\102\375\103\u0104" +
    "\104\u0106\105\u0103\106\u0101\107\u0102\110\u0107\111\u0100\112" +
    "\376\113\u0105\114\377\001\002\000\042\021\uffa9\022\uffa9" +
    "\023\uffa9\024\uffa9\025\uffa9\030\uffa9\034\uffa9\035\uffa9\037" +
    "\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044\uffa9\046\uffa9" +
    "\050\uffa9\001\002\000\004\027\u0124\001\002\000\004\027" +
    "\u0122\001\002\000\004\027\u011f\001\002\000\004\027\u011c" +
    "\001\002\000\004\027\u0119\001\002\000\004\027\u0116\001" +
    "\002\000\004\027\u0113\001\002\000\004\027\u0110\001\002" +
    "\000\004\027\u010d\001\002\000\004\027\u010a\001\002\000" +
    "\042\021\uffab\022\uffab\023\uffab\024\uffab\025\uffab\030\uffab" +
    "\034\uffab\035\uffab\037\uffab\040\uffab\041\uffab\042\uffab\043" +
    "\uffab\044\uffab\046\uffab\050\uffab\001\002\000\042\021\uffaa" +
    "\022\uffaa\023\uffaa\024\uffaa\025\uffaa\030\uffaa\034\uffaa\035" +
    "\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa" +
    "\046\uffaa\050\uffaa\001\002\000\030\004\106\005\071\006" +
    "\125\007\113\021\117\022\061\027\122\054\104\055\070" +
    "\057\102\077\103\001\002\000\016\021\133\022\135\023" +
    "\131\024\132\025\134\030\u010c\001\002\000\042\021\uffb0" +
    "\022\uffb0\023\uffb0\024\uffb0\025\uffb0\030\uffb0\034\uffb0\035" +
    "\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0" +
    "\046\uffb0\050\uffb0\001\002\000\030\004\106\005\071\006" +
    "\125\007\113\021\117\022\061\027\122\054\104\055\070" +
    "\057\102\077\103\001\002\000\016\021\133\022\135\023" +
    "\131\024\132\025\134\030\u010f\001\002\000\042\021\uffb4" +
    "\022\uffb4\023\uffb4\024\uffb4\025\uffb4\030\uffb4\034\uffb4\035" +
    "\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4" +
    "\046\uffb4\050\uffb4\001\002\000\030\004\106\005\071\006" +
    "\125\007\113\021\117\022\061\027\122\054\104\055\070" +
    "\057\102\077\103\001\002\000\016\021\133\022\135\023" +
    "\131\024\132\025\134\030\u0112\001\002\000\042\021\uffad" +
    "\022\uffad\023\uffad\024\uffad\025\uffad\030\uffad\034\uffad\035" +
    "\uffad\037\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad" +
    "\046\uffad\050\uffad\001\002\000\030\004\106\005\071\006" +
    "\125\007\113\021\117\022\061\027\122\054\104\055\070" +
    "\057\102\077\103\001\002\000\016\021\133\022\135\023" +
    "\131\024\132\025\134\030\u0115\001\002\000\042\021\uffb5" +
    "\022\uffb5\023\uffb5\024\uffb5\025\uffb5\030\uffb5\034\uffb5\035" +
    "\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5" +
    "\046\uffb5\050\uffb5\001\002\000\030\004\106\005\071\006" +
    "\125\007\113\021\117\022\061\027\122\054\104\055\070" +
    "\057\102\077\103\001\002\000\016\021\133\022\135\023" +
    "\131\024\132\025\134\030\u0118\001\002\000\042\021\uffb3" +
    "\022\uffb3\023\uffb3\024\uffb3\025\uffb3\030\uffb3\034\uffb3\035" +
    "\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3" +
    "\046\uffb3\050\uffb3\001\002\000\030\004\106\005\071\006" +
    "\125\007\113\021\117\022\061\027\122\054\104\055\070" +
    "\057\102\077\103\001\002\000\016\021\133\022\135\023" +
    "\131\024\132\025\134\030\u011b\001\002\000\042\021\uffb1" +
    "\022\uffb1\023\uffb1\024\uffb1\025\uffb1\030\uffb1\034\uffb1\035" +
    "\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1" +
    "\046\uffb1\050\uffb1\001\002\000\030\004\106\005\071\006" +
    "\125\007\113\021\117\022\061\027\122\054\104\055\070" +
    "\057\102\077\103\001\002\000\016\021\133\022\135\023" +
    "\131\024\132\025\134\030\u011e\001\002\000\042\021\uffb2" +
    "\022\uffb2\023\uffb2\024\uffb2\025\uffb2\030\uffb2\034\uffb2\035" +
    "\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2" +
    "\046\uffb2\050\uffb2\001\002\000\030\004\106\005\071\006" +
    "\125\007\113\021\117\022\061\027\122\054\104\055\070" +
    "\057\102\077\103\001\002\000\016\021\133\022\135\023" +
    "\131\024\132\025\134\030\u0121\001\002\000\042\021\uffaf" +
    "\022\uffaf\023\uffaf\024\uffaf\025\uffaf\030\uffaf\034\uffaf\035" +
    "\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf" +
    "\046\uffaf\050\uffaf\001\002\000\004\030\u0123\001\002\000" +
    "\042\021\uffac\022\uffac\023\uffac\024\uffac\025\uffac\030\uffac" +
    "\034\uffac\035\uffac\037\uffac\040\uffac\041\uffac\042\uffac\043" +
    "\uffac\044\uffac\046\uffac\050\uffac\001\002\000\030\004\106" +
    "\005\071\006\125\007\113\021\117\022\061\027\122\054" +
    "\104\055\070\057\102\077\103\001\002\000\016\021\133" +
    "\022\135\023\131\024\132\025\134\046\u0126\001\002\000" +
    "\030\004\106\005\071\006\125\007\113\021\117\022\061" +
    "\027\122\054\104\055\070\057\102\077\103\001\002\000" +
    "\016\021\133\022\135\023\131\024\132\025\134\030\u0128" +
    "\001\002\000\042\021\uffae\022\uffae\023\uffae\024\uffae\025" +
    "\uffae\030\uffae\034\uffae\035\uffae\037\uffae\040\uffae\041\uffae" +
    "\042\uffae\043\uffae\044\uffae\046\uffae\050\uffae\001\002\000" +
    "\040\004\106\005\071\006\125\007\113\010\076\011\111" +
    "\021\117\022\061\027\063\036\073\054\104\055\070\056" +
    "\116\057\102\077\103\001\002\000\010\030\u012f\034\307" +
    "\035\311\001\002\000\032\021\133\022\135\023\131\024" +
    "\132\025\134\030\u012e\037\270\040\272\041\265\042\266" +
    "\043\264\044\271\001\002\000\006\030\u012d\045\243\001" +
    "\002\000\022\030\uff65\034\uff65\035\uff65\043\uff65\044\uff65" +
    "\045\uff65\046\uff65\050\uff65\001\002\000\022\030\uff67\034" +
    "\uff67\035\uff67\043\uff67\044\uff67\045\uff67\046\uff67\050\uff67" +
    "\001\002\000\022\030\uff66\034\uff66\035\uff66\043\uff66\044" +
    "\uff66\045\uff66\046\uff66\050\uff66\001\002\000\010\030\uffa7" +
    "\046\uffa7\050\uffa7\001\002\000\010\030\uffa8\046\uffa8\050" +
    "\uffa8\001\002\000\036\004\106\005\071\006\125\007\113" +
    "\010\u0139\011\u013a\021\117\022\061\027\122\054\104\055" +
    "\070\056\116\057\102\077\103\001\002\000\036\004\106" +
    "\005\071\006\125\007\113\010\u0135\011\u0136\021\117\022" +
    "\061\027\122\054\104\055\070\056\116\057\102\077\103" +
    "\001\002\000\014\030\uff8a\034\uff8a\035\uff8a\046\uff8a\050" +
    "\uff8a\001\002\000\014\030\uff9e\034\uff9e\035\uff9e\046\uff9e" +
    "\050\uff9e\001\002\000\014\030\uff9d\034\uff9d\035\uff9d\046" +
    "\uff9d\050\uff9d\001\002\000\026\021\133\022\135\023\131" +
    "\024\132\025\134\030\uff99\034\uff99\035\uff99\046\uff99\050" +
    "\uff99\001\002\000\014\030\uff86\034\uff86\035\uff86\046\uff86" +
    "\050\uff86\001\002\000\014\030\uff96\034\uff96\035\uff96\046" +
    "\uff96\050\uff96\001\002\000\014\030\uff95\034\uff95\035\uff95" +
    "\046\uff95\050\uff95\001\002\000\026\021\133\022\135\023" +
    "\131\024\132\025\134\030\uff91\034\uff91\035\uff91\046\uff91" +
    "\050\uff91\001\002\000\004\051\u013d\001\002\000\040\006" +
    "\021\017\032\020\045\052\uff3e\053\017\065\016\067\020" +
    "\071\041\072\012\073\024\074\031\075\010\076\013\115" +
    "\030\116\046\001\002\000\040\006\021\017\032\020\045" +
    "\052\uff3f\053\017\065\016\067\020\071\041\072\012\073" +
    "\024\074\031\075\010\076\013\115\030\116\046\001\002" +
    "\000\004\052\u0140\001\002\000\044\002\uff32\006\uff32\017" +
    "\uff32\020\uff32\052\uff32\053\uff32\065\uff32\067\uff32\070\uff32" +
    "\071\uff32\072\uff32\073\uff32\074\uff32\075\uff32\076\uff32\115" +
    "\uff32\116\uff32\001\002\000\042\002\ufffe\006\ufffe\017\ufffe" +
    "\020\ufffe\052\ufffe\053\ufffe\065\ufffe\067\ufffe\071\ufffe\072" +
    "\ufffe\073\ufffe\074\ufffe\075\ufffe\076\ufffe\115\ufffe\116\ufffe" +
    "\001\002\000\014\030\uff79\034\uff79\035\uff79\046\uff79\050" +
    "\uff79\001\002\000\042\021\133\022\135\023\131\024\132" +
    "\025\134\030\uff78\034\uff78\035\uff78\037\270\040\272\041" +
    "\265\042\266\043\264\044\271\046\uff78\050\uff78\001\002" +
    "\000\040\004\106\005\071\006\125\007\113\010\076\011" +
    "\111\021\117\022\061\027\063\036\073\054\104\055\070" +
    "\056\116\057\102\077\103\001\002\000\010\030\u014a\034" +
    "\307\035\311\001\002\000\032\021\133\022\135\023\131" +
    "\024\132\025\134\030\u0149\037\270\040\272\041\265\042" +
    "\266\043\264\044\271\001\002\000\006\030\u0148\045\243" +
    "\001\002\000\042\021\uff6b\022\uff6b\023\uff6b\024\uff6b\025" +
    "\uff6b\030\uff6b\034\uff6b\035\uff6b\037\uff6b\040\uff6b\041\uff6b" +
    "\042\uff6b\043\uff6b\044\uff6b\046\uff6b\050\uff6b\001\002\000" +
    "\042\021\uff6d\022\uff6d\023\uff6d\024\uff6d\025\uff6d\030\uff6d" +
    "\034\uff6d\035\uff6d\037\uff6d\040\uff6d\041\uff6d\042\uff6d\043" +
    "\uff6d\044\uff6d\046\uff6d\050\uff6d\001\002\000\042\021\uff6c" +
    "\022\uff6c\023\uff6c\024\uff6c\025\uff6c\030\uff6c\034\uff6c\035" +
    "\uff6c\037\uff6c\040\uff6c\041\uff6c\042\uff6c\043\uff6c\044\uff6c" +
    "\046\uff6c\050\uff6c\001\002\000\010\030\u014f\034\uff76\035" +
    "\uff76\001\002\000\010\030\u014e\034\307\035\311\001\002" +
    "\000\032\021\133\022\135\023\131\024\132\025\134\030" +
    "\234\037\270\040\272\041\265\042\266\043\264\044\271" +
    "\001\002\000\014\030\uff77\034\uff77\035\uff77\046\uff77\050" +
    "\uff77\001\002\000\014\030\uff7c\034\uff7c\035\uff7c\046\uff7c" +
    "\050\uff7c\001\002\000\042\021\uffc7\022\uffc7\023\uffc7\024" +
    "\uffc7\025\uffc7\030\uffc7\034\uffc7\035\uffc7\037\uffc7\040\uffc7" +
    "\041\uffc7\042\uffc7\043\uffc7\044\uffc7\046\uffc7\050\uffc7\001" +
    "\002\000\004\052\u0152\001\002\000\042\002\uff33\006\uff33" +
    "\017\uff33\020\uff33\052\uff33\053\uff33\065\uff33\067\uff33\071" +
    "\uff33\072\uff33\073\uff33\074\uff33\075\uff33\076\uff33\115\uff33" +
    "\116\uff33\001\002\000\042\002\uff2d\006\uff2d\017\uff2d\020" +
    "\uff2d\052\uff2d\053\uff2d\065\uff2d\067\uff2d\071\uff2d\072\uff2d" +
    "\073\uff2d\074\uff2d\075\uff2d\076\uff2d\115\uff2d\116\uff2d\001" +
    "\002\000\044\002\uff31\006\uff31\017\uff31\020\uff31\052\uff31" +
    "\053\uff31\065\uff31\067\uff31\070\uff31\071\uff31\072\uff31\073" +
    "\uff31\074\uff31\075\uff31\076\uff31\115\uff31\116\uff31\001\002" +
    "\000\010\006\u0156\017\032\020\045\001\002\000\004\033" +
    "\u016c\001\002\000\040\004\106\005\071\006\125\007\113" +
    "\010\076\011\111\021\117\022\061\027\063\036\073\054" +
    "\104\055\070\056\116\057\102\077\103\001\002\000\040" +
    "\004\106\005\071\006\125\007\113\010\076\011\111\021" +
    "\117\022\061\027\063\036\073\054\104\055\070\056\116" +
    "\057\102\077\103\001\002\000\010\034\307\035\311\050" +
    "\u015a\001\002\000\004\006\u015c\001\002\000\004\030\u0161" +
    "\001\002\000\010\031\u0131\032\u0130\033\u015f\001\002\000" +
    "\004\030\uff27\001\002\000\004\030\uff26\001\002\000\040" +
    "\004\106\005\071\006\100\007\113\010\076\011\111\021" +
    "\117\022\061\027\063\036\073\054\104\055\070\056\116" +
    "\057\102\077\103\001\002\000\004\030\uff25\001\002\000" +
    "\004\051\u0162\001\002\000\040\006\021\017\032\020\045" +
    "\052\uff3e\053\017\065\016\067\020\071\041\072\012\073" +
    "\024\074\031\075\010\076\013\115\030\116\046\001\002" +
    "\000\004\052\u0164\001\002\000\042\002\uff28\006\uff28\017" +
    "\uff28\020\uff28\052\uff28\053\uff28\065\uff28\067\uff28\071\uff28" +
    "\072\uff28\073\uff28\074\uff28\075\uff28\076\uff28\115\uff28\116" +
    "\uff28\001\002\000\010\034\307\035\311\050\u0166\001\002" +
    "\000\004\006\u015c\001\002\000\004\030\u0168\001\002\000" +
    "\004\051\u0169\001\002\000\040\006\021\017\032\020\045" +
    "\052\uff3e\053\017\065\016\067\020\071\041\072\012\073" +
    "\024\074\031\075\010\076\013\115\030\116\046\001\002" +
    "\000\004\052\u016b\001\002\000\042\002\uff29\006\uff29\017" +
    "\uff29\020\uff29\052\uff29\053\uff29\065\uff29\067\uff29\071\uff29" +
    "\072\uff29\073\uff29\074\uff29\075\uff29\076\uff29\115\uff29\116" +
    "\uff29\001\002\000\040\004\106\005\071\006\100\007\113" +
    "\010\076\011\111\021\117\022\061\027\063\036\073\054" +
    "\104\055\070\056\116\057\102\077\103\001\002\000\006" +
    "\046\uffd2\050\uffd2\001\002\000\004\050\u016f\001\002\000" +
    "\076\002\uffdf\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf" +
    "\011\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\027\uffdf\036" +
    "\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf\056\uffdf\057\uffdf" +
    "\065\uffdf\067\uffdf\071\uffdf\072\uffdf\073\uffdf\074\uffdf\075" +
    "\uffdf\076\uffdf\077\uffdf\115\uffdf\116\uffdf\001\002\000\042" +
    "\002\uff2b\006\uff2b\017\uff2b\020\uff2b\052\uff2b\053\uff2b\065" +
    "\uff2b\067\uff2b\071\uff2b\072\uff2b\073\uff2b\074\uff2b\075\uff2b" +
    "\076\uff2b\115\uff2b\116\uff2b\001\002\000\040\004\106\005" +
    "\071\006\100\007\113\010\076\011\111\021\117\022\061" +
    "\027\063\036\073\054\104\055\070\056\116\057\102\077" +
    "\103\001\002\000\004\030\u0173\001\002\000\004\050\u0174" +
    "\001\002\000\042\002\uff22\006\uff22\017\uff22\020\uff22\052" +
    "\uff22\053\uff22\065\uff22\067\uff22\071\uff22\072\uff22\073\uff22" +
    "\074\uff22\075\uff22\076\uff22\115\uff22\116\uff22\001\002\000" +
    "\004\002\001\001\002\000\040\006\021\017\032\020\045" +
    "\052\uff3e\053\017\065\016\067\020\071\041\072\012\073" +
    "\024\074\031\075\010\076\013\115\030\116\046\001\002" +
    "\000\004\052\u0178\001\002\000\004\072\u0179\001\002\000" +
    "\004\027\u017a\001\002\000\040\004\106\005\071\006\100" +
    "\007\113\010\076\011\111\021\117\022\061\027\063\036" +
    "\073\054\104\055\070\056\116\057\102\077\103\001\002" +
    "\000\004\030\u017c\001\002\000\004\050\u017d\001\002\000" +
    "\042\002\uff23\006\uff23\017\uff23\020\uff23\052\uff23\053\uff23" +
    "\065\uff23\067\uff23\071\uff23\072\uff23\073\uff23\074\uff23\075" +
    "\uff23\076\uff23\115\uff23\116\uff23\001\002\000\004\050\u0187" +
    "\001\002\000\042\004\106\005\071\006\100\007\113\010" +
    "\076\011\111\021\117\022\061\027\063\030\u0183\036\073" +
    "\054\104\055\070\056\116\057\102\077\103\001\002\000" +
    "\004\050\u0181\001\002\000\042\002\uffa6\006\uffa6\017\uffa6" +
    "\020\uffa6\052\uffa6\053\uffa6\065\uffa6\067\uffa6\071\uffa6\072" +
    "\uffa6\073\uffa6\074\uffa6\075\uffa6\076\uffa6\115\uffa6\116\uffa6" +
    "\001\002\000\006\030\u0185\046\171\001\002\000\004\050" +
    "\u0184\001\002\000\042\002\uff36\006\uff36\017\uff36\020\uff36" +
    "\052\uff36\053\uff36\065\uff36\067\uff36\071\uff36\072\uff36\073" +
    "\uff36\074\uff36\075\uff36\076\uff36\115\uff36\116\uff36\001\002" +
    "\000\004\050\u0186\001\002\000\042\002\uff35\006\uff35\017" +
    "\uff35\020\uff35\052\uff35\053\uff35\065\uff35\067\uff35\071\uff35" +
    "\072\uff35\073\uff35\074\uff35\075\uff35\076\uff35\115\uff35\116" +
    "\uff35\001\002\000\042\002\uffa5\006\uffa5\017\uffa5\020\uffa5" +
    "\052\uffa5\053\uffa5\065\uffa5\067\uffa5\071\uffa5\072\uffa5\073" +
    "\uffa5\074\uffa5\075\uffa5\076\uffa5\115\uffa5\116\uffa5\001\002" +
    "\000\040\004\106\005\071\006\100\007\113\010\076\011" +
    "\111\021\117\022\061\027\063\036\073\054\104\055\070" +
    "\056\116\057\102\077\103\001\002\000\004\030\u018a\001" +
    "\002\000\004\051\u018b\001\002\000\040\006\021\017\032" +
    "\020\045\052\uff3e\053\017\065\016\067\020\071\041\072" +
    "\012\073\024\074\031\075\010\076\013\115\030\116\046" +
    "\001\002\000\004\052\u018d\001\002\000\044\002\uff34\006" +
    "\uff34\017\uff34\020\uff34\052\uff34\053\uff34\065\uff34\067\uff34" +
    "\070\uff34\071\uff34\072\uff34\073\uff34\074\uff34\075\uff34\076" +
    "\uff34\115\uff34\116\uff34\001\002\000\004\027\u018f\001\002" +
    "\000\006\006\u0191\030\u0193\001\002\000\006\030\uff3c\046" +
    "\uff3c\001\002\000\004\047\u01c3\001\002\000\006\030\u01b5" +
    "\046\u01b4\001\002\000\006\047\u0195\051\u0194\001\002\000" +
    "\040\006\021\017\032\020\045\052\uff3e\053\017\065\016" +
    "\067\020\071\041\072\012\073\024\074\031\075\010\076" +
    "\013\115\030\116\046\001\002\000\014\012\u0197\013\u0198" +
    "\014\u0196\015\u019b\016\u019a\001\002\000\014\030\uffd4\033" +
    "\uffd4\046\uffd4\050\uffd4\051\uffd4\001\002\000\014\030\uffd6" +
    "\033\uffd6\046\uffd6\050\uffd6\051\uffd6\001\002\000\014\030" +
    "\uffd5\033\uffd5\046\uffd5\050\uffd5\051\uffd5\001\002\000\004" +
    "\051\u01af\001\002\000\004\051\u019c\001\002\000\014\030" +
    "\uffd3\033\uffd3\046\uffd3\050\uffd3\051\uffd3\001\002\000\034" +
    "\006\021\017\032\020\045\053\017\065\016\067\020\071" +
    "\041\072\012\073\024\074\031\075\010\115\030\116\046" +
    "\001\002\000\036\006\uffea\017\uffea\020\uffea\052\uffea\053" +
    "\uffea\065\uffea\067\uffea\071\uffea\072\uffea\073\uffea\074\uffea" +
    "\075\uffea\115\uffea\116\uffea\001\002\000\036\006\uffe8\017" +
    "\uffe8\020\uffe8\052\uffe8\053\uffe8\065\uffe8\067\uffe8\071\uffe8" +
    "\072\uffe8\073\uffe8\074\uffe8\075\uffe8\115\uffe8\116\uffe8\001" +
    "\002\000\036\006\uffe9\017\uffe9\020\uffe9\052\uffe9\053\uffe9" +
    "\065\uffe9\067\uffe9\071\uffe9\072\uffe9\073\uffe9\074\uffe9\075" +
    "\uffe9\115\uffe9\116\uffe9\001\002\000\036\006\021\017\032" +
    "\020\045\052\u01ad\053\017\065\016\067\020\071\041\072" +
    "\012\073\024\074\031\075\010\115\030\116\046\001\002" +
    "\000\036\006\uffeb\017\uffeb\020\uffeb\052\uffeb\053\uffeb\065" +
    "\uffeb\067\uffeb\071\uffeb\072\uffeb\073\uffeb\074\uffeb\075\uffeb" +
    "\115\uffeb\116\uffeb\001\002\000\036\006\uffec\017\uffec\020" +
    "\uffec\052\uffec\053\uffec\065\uffec\067\uffec\071\uffec\072\uffec" +
    "\073\uffec\074\uffec\075\uffec\115\uffec\116\uffec\001\002\000" +
    "\036\006\uffe4\017\uffe4\020\uffe4\052\uffe4\053\uffe4\065\uffe4" +
    "\067\uffe4\071\uffe4\072\uffe4\073\uffe4\074\uffe4\075\uffe4\115" +
    "\uffe4\116\uffe4\001\002\000\036\006\uffe1\017\uffe1\020\uffe1" +
    "\052\uffe1\053\uffe1\065\uffe1\067\uffe1\071\uffe1\072\uffe1\073" +
    "\uffe1\074\uffe1\075\uffe1\115\uffe1\116\uffe1\001\002\000\036" +
    "\006\uffe7\017\uffe7\020\uffe7\052\uffe7\053\uffe7\065\uffe7\067" +
    "\uffe7\071\uffe7\072\uffe7\073\uffe7\074\uffe7\075\uffe7\115\uffe7" +
    "\116\uffe7\001\002\000\036\006\uffe6\017\uffe6\020\uffe6\052" +
    "\uffe6\053\uffe6\065\uffe6\067\uffe6\071\uffe6\072\uffe6\073\uffe6" +
    "\074\uffe6\075\uffe6\115\uffe6\116\uffe6\001\002\000\036\006" +
    "\uffe2\017\uffe2\020\uffe2\052\uffe2\053\uffe2\065\uffe2\067\uffe2" +
    "\071\uffe2\072\uffe2\073\uffe2\074\uffe2\075\uffe2\115\uffe2\116" +
    "\uffe2\001\002\000\036\006\uffe3\017\uffe3\020\uffe3\052\uffe3" +
    "\053\uffe3\065\uffe3\067\uffe3\071\uffe3\072\uffe3\073\uffe3\074" +
    "\uffe3\075\uffe3\115\uffe3\116\uffe3\001\002\000\036\006\uffed" +
    "\017\uffed\020\uffed\052\uffed\053\uffed\065\uffed\067\uffed\071" +
    "\uffed\072\uffed\073\uffed\074\uffed\075\uffed\115\uffed\116\uffed" +
    "\001\002\000\036\006\uffe0\017\uffe0\020\uffe0\052\uffe0\053" +
    "\uffe0\065\uffe0\067\uffe0\071\uffe0\072\uffe0\073\uffe0\074\uffe0" +
    "\075\uffe0\115\uffe0\116\uffe0\001\002\000\036\006\uff40\017" +
    "\uff40\020\uff40\052\uff40\053\uff40\065\uff40\067\uff40\071\uff40" +
    "\072\uff40\073\uff40\074\uff40\075\uff40\115\uff40\116\uff40\001" +
    "\002\000\036\006\uffe5\017\uffe5\020\uffe5\052\uffe5\053\uffe5" +
    "\065\uffe5\067\uffe5\071\uffe5\072\uffe5\073\uffe5\074\uffe5\075" +
    "\uffe5\115\uffe5\116\uffe5\001\002\000\042\002\uff47\006\uff47" +
    "\017\uff47\020\uff47\052\uff47\053\uff47\065\uff47\067\uff47\071" +
    "\uff47\072\uff47\073\uff47\074\uff47\075\uff47\076\uff47\115\uff47" +
    "\116\uff47\001\002\000\036\006\uff41\017\uff41\020\uff41\052" +
    "\uff41\053\uff41\065\uff41\067\uff41\071\uff41\072\uff41\073\uff41" +
    "\074\uff41\075\uff41\115\uff41\116\uff41\001\002\000\040\006" +
    "\021\017\032\020\045\052\uff3e\053\017\065\016\067\020" +
    "\071\041\072\012\073\024\074\031\075\010\076\013\115" +
    "\030\116\046\001\002\000\004\052\u01b1\001\002\000\042" +
    "\002\uff43\006\uff43\017\uff43\020\uff43\052\uff43\053\uff43\065" +
    "\uff43\067\uff43\071\uff43\072\uff43\073\uff43\074\uff43\075\uff43" +
    "\076\uff43\115\uff43\116\uff43\001\002\000\004\052\u01b3\001" +
    "\002\000\042\002\uff45\006\uff45\017\uff45\020\uff45\052\uff45" +
    "\053\uff45\065\uff45\067\uff45\071\uff45\072\uff45\073\uff45\074" +
    "\uff45\075\uff45\076\uff45\115\uff45\116\uff45\001\002\000\004" +
    "\006\u0191\001\002\000\006\047\u01b7\051\u01b6\001\002\000" +
    "\040\006\021\017\032\020\045\052\uff3e\053\017\065\016" +
    "\067\020\071\041\072\012\073\024\074\031\075\010\076" +
    "\013\115\030\116\046\001\002\000\014\012\u0197\013\u0198" +
    "\014\u0196\015\u019b\016\u01b9\001\002\000\004\051\u01bd\001" +
    "\002\000\004\051\u01ba\001\002\000\034\006\021\017\032" +
    "\020\045\053\017\065\016\067\020\071\041\072\012\073" +
    "\024\074\031\075\010\115\030\116\046\001\002\000\036" +
    "\006\021\017\032\020\045\052\u01bc\053\017\065\016\067" +
    "\020\071\041\072\012\073\024\074\031\075\010\115\030" +
    "\116\046\001\002\000\042\002\uff46\006\uff46\017\uff46\020" +
    "\uff46\052\uff46\053\uff46\065\uff46\067\uff46\071\uff46\072\uff46" +
    "\073\uff46\074\uff46\075\uff46\076\uff46\115\uff46\116\uff46\001" +
    "\002\000\040\006\021\017\032\020\045\052\uff3e\053\017" +
    "\065\016\067\020\071\041\072\012\073\024\074\031\075" +
    "\010\076\013\115\030\116\046\001\002\000\004\052\u01bf" +
    "\001\002\000\042\002\uff42\006\uff42\017\uff42\020\uff42\052" +
    "\uff42\053\uff42\065\uff42\067\uff42\071\uff42\072\uff42\073\uff42" +
    "\074\uff42\075\uff42\076\uff42\115\uff42\116\uff42\001\002\000" +
    "\004\052\u01c1\001\002\000\042\002\uff44\006\uff44\017\uff44" +
    "\020\uff44\052\uff44\053\uff44\065\uff44\067\uff44\071\uff44\072" +
    "\uff44\073\uff44\074\uff44\075\uff44\076\uff44\115\uff44\116\uff44" +
    "\001\002\000\006\030\uff3d\046\uff3d\001\002\000\012\012" +
    "\u0197\013\u0198\014\u0196\015\u019b\001\002\000\006\030\uff3b" +
    "\046\uff3b\001\002\000\004\066\u01c6\001\002\000\004\027" +
    "\u01c7\001\002\000\040\004\106\005\071\006\100\007\113" +
    "\010\076\011\111\021\117\022\061\027\063\036\073\054" +
    "\104\055\070\056\116\057\102\077\103\001\002\000\006" +
    "\030\uff48\046\uff48\001\002\000\006\030\u01cb\046\u01ca\001" +
    "\002\000\040\004\106\005\071\006\100\007\113\010\076" +
    "\011\111\021\117\022\061\027\063\036\073\054\104\055" +
    "\070\056\116\057\102\077\103\001\002\000\004\050\u01cc" +
    "\001\002\000\042\002\uff4a\006\uff4a\017\uff4a\020\uff4a\052" +
    "\uff4a\053\uff4a\065\uff4a\067\uff4a\071\uff4a\072\uff4a\073\uff4a" +
    "\074\uff4a\075\uff4a\076\uff4a\115\uff4a\116\uff4a\001\002\000" +
    "\006\030\uff49\046\uff49\001\002\000\006\046\uffdc\050\uffdc" +
    "\001\002\000\006\046\u01d7\050\u01d8\001\002\000\006\033" +
    "\u01d1\047\u01d2\001\002\000\040\004\106\005\071\006\100" +
    "\007\113\010\076\011\111\021\117\022\061\027\063\036" +
    "\073\054\104\055\070\056\116\057\102\077\103\001\002" +
    "\000\012\012\u0197\013\u0198\014\u0196\015\u019b\001\002\000" +
    "\010\033\u01d4\046\uffd9\050\uffd9\001\002\000\040\004\106" +
    "\005\071\006\100\007\113\010\076\011\111\021\117\022" +
    "\061\027\063\036\073\054\104\055\070\056\116\057\102" +
    "\077\103\001\002\000\006\046\uffdb\050\uffdb\001\002\000" +
    "\006\046\uffda\050\uffda\001\002\000\004\006\u01d0\001\002" +
    "\000\076\002\uffde\004\uffde\005\uffde\006\uffde\007\uffde\010" +
    "\uffde\011\uffde\017\uffde\020\uffde\021\uffde\022\uffde\027\uffde" +
    "\036\uffde\052\uffde\053\uffde\054\uffde\055\uffde\056\uffde\057" +
    "\uffde\065\uffde\067\uffde\071\uffde\072\uffde\073\uffde\074\uffde" +
    "\075\uffde\076\uffde\077\uffde\115\uffde\116\uffde\001\002\000" +
    "\006\046\uffdd\050\uffdd\001\002\000\004\050\u01dc\001\002" +
    "\000\042\002\uff39\006\uff39\017\uff39\020\uff39\052\uff39\053" +
    "\uff39\065\uff39\067\uff39\071\uff39\072\uff39\073\uff39\074\uff39" +
    "\075\uff39\076\uff39\115\uff39\116\uff39\001\002\000\042\002" +
    "\uff3a\006\uff3a\017\uff3a\020\uff3a\052\uff3a\053\uff3a\065\uff3a" +
    "\067\uff3a\071\uff3a\072\uff3a\073\uff3a\074\uff3a\075\uff3a\076" +
    "\uff3a\115\uff3a\116\uff3a\001\002\000\040\004\106\005\071" +
    "\006\100\007\113\010\076\011\111\021\117\022\061\027" +
    "\063\036\073\054\104\055\070\056\116\057\102\077\103" +
    "\001\002\000\004\030\u01df\001\002\000\004\051\u01e0\001" +
    "\002\000\040\006\021\017\032\020\045\052\uff3e\053\017" +
    "\065\016\067\020\071\041\072\012\073\024\074\031\075" +
    "\010\076\013\115\030\116\046\001\002\000\004\052\u01e2" +
    "\001\002\000\042\002\uff24\006\uff24\017\uff24\020\uff24\052" +
    "\uff24\053\uff24\065\uff24\067\uff24\071\uff24\072\uff24\073\uff24" +
    "\074\uff24\075\uff24\076\uff24\115\uff24\116\uff24\001\002\000" +
    "\042\002\uff2a\006\uff2a\017\uff2a\020\uff2a\052\uff2a\053\uff2a" +
    "\065\uff2a\067\uff2a\071\uff2a\072\uff2a\073\uff2a\074\uff2a\075" +
    "\uff2a\076\uff2a\115\uff2a\116\uff2a\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01e1\000\054\002\024\003\005\004\006\005\022\007" +
    "\036\010\013\015\021\022\043\040\014\042\003\050\041" +
    "\051\042\055\004\057\010\060\032\061\033\062\026\064" +
    "\034\065\035\066\025\067\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\005\u0140\007" +
    "\036\010\013\015\021\022\043\040\014\042\003\050\041" +
    "\051\042\055\004\057\010\060\032\061\033\062\026\064" +
    "\034\065\035\066\025\067\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\006\u01d9\016" +
    "\111\017\106\020\104\021\107\023\065\024\100\025\073" +
    "\026\066\027\071\030\063\031\064\032\117\034\061\035" +
    "\113\036\114\037\076\001\001\000\006\011\u01cd\012\u01ce" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\052\053\053\054\054\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\052\u0152\053\u0153" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\004\u013d\005\022\007\036\010\013\015\021" +
    "\022\043\040\014\042\003\045\u0150\050\041\051\042\055" +
    "\004\057\010\060\032\061\033\062\026\064\034\065\035" +
    "\066\025\067\037\001\001\000\002\001\001\000\044\006" +
    "\074\016\111\017\106\020\104\021\107\023\065\024\100" +
    "\025\073\026\066\027\071\030\063\031\064\032\117\034" +
    "\061\035\113\036\114\037\076\001\001\000\030\016\u014f" +
    "\017\106\025\073\026\066\027\071\031\122\032\127\034" +
    "\120\035\126\036\114\037\123\001\001\000\002\001\001" +
    "\000\036\016\u014c\017\106\023\u014a\024\u014b\025\073\026" +
    "\066\027\071\030\235\031\236\032\127\034\120\035\126" +
    "\036\114\037\123\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\016\u0142\017" +
    "\106\023\065\024\u0141\025\073\026\066\027\071\030\235" +
    "\031\236\032\127\034\120\035\126\036\114\037\123\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\016\125\017\106\025\073\026\066\027\071\031\122" +
    "\032\127\034\120\035\126\036\114\037\123\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\016\232\017\106" +
    "\025\073\026\066\027\071\031\122\032\127\034\120\035" +
    "\126\036\114\037\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\016\141\017\106\025\073" +
    "\026\066\027\071\031\122\032\127\034\120\035\126\036" +
    "\114\037\123\001\001\000\030\016\140\017\106\025\073" +
    "\026\066\027\071\031\122\032\127\034\120\035\126\036" +
    "\114\037\123\001\001\000\030\016\137\017\106\025\073" +
    "\026\066\027\071\031\122\032\127\034\120\035\126\036" +
    "\114\037\123\001\001\000\030\016\136\017\106\025\073" +
    "\026\066\027\071\031\122\032\127\034\120\035\126\036" +
    "\114\037\123\001\001\000\030\016\135\017\106\025\073" +
    "\026\066\027\071\031\122\032\127\034\120\035\126\036" +
    "\114\037\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\006\145\016\111\017\106\020\104" +
    "\021\107\023\065\024\100\025\073\026\066\027\071\030" +
    "\063\031\064\032\117\034\061\035\113\036\114\037\076" +
    "\056\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\016\157\017\106\025\073\026\066\027\071" +
    "\031\122\032\127\033\156\034\120\035\126\036\114\037" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\006" +
    "\164\016\111\017\106\020\104\021\107\023\065\024\100" +
    "\025\073\026\066\027\071\030\063\031\064\032\117\034" +
    "\061\035\113\036\114\037\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\006\212\016\111\017\106\020\104\021\107\023\065" +
    "\024\100\025\073\026\066\027\071\030\063\031\064\032" +
    "\117\034\061\035\113\036\114\037\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\016\157\017\106\025\073\026\066\027\071\031" +
    "\122\032\127\033\201\034\120\035\126\036\114\037\123" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\006\206\016\111\017\106" +
    "\020\104\021\107\023\065\024\100\025\073\026\066\027" +
    "\071\030\063\031\064\032\117\034\061\035\113\036\114" +
    "\037\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\016\157\017\106\025\073" +
    "\026\066\027\071\031\122\032\127\033\221\034\120\035" +
    "\126\036\114\037\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\006" +
    "\226\016\111\017\106\020\104\021\107\023\065\024\100" +
    "\025\073\026\066\027\071\030\063\031\064\032\117\034" +
    "\061\035\113\036\114\037\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\016\240\017\106" +
    "\023\065\024\237\025\073\026\066\027\071\030\235\031" +
    "\236\032\127\034\120\035\126\036\241\037\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\016\157" +
    "\017\106\025\073\026\066\027\071\031\122\032\127\033" +
    "\252\034\120\035\126\036\114\037\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\006\257\016\111\017\106\020\104\021\107" +
    "\023\065\024\100\025\073\026\066\027\071\030\063\031" +
    "\064\032\117\034\061\035\113\036\114\037\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\016\305\017\106\025\073\026\066" +
    "\027\071\031\302\032\127\034\120\035\126\036\114\037" +
    "\123\001\001\000\030\016\301\017\106\025\073\026\066" +
    "\027\071\031\122\032\127\034\120\035\126\036\114\037" +
    "\123\001\001\000\030\016\300\017\106\025\073\026\066" +
    "\027\071\031\122\032\127\034\120\035\126\036\114\037" +
    "\123\001\001\000\002\001\001\000\030\016\277\017\106" +
    "\025\073\026\066\027\071\031\122\032\127\034\120\035" +
    "\126\036\114\037\123\001\001\000\030\016\276\017\106" +
    "\025\073\026\066\027\071\031\273\032\127\034\120\035" +
    "\126\036\114\037\123\001\001\000\030\016\272\017\106" +
    "\025\073\026\066\027\071\031\122\032\127\034\120\035" +
    "\126\036\114\037\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\016\312\017\106\023\065\024\313" +
    "\025\073\026\066\027\071\030\235\031\236\032\127\034" +
    "\120\035\126\036\114\037\123\001\001\000\002\001\001" +
    "\000\036\016\312\017\106\023\065\024\311\025\073\026" +
    "\066\027\071\030\235\031\236\032\127\034\120\035\126" +
    "\036\114\037\123\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\016\321\017\106\025\073" +
    "\026\066\027\071\031\320\032\127\034\120\035\126\036" +
    "\114\037\123\001\001\000\030\016\317\017\106\025\073" +
    "\026\066\027\071\031\316\032\127\034\120\035\126\036" +
    "\114\037\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\327\001" +
    "\001\000\004\030\324\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\016\157\017\106\025\073\026\066" +
    "\027\071\031\122\032\127\033\341\034\120\035\126\036" +
    "\114\037\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\006\346\016" +
    "\111\017\106\020\104\021\107\023\065\024\100\025\073" +
    "\026\066\027\071\030\063\031\064\032\117\034\061\035" +
    "\113\036\114\037\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\016" +
    "\363\017\106\025\073\026\066\027\071\030\360\031\122" +
    "\032\127\034\120\035\126\036\114\037\123\001\001\000" +
    "\032\016\357\017\106\025\073\026\066\027\071\030\354" +
    "\031\122\032\127\034\120\035\126\036\114\037\123\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\016\366\017\106" +
    "\023\065\024\365\025\073\026\066\027\071\030\235\031" +
    "\236\032\127\034\120\035\126\036\367\037\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\016\u010a\017\106\025\073\026\066\027" +
    "\071\031\122\032\127\034\120\035\126\036\114\037\123" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\016" +
    "\u010d\017\106\025\073\026\066\027\071\031\122\032\127" +
    "\034\120\035\126\036\114\037\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\016\u0110\017\106\025\073" +
    "\026\066\027\071\031\122\032\127\034\120\035\126\036" +
    "\114\037\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\016\u0113\017\106\025\073\026\066\027\071\031" +
    "\122\032\127\034\120\035\126\036\114\037\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\016\u0116\017" +
    "\106\025\073\026\066\027\071\031\122\032\127\034\120" +
    "\035\126\036\114\037\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\016\u0119\017\106\025\073\026\066" +
    "\027\071\031\122\032\127\034\120\035\126\036\114\037" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\016\u011c\017\106\025\073\026\066\027\071\031\122\032" +
    "\127\034\120\035\126\036\114\037\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\016\u011f\017\106\025" +
    "\073\026\066\027\071\031\122\032\127\034\120\035\126" +
    "\036\114\037\123\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\016\u0124" +
    "\017\106\025\073\026\066\027\071\031\122\032\127\034" +
    "\120\035\126\036\114\037\123\001\001\000\002\001\001" +
    "\000\030\016\u0126\017\106\025\073\026\066\027\071\031" +
    "\122\032\127\034\120\035\126\036\114\037\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\016\u012a\017" +
    "\106\023\065\024\u0129\025\073\026\066\027\071\030\235" +
    "\031\236\032\127\034\120\035\126\036\u012b\037\123\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\016\u013a\017\106" +
    "\025\073\026\066\027\071\030\u0137\031\122\032\127\034" +
    "\120\035\126\036\114\037\123\001\001\000\032\016\u0136" +
    "\017\106\025\073\026\066\027\071\030\u0133\031\122\032" +
    "\127\034\120\035\126\036\114\037\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\004\u013d\005" +
    "\022\007\036\010\013\015\021\022\043\040\014\042\003" +
    "\045\u013e\050\041\051\042\055\004\057\010\060\032\061" +
    "\033\062\026\064\034\065\035\066\025\067\037\001\001" +
    "\000\046\005\u0140\007\036\010\013\015\021\022\043\040" +
    "\014\042\003\050\041\051\042\055\004\057\010\060\032" +
    "\061\033\062\026\064\034\065\035\066\025\067\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\016\u0145\017" +
    "\106\023\065\024\u0144\025\073\026\066\027\071\030\235" +
    "\031\236\032\127\034\120\035\126\036\u0146\037\123\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\007\u0156\010\013\015\u0157\001\001\000\002\001" +
    "\001\000\036\016\312\017\106\023\065\024\u0164\025\073" +
    "\026\066\027\071\030\235\031\236\032\127\034\120\035" +
    "\126\036\114\037\123\001\001\000\036\016\312\017\106" +
    "\023\065\024\u0158\025\073\026\066\027\071\030\235\031" +
    "\236\032\127\034\120\035\126\036\114\037\123\001\001" +
    "\000\002\001\001\000\010\020\u015c\021\u015d\063\u015a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\006\u015f\016\111\017\106\020" +
    "\104\021\107\023\065\024\100\025\073\026\066\027\071" +
    "\030\063\031\064\032\117\034\061\035\113\036\114\037" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\004\u013d\005\022\007\036\010\013\015\021\022\043\040" +
    "\014\042\003\045\u0162\050\041\051\042\055\004\057\010" +
    "\060\032\061\033\062\026\064\034\065\035\066\025\067" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\020\u015c\021\u015d\063\u0166\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\004\u013d\005\022" +
    "\007\036\010\013\015\021\022\043\040\014\042\003\045" +
    "\u0169\050\041\051\042\055\004\057\010\060\032\061\033" +
    "\062\026\064\034\065\035\066\025\067\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\006\u016c\014\u016d" +
    "\016\111\017\106\020\104\021\107\023\065\024\100\025" +
    "\073\026\066\027\071\030\063\031\064\032\117\034\061" +
    "\035\113\036\114\037\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\006\u0171\016\111\017\106\020\104\021\107\023\065\024" +
    "\100\025\073\026\066\027\071\030\063\031\064\032\117" +
    "\034\061\035\113\036\114\037\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\004\u013d\005\022\007\036\010\013\015\021\022" +
    "\043\040\014\042\003\045\u0176\050\041\051\042\055\004" +
    "\057\010\060\032\061\033\062\026\064\034\065\035\066" +
    "\025\067\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\006\u017a\016\111\017\106\020" +
    "\104\021\107\023\065\024\100\025\073\026\066\027\071" +
    "\030\063\031\064\032\117\034\061\035\113\036\114\037" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\006\145\016\111\017" +
    "\106\020\104\021\107\023\065\024\100\025\073\026\066" +
    "\027\071\030\063\031\064\032\117\034\061\035\113\036" +
    "\114\037\076\056\u0181\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\006\u0188\016\111\017\106\020\104\021\107\023" +
    "\065\024\100\025\073\026\066\027\071\030\063\031\064" +
    "\032\117\034\061\035\113\036\114\037\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\004\u013d\005\022" +
    "\007\036\010\013\015\021\022\043\040\014\042\003\045" +
    "\u018b\050\041\051\042\055\004\057\010\060\032\061\033" +
    "\062\026\064\034\065\035\066\025\067\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\043\u018f\044\u0191\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\004\u013d" +
    "\005\022\007\036\010\013\015\021\022\043\040\014\042" +
    "\003\045\u01b1\050\041\051\042\055\004\057\010\060\032" +
    "\061\033\062\026\064\034\065\035\066\025\067\037\001" +
    "\001\000\004\013\u0198\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\007\u01a8\010\013\015\u01a1" +
    "\022\u01ab\040\u01a0\042\u019c\046\u019f\047\u01aa\051\042\055" +
    "\u019d\057\u019e\060\u01a4\061\u01a5\062\u01a2\064\u01a6\065\u01a7" +
    "\066\u01a3\067\u01a9\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\007\u01a8\010\013\015\u01a1" +
    "\022\u01ab\040\u01a0\042\u019c\047\u01ad\051\042\055\u019d\057" +
    "\u019e\060\u01a4\061\u01a5\062\u01a2\064\u01a6\065\u01a7\066\u01a3" +
    "\067\u01a9\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\004\u013d\005" +
    "\022\007\036\010\013\015\021\022\043\040\014\042\003" +
    "\045\u01af\050\041\051\042\055\004\057\010\060\032\061" +
    "\033\062\026\064\034\065\035\066\025\067\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\043\u01c1\001\001\000\002\001\001" +
    "\000\052\004\u013d\005\022\007\036\010\013\015\021\022" +
    "\043\040\014\042\003\045\u01bf\050\041\051\042\055\004" +
    "\057\010\060\032\061\033\062\026\064\034\065\035\066" +
    "\025\067\037\001\001\000\004\013\u01b7\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\007\u01a8\010\013\015" +
    "\u01a1\022\u01ab\040\u01a0\042\u019c\046\u01ba\047\u01aa\051\042" +
    "\055\u019d\057\u019e\060\u01a4\061\u01a5\062\u01a2\064\u01a6\065" +
    "\u01a7\066\u01a3\067\u01a9\001\001\000\044\007\u01a8\010\013" +
    "\015\u01a1\022\u01ab\040\u01a0\042\u019c\047\u01ad\051\042\055" +
    "\u019d\057\u019e\060\u01a4\061\u01a5\062\u01a2\064\u01a6\065\u01a7" +
    "\066\u01a3\067\u01a9\001\001\000\002\001\001\000\052\004" +
    "\u013d\005\022\007\036\010\013\015\021\022\043\040\014" +
    "\042\003\045\u01bd\050\041\051\042\055\004\057\010\060" +
    "\032\061\033\062\026\064\034\065\035\066\025\067\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\u01c3" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\006\u01c7\016\111\017\106\020\104\021\107" +
    "\023\065\024\100\025\073\026\066\027\071\030\063\031" +
    "\064\032\117\034\061\035\113\036\114\037\076\041\u01c8" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\006" +
    "\u01cc\016\111\017\106\020\104\021\107\023\065\024\100" +
    "\025\073\026\066\027\071\030\063\031\064\032\117\034" +
    "\061\035\113\036\114\037\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\006\u016c\014\u01d5" +
    "\016\111\017\106\020\104\021\107\023\065\024\100\025" +
    "\073\026\066\027\071\030\063\031\064\032\117\034\061" +
    "\035\113\036\114\037\076\001\001\000\004\013\u01d2\001" +
    "\001\000\002\001\001\000\046\006\u016c\014\u01d4\016\111" +
    "\017\106\020\104\021\107\023\065\024\100\025\073\026" +
    "\066\027\071\030\063\031\064\032\117\034\061\035\113" +
    "\036\114\037\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\u01d8\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\006\u01dd\016\111\017\106\020\104\021\107" +
    "\023\065\024\100\025\073\026\066\027\071\030\063\031" +
    "\064\032\117\034\061\035\113\036\114\037\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\004\u013d\005" +
    "\022\007\036\010\013\015\021\022\043\040\014\042\003" +
    "\045\u01e0\050\041\051\042\055\004\057\010\060\032\061" +
    "\033\062\026\064\034\065\035\066\025\067\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public Parser(Lexer lexer) {
        super(lexer);
    }

    public ArrayList<Instruction> instructions = new ArrayList<>();

    //Array errores
    
    public static ArrayList<Error_analizadores> errores = Lexer.errores;
    public int contador_errores_lexico_sintacticos = 0;
    public ArrayList<Error_analizadores> erroresSemanticos = new ArrayList<>();
    public int contador_errores_semanticos = 0;

    //Metodo llamado automaticamente al encontrar error sintanctico

    public void syntax_error(Symbol s){

    

    if(s.sym == 0){

    errores.add( new Error_analizadores("Sintactico", "No se esperaba el fin del archivo ") );
    contador_errores_lexico_sintacticos++;

    }else{

        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        errores.add( new Error_analizadores("Sintactico", lexema, fila, columna, "No se esperaba este token") );
        contador_errores_lexico_sintacticos++;
        //System.out.println("Error Sintactico hallado");
        //System.out.println("Lexema " + lexema + " linea"  + fila + " columna " + columna);
    }

    
    }

    //Metodo llamado cuando no se puede recuperar de un error
    
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 

    
        
    if(s.sym == 0){

    errores.add( new Error_analizadores("Sintactico", "No se esperaba el fin del archivo ") );
    contador_errores_lexico_sintacticos++;

    }else{

        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        contador_errores_lexico_sintacticos++;
        errores.add( new Error_analizadores("Sintactico", lexema, fila, columna, "No se esperaba este token") );
        //System.out.println("Error Sintactico hallado");
        //System.out.println("Lexema " + lexema + " linea"  + fila + " columna " + columna);
    }
        
    } 



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= ts 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("Doc ok"); 
                   
                

             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ts ::= instrucciones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                        for(int i =0; i<a.size();i++){
                                            instructions.add((Instruction) a.get(i));
                                       }

  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ts",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instrucciones opciones_instrucciones 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList b = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

                                        for(int i =0; i<b.size();i++){
                                            a.add(b.get(i));
                                       }

                                       RESULT = a;                             
                                            
                                                            
                                         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instrucciones ::= opciones_instrucciones 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  

                                       //cae arrayList   
                                       ArrayList tmp_instrucciones = new ArrayList()  ;
                                       for(int i =0; i<a.size();i++){
                                            tmp_instrucciones.add(a.get(i));
                                       }

                                       RESULT = tmp_instrucciones;
                                         
                                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // opciones_instrucciones ::= declaracion_variable 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                            
                                            RESULT = a;

                                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // opciones_instrucciones ::= asignacion 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                            
                                            RESULT = a;

                                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // opciones_instrucciones ::= funcion_console_log 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                           RESULT = a;
                                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // opciones_instrucciones ::= declaracion_funcion 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                            RESULT = a;
                                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // opciones_instrucciones ::= llamada_funcion_normal 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                           RESULT = a;
                                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // opciones_instrucciones ::= opciones_if 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                            RESULT = a;
                                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // opciones_instrucciones ::= funcion_return 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                            RESULT = a;
                                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // opciones_instrucciones ::= instruccion_break 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                           RESULT = a;
                                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // opciones_instrucciones ::= instruccion_continue 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                           RESULT = a;
                                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // opciones_instrucciones ::= funcion_incremento_decremento 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                            RESULT = a;
                                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // opciones_instrucciones ::= funcion_for 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                          RESULT = a;
                                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // opciones_instrucciones ::= funcion_while 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                           RESULT = a;
                                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // opciones_instrucciones ::= funcion_do_while 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                             RESULT = a;
                                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // opciones_instrucciones ::= funcion_printAst 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                           RESULT = a;
                                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // opciones_instrucciones ::= funcion_getSymbolTable 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                            RESULT = a;
                                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // opciones_instrucciones_sin_return ::= declaracion_variable 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                            RESULT = a;
                                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones_sin_return",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // opciones_instrucciones_sin_return ::= asignacion 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                            RESULT = a;
                                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones_sin_return",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // opciones_instrucciones_sin_return ::= funcion_console_log 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                            RESULT = a;
                                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones_sin_return",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // opciones_instrucciones_sin_return ::= declaracion_funcion 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                            RESULT = a;
                                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones_sin_return",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // opciones_instrucciones_sin_return ::= llamada_funcion_normal 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                            RESULT = a;
                                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones_sin_return",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // opciones_instrucciones_sin_return ::= opciones_if 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                            RESULT = a;
                                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones_sin_return",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // opciones_instrucciones_sin_return ::= instruccion_break 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                            RESULT = a;
                                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones_sin_return",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // opciones_instrucciones_sin_return ::= instruccion_continue 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                            RESULT = a;
                                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones_sin_return",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // opciones_instrucciones_sin_return ::= funcion_incremento_decremento 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                            RESULT = a;
                                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones_sin_return",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // opciones_instrucciones_sin_return ::= funcion_for 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                            RESULT = a;
                                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones_sin_return",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // opciones_instrucciones_sin_return ::= funcion_while 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                            RESULT = a;
                                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones_sin_return",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // opciones_instrucciones_sin_return ::= funcion_do_while 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                            RESULT = a;
                                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones_sin_return",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // opciones_instrucciones_sin_return ::= funcion_printAst 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                            RESULT = a;
                                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones_sin_return",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // opciones_instrucciones_sin_return ::= funcion_getSymbolTable 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                            RESULT = a;
                                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones_sin_return",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // asignacion ::= ID ASIGNACION variable_valor PUNTO_COMA 
            {
              ArrayList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int igualleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object igual = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int puntoComaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int puntoComaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object puntoComa = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                                                                    
            ArrayList tmp_asignacion = new ArrayList();
            tmp_asignacion.add(new Assignment(idright,idleft,id,value));
            RESULT = tmp_asignacion;
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declaracion_variable ::= tipo_acceso_variable id_valor_variable_lista PUNTO_COMA 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList b = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 

                ArrayList tmp_declaracion = new ArrayList();

                for(int i = 0;i<b.size();i++){

                    Variable_Aux variable = (Variable_Aux) b.get(i);    
                    tmp_declaracion.add(new Declaration(aright,aleft,a,variable.getType(),variable.getId(),variable.getValue()));
                }

                RESULT = tmp_declaracion;
           
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_variable",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // id_valor_variable_lista ::= id_valor_variable_lista COMA id_valor_variable 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

                            a.add(c);
                            RESULT = a;
                                                  
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_valor_variable_lista",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // id_valor_variable_lista ::= id_valor_variable 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            
                                RESULT = new ArrayList<>(); RESULT.add(a);

                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_valor_variable_lista",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // id_valor_variable ::= ID DOS_PUNTOS tipo_dato_variable ASIGNACION variable_valor 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tipoDatoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tipoDatoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object tipoDato = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                          //id:number = 34;
                          RESULT = new Variable_Aux(id,tipoDato,valor);

                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_valor_variable",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // id_valor_variable ::= ID ASIGNACION variable_valor 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                           //id = 34;                   

                        RESULT = new Variable_Aux(id,VariableType.PENDIENTE,valor);                        
                           
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_valor_variable",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // id_valor_variable ::= ID DOS_PUNTOS tipo_dato_variable 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tipoDatoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tipoDatoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tipoDato = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        //let hola:number;
                        Value value = new Value(idright,idleft,"undefined",ValueType.UNDEFINED);
                        RESULT = new Variable_Aux(id,tipoDato,value);                        
                        
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_valor_variable",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tipo_acceso_variable ::= RCONST 
            {
              Object RESULT =null;
		
                                    RESULT = AccessType.CONST;
                               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_acceso_variable",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tipo_acceso_variable ::= RLET 
            {
              Object RESULT =null;
		 
                                     RESULT = AccessType.LET;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_acceso_variable",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // tipo_dato_variable ::= RNUMBER 
            {
              Object RESULT =null;
		int rnumberleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rnumberright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rnumber = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                           RESULT = VariableType.NUMBER; 
                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato_variable",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // tipo_dato_variable ::= RBIGINT 
            {
              Object RESULT =null;
		int rbigintleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rbigintright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rbigint = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                     
                                            RESULT = VariableType.BIGINT;        
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato_variable",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // tipo_dato_variable ::= RSTRING 
            {
              Object RESULT =null;
		int rstringleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rstringright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rstring = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                        
                                            RESULT = VariableType.STRING;     

                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato_variable",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // tipo_dato_variable ::= RBOOLEAN 
            {
              Object RESULT =null;
		int rbooleanleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rbooleanright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rboolean = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 

                                            RESULT = VariableType.BOOLEAN;                                                 

                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato_variable",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // variable_valor ::= instruccion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                    RESULT = a;
                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_valor",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // instruccion ::= operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                
                                            RESULT = a;

                                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // instruccion ::= operaciones_logicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                
                                            RESULT = a;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // instruccion ::= funcion_boolean 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                          RESULT = a;      
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // instruccion ::= funcion_string 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

                                                RESULT = a;
                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // instruccion ::= funcion_char_at 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                                
                                                RESULT = a;

                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // instruccion ::= funcion_to_lower_case 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                
                                                RESULT = a;

                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // instruccion ::= funcion_to_upper_case 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                
                                                RESULT = a;

                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // instruccion ::= funcion_concat 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                
                                                RESULT = a;

                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // instruccion ::= incremento 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                RESULT = a;
                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // instruccion ::= decremento 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                RESULT = a;
                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // operaciones_matematicas ::= MENOS operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                             
                                           RESULT = new Minus(aright,aleft,b);

                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // operaciones_matematicas ::= MAS operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                             RESULT = b;
                                            
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // operaciones_matematicas ::= operaciones_matematicas MAS operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                          
                                        RESULT = new BinaryOperation(aright,aleft,OperationType.SUMA,a,c);

                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // operaciones_matematicas ::= operaciones_matematicas MENOS operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        
                                        RESULT = new BinaryOperation(aright,aleft,OperationType.RESTA,a,c);                                             
                                            
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // operaciones_matematicas ::= operaciones_matematicas MULTIPLICACION operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            
                                        RESULT = new BinaryOperation(aright,aleft,OperationType.MULTIPLICACION,a,c);                                              
                                            
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // operaciones_matematicas ::= operaciones_matematicas DIVISION operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                             
                                        RESULT = new BinaryOperation(aright,aleft,OperationType.DIVISION,a,c);

                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // operaciones_matematicas ::= operaciones_matematicas MOD operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        
                                        RESULT = new BinaryOperation(aright,aleft,OperationType.MOD,a,c);

                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // operaciones_matematicas ::= PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                             
                                            RESULT = b;
                                            
                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // operaciones_matematicas ::= funcion_number 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                             RESULT = a;
                                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // operaciones_matematicas ::= funcion_bigint 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                             RESULT = a;
                                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // operaciones_matematicas ::= funcion_length 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                             RESULT = a;
                                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // operaciones_matematicas ::= funciones_numericas_estaticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                     RESULT = a;
                                                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // operaciones_matematicas ::= NUMBER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                     
                                     RESULT = new Value(aright,aleft,a,ValueType.NUMBER);

                                   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // operaciones_matematicas ::= BIGINT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                     
                                     RESULT = new Value(aright,aleft,a,ValueType.BIGINT);   

                                   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // operaciones_matematicas ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                    
                                    RESULT = new Value(aright,aleft,a,ValueType.ID);

                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // operaciones_matematicas ::= TEXTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                    
                                    RESULT = new Value(aright,aleft,a,ValueType.TEXTO);
                                        
                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // operaciones_matematicas ::= ID PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

                              //id();
                              RESULT =  new Call_Simple_Function(aright,aleft,a);

                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // operaciones_matematicas ::= ID PARENTESIS_ABIERTO parametros_funcion_asignacion PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Instruction> c = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

                                RESULT = new Call_Parameters_Function(aright,aleft,a,c);

                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // funciones_numericas_estaticas ::= MATH PUNTO ABS PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    RESULT = new Function_Math(aright,aleft,MathType.ABS,e);
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // funciones_numericas_estaticas ::= MATH PUNTO CEIL PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    RESULT = new Function_Math(aright,aleft,MathType.CEIL,e);
                                        
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // funciones_numericas_estaticas ::= MATH PUNTO COS PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    RESULT = new Function_Math(aright,aleft,MathType.COS,e);
                                        
                               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // funciones_numericas_estaticas ::= MATH PUNTO SIN PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    RESULT = new Function_Math(aright,aleft,MathType.SIN,e);
                                        
                               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // funciones_numericas_estaticas ::= MATH PUNTO TAN PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

                                    RESULT = new Function_Math(aright,aleft,MathType.TAN,e);

                               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // funciones_numericas_estaticas ::= MATH PUNTO EXP PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

                                    RESULT = new Function_Math(aright,aleft,MathType.EXP,e);

                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // funciones_numericas_estaticas ::= MATH PUNTO FLOOR PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

                                    RESULT = new Function_Math(aright,aleft,MathType.FLOOR,e);

                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // funciones_numericas_estaticas ::= MATH PUNTO POW PARENTESIS_ABIERTO operaciones_matematicas COMA operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

                                    RESULT = new Function_Math(aright,aleft,MathType.POW,e,g);

                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // funciones_numericas_estaticas ::= MATH PUNTO SQRT PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            
                                    RESULT = new Function_Math(aright,aleft,MathType.SQRT,e);

                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // funciones_numericas_estaticas ::= MATH PUNTO RANDOM PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    
                                    RESULT = new Value(aright,aleft,Math.random()+"",ValueType.NUMBER);    

                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // funciones_numericas_estaticas ::= MATH PUNTO E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        
                                    RESULT = new Value(aright,aleft,Math.E+"",ValueType.NUMBER);    
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // funciones_numericas_estaticas ::= MATH PUNTO PI 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

                                    RESULT = new Value(aright,aleft,Math.PI+"",ValueType.NUMBER);    

                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // funciones_numericas_estaticas ::= MATH PUNTO SQRT2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    
                                    RESULT = new Value(aright,aleft,Math.sqrt(2)+"",ValueType.NUMBER);
                                        
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // incremento ::= ID INCREMENTO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int incrementoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int incrementoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object incremento = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                //id++
                    RESULT = new Increase(idright,idleft,id); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // decremento ::= ID DECREMENTO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int decrementoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decrementoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object decremento = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                     //id--
                     RESULT = new Decrement(idright,idleft,id);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decremento",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // funcion_incremento_decremento ::= ID INCREMENTO PUNTO_COMA 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    //id++;
                    ArrayList tmp_function_increase = new ArrayList();
                    tmp_function_increase.add(new Function_Increase(aright,aleft,a));
                    RESULT = tmp_function_increase;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_incremento_decremento",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // funcion_incremento_decremento ::= ID DECREMENTO PUNTO_COMA 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    //id--;
                    ArrayList tmp_function_decrement = new ArrayList();
                    tmp_function_decrement.add(new Function_Decrement(aright,aleft,a));
                    RESULT = tmp_function_decrement;

                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_incremento_decremento",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // operaciones_relacionales ::= operaciones_matematicas MAYOR_QUE operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = new BinaryOperation(aright,aleft,OperationType.MAYOR_QUE,a,c);
                                
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // operaciones_relacionales ::= operaciones_matematicas MAYOR_IGUAL operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = new BinaryOperation(aright,aleft,OperationType.MAYOR_IGUAL,a,c);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // operaciones_relacionales ::= operaciones_matematicas MENOR_QUE operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = new BinaryOperation(aright,aleft,OperationType.MENOR_QUE,a,c);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // operaciones_relacionales ::= operaciones_matematicas MENOR_IGUAL operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

                                RESULT = new BinaryOperation(aright,aleft,OperationType.MENOR_QUE,a,c);
                                
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // operaciones_relacionales ::= operaciones_matematicas COMPARACION operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = new BinaryOperation(aright,aleft,OperationType.COMPARACION,a,c);
                                
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // operaciones_relacionales ::= operaciones_matematicas DISTINTO operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = new BinaryOperation(aright,aleft,OperationType.DISTINTO,a,c);
                                
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // operaciones_relacionales ::= TRUE COMPARACION TRUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.COMPARACION,
                                new Value(aright,aleft,a,ValueType.TRUE),
                                new Value(aright,aleft,c,ValueType.TRUE));
                                
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // operaciones_relacionales ::= TRUE COMPARACION FALSE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                
                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.COMPARACION,
                                new Value(aright,aleft,a,ValueType.TRUE),
                                new Value(aright,aleft,c,ValueType.FALSE));
                                                                
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // operaciones_relacionales ::= FALSE COMPARACION TRUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.COMPARACION,
                                new Value(aright,aleft,a,ValueType.FALSE),
                                new Value(aright,aleft,c,ValueType.TRUE));
                                
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // operaciones_relacionales ::= FALSE COMPARACION FALSE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.COMPARACION,
                                new Value(aright,aleft,a,ValueType.FALSE),
                                new Value(aright,aleft,c,ValueType.FALSE));
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // operaciones_relacionales ::= operaciones_matematicas COMPARACION TRUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.COMPARACION,
                                a,
                                new Value(aright,aleft,c,ValueType.TRUE));
                                
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // operaciones_relacionales ::= TRUE COMPARACION operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                
                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.COMPARACION,
                                new Value(aright,aleft,c,ValueType.TRUE),
                                c);
                                
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // operaciones_relacionales ::= operaciones_matematicas COMPARACION FALSE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.COMPARACION,
                                a,
                                new Value(aright,aleft,c,ValueType.FALSE));
                                
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // operaciones_relacionales ::= FALSE COMPARACION operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                
                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.COMPARACION,
                                new Value(aright,aleft,c,ValueType.FALSE),
                                c);
                                
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // operaciones_relacionales ::= TRUE DISTINTO TRUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.DISTINTO,
                                new Value(aright,aleft,a,ValueType.TRUE),
                                new Value(aright,aleft,c,ValueType.TRUE));
                                
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // operaciones_relacionales ::= TRUE DISTINTO FALSE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.DISTINTO,
                                new Value(aright,aleft,a,ValueType.TRUE),
                                new Value(aright,aleft,c,ValueType.FALSE));
                                
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // operaciones_relacionales ::= FALSE DISTINTO TRUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.DISTINTO,
                                new Value(aright,aleft,a,ValueType.FALSE),
                                new Value(aright,aleft,c,ValueType.TRUE));
                                
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // operaciones_relacionales ::= FALSE DISTINTO FALSE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.DISTINTO,
                                new Value(aright,aleft,a,ValueType.FALSE),
                                new Value(aright,aleft,c,ValueType.FALSE));
                                
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // operaciones_relacionales ::= operaciones_matematicas DISTINTO TRUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.DISTINTO,
                                a,
                                new Value(aright,aleft,c,ValueType.TRUE));

                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // operaciones_relacionales ::= TRUE DISTINTO operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.DISTINTO,
                                new Value(aright,aleft,c,ValueType.TRUE),
                                c);                                  
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // operaciones_relacionales ::= operaciones_matematicas DISTINTO FALSE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.DISTINTO,
                                a,
                                new Value(aright,aleft,c,ValueType.FALSE));  
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // operaciones_relacionales ::= FALSE DISTINTO operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.DISTINTO,
                                new Value(aright,aleft,c,ValueType.FALSE),
                                c);                                  
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // operaciones_relacionales ::= TRUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    RESULT = new Value(aright,aleft,a,ValueType.TRUE);
                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // operaciones_relacionales ::= FALSE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    RESULT = new Value(aright,aleft,a,ValueType.FALSE);
                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // operaciones_relacionales ::= funcion_boolean COMPARACION TRUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                
                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.COMPARACION,
                                a,
                                new Value(aright,aleft,c,ValueType.TRUE));    

                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // operaciones_relacionales ::= funcion_boolean COMPARACION FALSE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.COMPARACION,
                                a,
                                new Value(aright,aleft,c,ValueType.FALSE));    
                               
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // operaciones_relacionales ::= TRUE COMPARACION funcion_boolean 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.COMPARACION,
                                new Value(aright,aleft,c,ValueType.TRUE),
                                c);

                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // operaciones_relacionales ::= FALSE COMPARACION funcion_boolean 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.COMPARACION,
                                new Value(aright,aleft,c,ValueType.FALSE),
                                c);
                                
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // operaciones_relacionales ::= funcion_boolean DISTINTO TRUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.DISTINTO,
                                a,
                                new Value(aright,aleft,c,ValueType.TRUE));
                                
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // operaciones_relacionales ::= funcion_boolean DISTINTO FALSE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.DISTINTO,
                                a,
                                new Value(aright,aleft,c,ValueType.FALSE));
                                
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // operaciones_relacionales ::= TRUE DISTINTO funcion_boolean 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.DISTINTO,
                                new Value(aright,aleft,c,ValueType.TRUE),
                                c);

                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // operaciones_relacionales ::= FALSE DISTINTO funcion_boolean 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.DISTINTO,
                                new Value(aright,aleft,c,ValueType.FALSE),
                                c);
                               
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // operaciones_relacionales ::= funcion_boolean COMPARACION funcion_boolean 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.COMPARACION,
                                a,
                                c);
                                 
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // operaciones_relacionales ::= funcion_boolean DISTINTO funcion_boolean 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.DISTINTO,
                                a,
                                c);
                                
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // operaciones_relacionales ::= funcion_string COMPARACION funcion_string 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.COMPARACION,
                                a,
                                c);

                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // operaciones_relacionales ::= funcion_string DISTINTO funcion_string 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.DISTINTO,
                                a,
                                c);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // operaciones_relacionales ::= funcion_string COMPARACION operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.COMPARACION,
                                a,
                                c);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // operaciones_relacionales ::= funcion_string DISTINTO operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.DISTINTO,
                                a,
                                c);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // operaciones_relacionales ::= operaciones_matematicas COMPARACION funcion_string 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.COMPARACION,
                                a,
                                c);
                                
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // operaciones_relacionales ::= operaciones_matematicas DISTINTO funcion_string 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = new BinaryOperation(aright,aleft,
                                OperationType.DISTINTO,
                                a,
                                c);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // operaciones_relacionales ::= PARENTESIS_ABIERTO operaciones_relacionales PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = b;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // operaciones_logicas ::= operaciones_logicas AND operaciones_logicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                
                                RESULT = new BinaryOperation(aright,aleft,OperationType.AND,a,c);
                                
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // operaciones_logicas ::= operaciones_logicas OR operaciones_logicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = new BinaryOperation(aright,aleft,OperationType.OR,a,c);
                                
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // operaciones_logicas ::= NOT operaciones_logicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = new Not(aright,aleft,b);
                                
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // operaciones_logicas ::= NOT operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = new Not(aright,aleft,b);
                                
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // operaciones_logicas ::= PARENTESIS_ABIERTO operaciones_logicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = b;
                                
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // operaciones_logicas ::= operaciones_relacionales 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                             RESULT = a;   
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // funcion_length ::= TEXTO PUNTO LENGTH 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                Value value = new Value(cright,cleft,c,ValueType.TEXTO);
                                RESULT = new Function_Length(aright,aleft,value);
                                
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_length",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // funcion_length ::= ID PUNTO LENGTH 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                Value value = new Value(aright,aleft,a,ValueType.ID);
                                RESULT = new Function_Length(aright,aleft,value);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_length",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // funcion_length ::= variables_string PUNTO LENGTH 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = new Function_Length(aright,aleft,a);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_length",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // funcion_length ::= ID PARENTESIS_ABIERTO PARENTESIS_CERRADO PUNTO LENGTH 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                      //id();
                      Call_Simple_Function tm1 = new Call_Simple_Function(aright,aleft,a);
                      RESULT = new Function_Length(aright,aleft,tm1);

                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_length",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // funcion_length ::= ID PARENTESIS_ABIERTO parametros_funcion_asignacion PARENTESIS_CERRADO PUNTO LENGTH 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<Instruction> c = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Call_Parameters_Function tm = new Call_Parameters_Function(aright,aleft,a,c);
                        RESULT = new Function_Length(aright,aleft,tm);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_length",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // funcion_number ::= FNUMBER PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                               RESULT = new Function_Number(aright,aleft,c);
                               
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_number",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // funcion_number ::= FNUMBER PARENTESIS_ABIERTO operaciones_logicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

                                RESULT = new Function_Number(aright,aleft,c);
                                
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_number",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // funcion_number ::= FNUMBER PARENTESIS_ABIERTO variables_string PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = new Function_Number(aright,aleft,c);
                                
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_number",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // funcion_bigint ::= FBIGINT PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = new Function_BigInt(aright,aleft,c);
                                
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_bigint",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // funcion_bigint ::= FBIGINT PARENTESIS_ABIERTO operaciones_logicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = new Function_BigInt(aright,aleft,c);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_bigint",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // funcion_bigint ::= FBIGINT PARENTESIS_ABIERTO variables_string PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              RESULT = new Function_BigInt(aright,aleft,c);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_bigint",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // funcion_boolean ::= FBOOLEAN PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

                                RESULT = new Function_Boolean(aright,aleft,c);

                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_boolean",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // funcion_boolean ::= FBOOLEAN PARENTESIS_ABIERTO operaciones_logicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                
                                RESULT = new Function_Boolean(aright,aleft,c);
                                                              
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_boolean",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // funcion_boolean ::= FBOOLEAN PARENTESIS_ABIERTO variables_string PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                
                                RESULT = new Function_Boolean(aright,aleft,c);
                               
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_boolean",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // funcion_string ::= FSTRING PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                
                                RESULT = new Function_String(aright,aleft,c);
                               
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_string",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // funcion_string ::= FSTRING PARENTESIS_ABIERTO operaciones_logicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                 
                                RESULT = new Function_String(aright,aleft,c);

                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_string",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // funcion_string ::= FSTRING PARENTESIS_ABIERTO variables_string PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                
                                RESULT = new Function_String(aright,aleft,c);
                                
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_string",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // funcion_char_at ::= ID PUNTO CHARAT PARENTESIS_ABIERTO index_char_at PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                Value value = new Value(aright,aleft,a,ValueType.ID);
                                RESULT = new Function_Char_At(aright,aleft,value,e);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_char_at",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // funcion_char_at ::= TEXTO PUNTO CHARAT PARENTESIS_ABIERTO index_char_at PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                Value value = new Value(aright,aleft,a,ValueType.TEXTO);
                                RESULT = new Function_Char_At(aright,aleft,value,e);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_char_at",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // funcion_char_at ::= variables_string PUNTO CHARAT PARENTESIS_ABIERTO index_char_at PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = new Function_Char_At(aright,aleft,a,e);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_char_at",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // funcion_char_at ::= ID PARENTESIS_ABIERTO PARENTESIS_CERRADO PUNTO CHARAT PARENTESIS_ABIERTO index_char_at PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                      //id();
                      Call_Simple_Function tm1 = new Call_Simple_Function(aright,aleft,a);
                      RESULT = new Function_Char_At(aright,aleft,tm1,g);

                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_char_at",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // funcion_char_at ::= ID PARENTESIS_ABIERTO parametros_funcion_asignacion PARENTESIS_CERRADO PUNTO CHARAT PARENTESIS_ABIERTO index_char_at PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		ArrayList<Instruction> c = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Call_Parameters_Function tm = new Call_Parameters_Function(aright,aleft,a,c);
                        RESULT = new Function_Char_At(aright,aleft,tm,h);    
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_char_at",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // index_char_at ::= operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = a;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("index_char_at",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // funcion_concat ::= variables_string PUNTO CONCAT PARENTESIS_ABIERTO instruccion PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Function_Concat(aright,aleft,a,e);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_concat",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // funcion_concat ::= TEXTO PUNTO CONCAT PARENTESIS_ABIERTO instruccion PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Value value = new Value(aright,aleft,a,ValueType.TEXTO);
                        RESULT = new Function_Concat(aright,aleft,value,e);

                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_concat",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // funcion_concat ::= ID PUNTO CONCAT PARENTESIS_ABIERTO instruccion PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Value value = new Value(aright,aleft,a,ValueType.ID);
                        RESULT = new Function_Concat(aright,aleft,value,e);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_concat",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // funcion_concat ::= ID PARENTESIS_ABIERTO PARENTESIS_CERRADO PUNTO CONCAT PARENTESIS_ABIERTO instruccion PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                      //id();
                      Call_Simple_Function tm1 = new Call_Simple_Function(aright,aleft,a);
                      RESULT = new Function_Concat(aright,aleft,tm1,g);

                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_concat",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // funcion_concat ::= ID PARENTESIS_ABIERTO parametros_funcion_asignacion PARENTESIS_CERRADO PUNTO CONCAT PARENTESIS_ABIERTO instruccion PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		ArrayList<Instruction> c = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

                        Call_Parameters_Function tm = new Call_Parameters_Function(aright,aleft,a,c);
                        RESULT = new Function_Concat(aright,aleft,tm,h);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_concat",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // variables_string ::= funcion_string 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                     RESULT = a;
                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables_string",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // variables_string ::= funcion_char_at 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                     RESULT = a;
                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables_string",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // variables_string ::= funcion_to_lower_case 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = a;
                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables_string",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // variables_string ::= funcion_to_upper_case 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = a;
                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables_string",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // variables_string ::= funcion_concat 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = a;
                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables_string",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // funcion_to_lower_case ::= ID PUNTO TOLOWERCASE PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            Value value = new Value(aright,aleft,a,ValueType.ID);
                            RESULT = new Function_Lower(aright,aleft,value);
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_to_lower_case",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // funcion_to_lower_case ::= TEXTO PUNTO TOLOWERCASE PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            Value value = new Value(aright,aleft,a,ValueType.TEXTO);
                            RESULT = new Function_Lower(aright,aleft,value);
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_to_lower_case",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // funcion_to_lower_case ::= variables_string PUNTO TOLOWERCASE PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            RESULT = new Function_Lower(aright,aleft,a);
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_to_lower_case",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // funcion_to_lower_case ::= ID PARENTESIS_ABIERTO PARENTESIS_CERRADO PUNTO TOLOWERCASE PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            //id();
                            Call_Simple_Function tm1 = new Call_Simple_Function(aright,aleft,a);
                            RESULT = new Function_Lower(aright,aleft,tm1);

                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_to_lower_case",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // funcion_to_lower_case ::= ID PARENTESIS_ABIERTO parametros_funcion_asignacion PARENTESIS_CERRADO PUNTO TOLOWERCASE PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ArrayList<Instruction> c = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            Call_Parameters_Function tm = new Call_Parameters_Function(aright,aleft,a,c);
                            RESULT = new Function_Lower(aright,aleft,tm);
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_to_lower_case",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // funcion_to_upper_case ::= ID PUNTO TOUPPERCASE PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            Value value = new Value(aright,aleft,a,ValueType.ID);
                            RESULT = new Function_Upper(aright,aleft,value);
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_to_upper_case",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // funcion_to_upper_case ::= TEXTO PUNTO TOUPPERCASE PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            Value value = new Value(aright,aleft,a,ValueType.TEXTO);
                            RESULT = new Function_Upper(aright,aleft,value);                              
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_to_upper_case",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // funcion_to_upper_case ::= variables_string PUNTO TOUPPERCASE PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            RESULT = new Function_Upper(aright,aleft,a);
                                                            
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_to_upper_case",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // funcion_to_upper_case ::= ID PARENTESIS_ABIERTO PARENTESIS_CERRADO PUNTO TOUPPERCASE PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            //id();
                            Call_Simple_Function tm1 = new Call_Simple_Function(aright,aleft,a);
                            RESULT = new Function_Upper(aright,aleft,tm1);

                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_to_upper_case",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // funcion_to_upper_case ::= ID PARENTESIS_ABIERTO parametros_funcion_asignacion PARENTESIS_CERRADO PUNTO TOUPPERCASE PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ArrayList<Instruction> c = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            Call_Parameters_Function tm = new Call_Parameters_Function(aright,aleft,a,c);
                            RESULT = new Function_Upper(aright,aleft,tm);
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_to_upper_case",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // funcion_console_log ::= CONSOLE PUNTO LOG PARENTESIS_ABIERTO lista_instrucciones_console PARENTESIS_CERRADO PUNTO_COMA 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Instruction> e = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                         
                        
                        ArrayList tmp_console = new ArrayList();
                        tmp_console.add(new Function_Console_Log(aright,aleft,e));
                        RESULT = tmp_console;

                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_console_log",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // lista_instrucciones_console ::= lista_instrucciones_console COMA instruccion 
            {
              ArrayList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Instruction> a = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                a.add((Instruction) c);
                                RESULT = a;                           
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instrucciones_console",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // lista_instrucciones_console ::= instruccion 
            {
              ArrayList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                RESULT = new ArrayList<>(); RESULT.add((Instruction) a);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instrucciones_console",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // declaracion_funcion ::= FUNCTION ID PARENTESIS_ABIERTO PARENTESIS_CERRADO DOS_PUNTOS RVOID CORCHETE_ABIERTO instrucciones_funciones_sin_return CORCHETE_CERRADO 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList h = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    //function id ():void{instructions}
    
    //RESULT = new Function_Void_Simple(aright,aleft,b,VariableType.VOID,h);
                        ArrayList tmp_function = new ArrayList();
                        tmp_function.add(new Function_Void_Simple(aright,aleft,b,VariableType.VOID,h));
                        RESULT = tmp_function;
    

 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // declaracion_funcion ::= FUNCTION ID PARENTESIS_ABIERTO parametros_funcion_declaracion PARENTESIS_CERRADO DOS_PUNTOS RVOID CORCHETE_ABIERTO instrucciones_funciones_sin_return CORCHETE_CERRADO 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		ArrayList<Parameter> d = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList i = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object j = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    //function id (parametros):void{parametros}
    /* verificar que los nombres de los parametros no se repitan, si hay repetidos lanzar errro semantico*/
    /*Function_Void_Parameters*/
    Map<String, VariableType> parametros = new LinkedHashMap<String, VariableType>();

    parametros.put(d.get(0).getId(),d.get(0).getType());
    for(int p = 1; p<d.size();p++){

        if(parametros.containsKey(d.get(p).getId())){
            System.out.println("El nombre del parametro " +d.get(p).getId()+ " ya ha sido utilizado ");
            erroresSemanticos.add( new Error_analizadores("Semantico",d.get(p).getId(),dright,dleft, "El nombre del parametro '" +d.get(p).getId()+ "' ya ha sido utilizado en la misma funcion"));
            contador_errores_semanticos++;
        }else{
            parametros.put(d.get(p).getId(),d.get(p).getType());
        }

    }

    if(contador_errores_semanticos==0){
            ArrayList tmp_function = new ArrayList();
            tmp_function.add(new Function_Void_Parameters(aright,aleft,b,VariableType.VOID,parametros,i));
            RESULT = tmp_function;
    }
    
    
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // declaracion_funcion ::= FUNCTION ID PARENTESIS_ABIERTO PARENTESIS_CERRADO CORCHETE_ABIERTO instrucciones_funcion CORCHETE_CERRADO 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList f = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        //function id (){parametros}
        //Function_Without_Type_Simple
        
        ArrayList tmp_function = new ArrayList();
        tmp_function.add(new Function_Without_Type_Simple(aright,aleft,b,VariableType.PENDIENTE,f));
        RESULT = tmp_function;


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // declaracion_funcion ::= FUNCTION ID PARENTESIS_ABIERTO parametros_funcion_declaracion PARENTESIS_CERRADO CORCHETE_ABIERTO instrucciones_funcion CORCHETE_CERRADO 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ArrayList<Parameter> d = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList g = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        //function id (parametros){parametros}
        //Function_Without_Type_Parameters
        /* verificar que los nombres de los parametros no se repitan, si hay repetidos lanzar errro semantico*/
        Map<String, VariableType> parametros = new LinkedHashMap<String, VariableType>();

    parametros.put(d.get(0).getId(),d.get(0).getType());
    for(int p = 1; p<d.size();p++){

        if(parametros.containsKey(d.get(p).getId())){
            System.out.println("El nombre del parametro " +d.get(p).getId()+ " ya ha sido utilizado ");
            erroresSemanticos.add( new Error_analizadores("Semantico",d.get(p).getId(),dright,dleft, "El nombre del parametro '" +d.get(p).getId()+ "' ya ha sido utilizado en la misma funcion"));
            contador_errores_semanticos++;
        }else{
            parametros.put(d.get(p).getId(),d.get(p).getType());
        }

    }

    if(contador_errores_semanticos==0){
            ArrayList tmp_function = new ArrayList();
            tmp_function.add(new Function_Without_Type_Parameters(aright,aleft,b,VariableType.PENDIENTE,parametros,g));
            RESULT = tmp_function;
    }
        

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // declaracion_funcion ::= FUNCTION ID PARENTESIS_ABIERTO PARENTESIS_CERRADO DOS_PUNTOS tipo_dato_variable CORCHETE_ABIERTO instrucciones_funcion CORCHETE_CERRADO 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList h = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        //function id ():tipoValor{parametros}            
        //Function_With_Type_Simple
            ArrayList tmp_function = new ArrayList();
            tmp_function.add(new Function_With_Type_Simple(aright,aleft,b, (VariableType) f,h));
            RESULT = tmp_function;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // declaracion_funcion ::= FUNCTION ID PARENTESIS_ABIERTO parametros_funcion_declaracion PARENTESIS_CERRADO DOS_PUNTOS tipo_dato_variable CORCHETE_ABIERTO instrucciones_funcion CORCHETE_CERRADO 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		ArrayList<Parameter> d = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList i = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object j = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        //function id (parametros):tipoDato{parametros}
        //Function_With_Type_Parameters
    Map<String, VariableType> parametros = new LinkedHashMap<String, VariableType>();

    parametros.put(d.get(0).getId(),d.get(0).getType());
    for(int p = 1; p<d.size();p++){

        if(parametros.containsKey(d.get(p).getId())){
            System.out.println("El nombre del parametro " +d.get(p).getId()+ " ya ha sido utilizado ");
            erroresSemanticos.add( new Error_analizadores("Semantico",d.get(p).getId(),dright,dleft, "El nombre del parametro '" +d.get(p).getId()+ "' ya ha sido utilizado en la misma funcion"));
            contador_errores_semanticos++;
        }else{
            parametros.put(d.get(p).getId(),d.get(p).getType());
        }

    }

    if(contador_errores_semanticos==0){
            ArrayList tmp_function = new ArrayList();
            tmp_function.add(new Function_With_Type_Parameters(aright,aleft,b,(VariableType) g,parametros,i));
            RESULT = tmp_function;
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // instrucciones_funciones_sin_return ::= instrucciones_funciones_sin_return opciones_instrucciones_sin_return 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList b = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                       
                                       
                                        for(int i =0;i<b.size();i++){

                                            a.add(b.get(i));

                                        }

                                        RESULT = a;

                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_funciones_sin_return",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // instrucciones_funciones_sin_return ::= opciones_instrucciones_sin_return 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

                                    ArrayList tmp = new ArrayList();

                                        for(int i =0;i<a.size();i++){

                                            tmp.add(a.get(i));

                                        }
                                        RESULT = tmp;

                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_funciones_sin_return",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // instrucciones_funcion ::= instrucciones 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                            RESULT = a;
                      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_funcion",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // instrucciones_funcion ::= 
            {
              ArrayList RESULT =null;
		 
                            RESULT = new ArrayList<>();
                       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_funcion",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // parametros_funcion_declaracion ::= parametros_funcion_declaracion COMA parametro_funcion_declaracion 
            {
              ArrayList<Parameter> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Parameter> a = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Parameter c = (Parameter)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

                                    a.add(c);
                                    RESULT = a;

                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_funcion_declaracion",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // parametros_funcion_declaracion ::= parametro_funcion_declaracion 
            {
              ArrayList<Parameter> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Parameter a = (Parameter)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    ArrayList parametros = new ArrayList<>();
                                    parametros.add(a);
                                    RESULT = parametros;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_funcion_declaracion",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // parametro_funcion_declaracion ::= ID DOS_PUNTOS tipo_dato_variable 
            {
              Parameter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

                                    RESULT = new Parameter((String) a,(VariableType)c);
                                    
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro_funcion_declaracion",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // funcion_return ::= RETURN instruccion PUNTO_COMA 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        //return hola;
                        ArrayList tmp_return = new ArrayList();
                        tmp_return.add(new Function_Return_Instruction(aright,aleft,b));
                        RESULT = tmp_return;    

                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_return",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // funcion_return ::= RETURN PUNTO_COMA 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

                        ArrayList tmp_return = new ArrayList();
                        tmp_return.add(new Function_Return_Simple(aright,aleft));
                        RESULT = tmp_return;    
 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_return",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // parametros_funcion_asignacion ::= parametros_funcion_asignacion COMA instruccion 
            {
              ArrayList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Instruction> a = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    
                                    a.add((Instruction) c);
                                    RESULT = a;           
                               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_funcion_asignacion",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // parametros_funcion_asignacion ::= instruccion 
            {
              ArrayList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                   RESULT = new ArrayList<>(); RESULT.add((Instruction) a);
                               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_funcion_asignacion",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // llamada_funcion_normal ::= ID PARENTESIS_ABIERTO PARENTESIS_CERRADO PUNTO_COMA 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

                                ArrayList tmp_function_normal = new ArrayList();
                                tmp_function_normal.add(new Function_Call_Simple_Function(aright,aleft,a));
                                RESULT = tmp_function_normal;    

                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion_normal",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // llamada_funcion_normal ::= ID PARENTESIS_ABIERTO parametros_funcion_asignacion PARENTESIS_CERRADO PUNTO_COMA 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Instruction> c = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        
                                ArrayList tmp_function_normal1 = new ArrayList();
                                tmp_function_normal1.add(new Function_Call_Parameters_Function(aright,aleft,a,c));
                                RESULT = tmp_function_normal1;    

                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion_normal",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // funcion_if ::= IF PARENTESIS_ABIERTO instruccion PARENTESIS_CERRADO CORCHETE_ABIERTO instrucciones_funcion CORCHETE_CERRADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList f = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

                    RESULT = new If(aright,aleft,c,f);
                         
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_if",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // funcion_else ::= ELSE CORCHETE_ABIERTO instrucciones_funcion CORCHETE_CERRADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList c = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        
                    RESULT = new Else(aright,aleft,c);

              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_else",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // funcion_else_if ::= ELSE IF PARENTESIS_ABIERTO instruccion PARENTESIS_CERRADO CORCHETE_ABIERTO instrucciones_funcion CORCHETE_CERRADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList g = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    
                RESULT = new ElseIf(aright,aleft,d,g);
                            
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_else_if",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // lista_else_if ::= lista_else_if funcion_else_if 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                     
                     a.add(b);
                     RESULT = a;

                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_else_if",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // lista_else_if ::= funcion_else_if 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                          
                          RESULT = new ArrayList(); RESULT.add(a);

                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_else_if",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // opciones_if ::= funcion_if 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        ArrayList tmp = new ArrayList();
                        tmp.add(new Function_If(aright,aleft,a,null,null));
                        RESULT = tmp;    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_if",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // opciones_if ::= funcion_if funcion_else 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        ArrayList tmp = new ArrayList();
                        tmp.add(new Function_If(aright,aleft,a,null,b));
                        RESULT = tmp;    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_if",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // opciones_if ::= funcion_if lista_else_if funcion_else 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList b = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        ArrayList tmp = new ArrayList();
                        tmp.add(new Function_If(aright,aleft,a,b,c));
                        RESULT = tmp;    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_if",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // opciones_if ::= funcion_if lista_else_if 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList b = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        ArrayList tmp = new ArrayList();
                        tmp.add(new Function_If(aright,aleft,a,b,null));
                        RESULT = tmp;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_if",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // instruccion_break ::= BREAK PUNTO_COMA 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        ArrayList tmp_BREAK = new ArrayList();
                        tmp_BREAK.add(new Instruction_Break(aright,aleft));
                        RESULT = tmp_BREAK;    
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion_break",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // instruccion_continue ::= CONTINUE PUNTO_COMA 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        ArrayList tmp_continue= new ArrayList();
                        tmp_continue.add(new Instruction_Continue(aright,aleft));
                        RESULT = tmp_continue;    
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion_continue",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // funcion_for ::= FOR PARENTESIS_ABIERTO declaracion_variable operaciones_logicas PUNTO_COMA accion_asignacion_for PARENTESIS_CERRADO CORCHETE_ABIERTO instrucciones_funcion CORCHETE_CERRADO 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		ArrayList c = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList i = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object j = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    //verificar que la variable declarada se let
    Instruction assig = (Instruction)c.get(0);
    ArrayList tmp_for = new ArrayList();
    tmp_for.add(new Function_For(aright,aleft,assig,d,f,i));
    RESULT = tmp_for;
    /*for(let i = 0; i<2;i++){
        console.log(i);
    }*/
 

    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_for",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // funcion_for ::= FOR PARENTESIS_ABIERTO asignacion operaciones_logicas PUNTO_COMA accion_asignacion_for PARENTESIS_CERRADO CORCHETE_ABIERTO instrucciones_funcion CORCHETE_CERRADO 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		ArrayList c = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList i = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object j = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

//let k = 0;

//for(let i= k; i<3;i++){
    //console.log(i);
//}
    Instruction assig = (Instruction)c.get(0);
    ArrayList tmp_for = new ArrayList();
    tmp_for.add(new Function_For(aright,aleft,assig,d,f,i));
    RESULT = tmp_for;

    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_for",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // accion_asignacion_for ::= incremento 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            //id++
                            RESULT = a;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("accion_asignacion_for",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // accion_asignacion_for ::= decremento 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            //id--
                            RESULT = a;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("accion_asignacion_for",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // accion_asignacion_for ::= ID ASIGNACION instruccion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            //id = instruction;
                            RESULT = new Assignment(a,aleft,a,c);
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("accion_asignacion_for",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // funcion_while ::= WHILE PARENTESIS_ABIERTO instruccion PARENTESIS_CERRADO CORCHETE_ABIERTO instrucciones_funcion CORCHETE_CERRADO 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList f = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        ArrayList tmp_while= new ArrayList();
                        tmp_while.add(new Function_While(aright,aleft,c,f));
                        RESULT = tmp_while;

                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_while",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // funcion_do_while ::= DO CORCHETE_ABIERTO instrucciones_funcion CORCHETE_CERRADO WHILE PARENTESIS_ABIERTO instruccion PARENTESIS_CERRADO PUNTO_COMA 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		ArrayList c = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

                    ArrayList tmp_do_while= new ArrayList();
                    tmp_do_while.add(new Function_Do_While(aright,aleft,c,g));
                    RESULT = tmp_do_while;
      
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_do_while",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // funcion_printAst ::= PRINTAST PARENTESIS_ABIERTO instruccion PARENTESIS_CERRADO PUNTO_COMA 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        ArrayList tmp_gst= new ArrayList();
                        tmp_gst.add(new Function_Print_AST(aright,aleft,c));
                        RESULT = tmp_gst;    

                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_printAst",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // funcion_getSymbolTable ::= GETSYMBOLTABLE PARENTESIS_ABIERTO PARENTESIS_CERRADO PUNTO_COMA 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

                        ArrayList tmp_gst= new ArrayList();
                        tmp_gst.add(new Function_Get_Symbol_Table(aright,aleft));
                        RESULT = tmp_gst;    
                        
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_getSymbolTable",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
