
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.peter.typesecure.parser;

import com.peter.typesecure.lexer.Lexer;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\302\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\004\004\000\002\004\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\046" +
    "\003\000\002\046\003\000\002\046\003\000\002\046\003" +
    "\000\002\046\003\000\002\046\003\000\002\046\003\000" +
    "\002\046\003\000\002\015\006\000\002\007\005\000\002" +
    "\011\005\000\002\011\003\000\002\012\007\000\002\012" +
    "\005\000\002\012\005\000\002\010\003\000\002\010\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\014\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\016\004\000\002\016\004\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\017\010\000\002\017\010\000\002\017\010\000\002\017" +
    "\010\000\002\017\010\000\002\017\010\000\002\017\010" +
    "\000\002\017\012\000\002\017\010\000\002\017\010\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\020\004\000\002\021\004\000\002\022\005\000\002\022" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\003\000\002\023\003\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\024\005" +
    "\000\002\024\005\000\002\024\004\000\002\024\005\000" +
    "\002\024\003\000\002\025\005\000\002\025\005\000\002" +
    "\025\005\000\002\026\006\000\002\026\006\000\002\026" +
    "\006\000\002\027\006\000\002\027\006\000\002\027\006" +
    "\000\002\030\006\000\002\030\006\000\002\030\006\000" +
    "\002\031\006\000\002\031\006\000\002\031\006\000\002" +
    "\032\010\000\002\032\010\000\002\036\010\000\002\036" +
    "\010\000\002\036\010\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\033\007\000\002\033\007\000\002" +
    "\033\007\000\002\034\007\000\002\034\007\000\002\034" +
    "\007\000\002\037\011\000\002\040\005\000\002\040\003" +
    "\000\002\041\013\000\002\041\014\000\002\041\011\000" +
    "\002\041\012\000\002\041\013\000\002\041\014\000\002" +
    "\045\004\000\002\045\003\000\002\044\003\000\002\044" +
    "\002\000\002\043\005\000\002\043\003\000\002\042\005" +
    "\000\002\047\005\000\002\047\004\000\002\055\005\000" +
    "\002\055\006\000\002\056\005\000\002\056\003\000\002" +
    "\057\006\000\002\057\007\000\002\050\011\000\002\051" +
    "\006\000\002\052\012\000\002\053\004\000\002\053\003" +
    "\000\002\054\003\000\002\054\004\000\002\054\005\000" +
    "\002\054\004\000\002\060\004\000\002\061\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0183\000\024\006\020\017\025\020\034\053\014\065" +
    "\015\067\017\074\024\075\010\076\012\001\002\000\030" +
    "\002\ufff9\006\ufff9\017\ufff9\020\ufff9\052\ufff9\053\ufff9\065" +
    "\ufff9\067\ufff9\074\ufff9\075\ufff9\076\ufff9\001\002\000\030" +
    "\002\ufff7\006\ufff7\017\ufff7\020\ufff7\052\ufff7\053\ufff7\065" +
    "\ufff7\067\ufff7\074\ufff7\075\ufff7\076\ufff7\001\002\000\004" +
    "\002\000\001\002\000\026\002\uffff\006\020\017\025\020" +
    "\034\053\014\065\015\067\017\074\024\075\010\076\012" +
    "\001\002\000\004\050\u0185\001\002\000\030\002\ufff8\006" +
    "\ufff8\017\ufff8\020\ufff8\052\ufff8\053\ufff8\065\ufff8\067\ufff8" +
    "\074\ufff8\075\ufff8\076\ufff8\001\002\000\042\004\071\005" +
    "\054\006\063\007\077\010\061\011\075\021\103\022\044" +
    "\027\047\036\056\050\u0183\054\070\055\053\056\102\057" +
    "\067\077\066\001\002\000\004\006\u0178\001\002\000\004" +
    "\006\u0144\001\002\000\004\045\u013b\001\002\000\030\002" +
    "\ufffa\006\ufffa\017\ufffa\020\ufffa\052\ufffa\053\ufffa\065\ufffa" +
    "\067\ufffa\074\ufffa\075\ufffa\076\ufffa\001\002\000\004\027" +
    "\u0135\001\002\000\012\027\u0129\031\u012a\032\u0127\033\u0128" +
    "\001\002\000\030\002\ufffb\006\ufffb\017\ufffb\020\ufffb\052" +
    "\ufffb\053\ufffb\065\ufffb\067\ufffb\074\ufffb\075\ufffb\076\ufffb" +
    "\001\002\000\030\002\ufffd\006\ufffd\017\ufffd\020\ufffd\052" +
    "\ufffd\053\ufffd\065\ufffd\067\ufffd\074\ufffd\075\ufffd\076\ufffd" +
    "\001\002\000\004\002\u0126\001\002\000\004\050\u0125\001" +
    "\002\000\004\006\uffe3\001\002\000\030\002\ufff5\006\ufff5" +
    "\017\ufff5\020\ufff5\052\ufff5\053\ufff5\065\ufff5\067\ufff5\074" +
    "\ufff5\075\ufff5\076\ufff5\001\002\000\030\002\ufff4\006\ufff4" +
    "\017\ufff4\020\ufff4\052\ufff4\053\ufff4\065\ufff4\067\ufff4\074" +
    "\ufff4\075\ufff4\076\ufff4\001\002\000\030\002\ufffc\006\ufffc" +
    "\017\ufffc\020\ufffc\052\ufffc\053\ufffc\065\ufffc\067\ufffc\074" +
    "\ufffc\075\ufffc\076\ufffc\001\002\000\030\002\ufff6\006\ufff6" +
    "\017\ufff6\020\ufff6\052\ufff6\053\ufff6\065\ufff6\067\ufff6\074" +
    "\ufff6\075\ufff6\076\ufff6\001\002\000\032\002\uff45\006\uff45" +
    "\017\uff45\020\uff45\052\uff45\053\uff45\065\uff45\067\uff45\070" +
    "\036\074\uff45\075\uff45\076\uff45\001\002\000\030\002\ufff3" +
    "\006\ufff3\017\ufff3\020\ufff3\052\ufff3\053\ufff3\065\ufff3\067" +
    "\ufff3\074\ufff3\075\ufff3\076\ufff3\001\002\000\004\006\uffe2" +
    "\001\002\000\032\002\uff42\006\uff42\017\uff42\020\uff42\052" +
    "\uff42\053\uff42\065\uff42\067\uff42\070\036\074\uff42\075\uff42" +
    "\076\uff42\001\002\000\006\051\041\067\042\001\002\000" +
    "\030\002\uff44\006\uff44\017\uff44\020\uff44\052\uff44\053\uff44" +
    "\065\uff44\067\uff44\074\uff44\075\uff44\076\uff44\001\002\000" +
    "\032\002\uff46\006\uff46\017\uff46\020\uff46\052\uff46\053\uff46" +
    "\065\uff46\067\uff46\070\uff46\074\uff46\075\uff46\076\uff46\001" +
    "\002\000\026\006\020\017\025\020\034\052\uff56\053\014" +
    "\065\015\067\017\074\024\075\010\076\012\001\002\000" +
    "\004\027\043\001\002\000\040\004\071\005\054\006\063" +
    "\007\077\010\061\011\075\021\103\022\044\027\047\036" +
    "\056\054\070\055\053\056\102\057\067\077\066\001\002" +
    "\000\030\004\071\005\054\006\111\007\077\021\103\022" +
    "\044\027\106\054\070\055\053\057\067\077\066\001\002" +
    "\000\012\030\uffd7\045\uff6c\046\uffd7\050\uffd7\001\002\000" +
    "\014\030\uff83\034\uff83\035\uff83\046\uff83\050\uff83\001\002" +
    "\000\040\004\071\005\054\006\111\007\077\010\061\011" +
    "\075\021\103\022\044\027\047\036\056\054\070\055\053" +
    "\056\102\057\067\077\066\001\002\000\014\030\uffda\043" +
    "\250\044\247\046\uffda\050\uffda\001\002\000\016\030\uffd9" +
    "\043\242\044\241\045\uff6e\046\uffd9\050\uffd9\001\002\000" +
    "\042\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\030\uffc9" +
    "\034\uffc9\035\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043" +
    "\uffc9\044\uffc9\046\uffc9\050\uffc9\001\002\000\004\027\u0114" +
    "\001\002\000\042\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025" +
    "\uffc4\030\uffc4\034\uffc4\035\uffc4\037\uffc4\040\uffc4\041\uffc4" +
    "\042\uffc4\043\uffc4\044\uffc4\046\uffc4\050\uffc4\001\002\000" +
    "\042\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\030\uffc8" +
    "\034\uffc8\035\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043" +
    "\uffc8\044\uffc8\046\uffc8\050\uffc8\001\002\000\040\004\071" +
    "\005\054\006\111\007\077\010\061\011\075\021\103\022" +
    "\044\027\047\036\056\054\070\055\053\056\102\057\067" +
    "\077\066\001\002\000\042\021\uffc7\022\uffc7\023\uffc7\024" +
    "\uffc7\025\uffc7\030\uffc7\034\uffc7\035\uffc7\037\uffc7\040\uffc7" +
    "\041\uffc7\042\uffc7\043\uffc7\044\uffc7\046\uffc7\050\uffc7\001" +
    "\002\000\004\030\u010d\001\002\000\020\030\uff9a\034\uff9a" +
    "\035\uff9a\043\u0104\044\u0103\046\uff9a\050\uff9a\001\002\000" +
    "\012\030\uffd5\045\uff6a\046\uffd5\050\uffd5\001\002\000\046" +
    "\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\027\131\030" +
    "\uffc3\031\u0102\032\u0101\037\uffc3\040\uffc3\041\uffc3\042\uffc3" +
    "\043\uffc3\044\uffc3\045\130\046\uffc3\050\uffc3\001\002\000" +
    "\012\030\uffd4\045\uff69\046\uffd4\050\uffd4\001\002\000\014" +
    "\030\uffdb\034\233\035\235\046\uffdb\050\uffdb\001\002\000" +
    "\004\045\323\001\002\000\004\027\314\001\002\000\004" +
    "\027\305\001\002\000\042\021\uffc5\022\uffc5\023\uffc5\024" +
    "\uffc5\025\uffc5\030\uffc5\034\uffc5\035\uffc5\037\uffc5\040\uffc5" +
    "\041\uffc5\042\uffc5\043\uffc5\044\uffc5\046\uffc5\050\uffc5\001" +
    "\002\000\010\030\uffd3\046\uffd3\050\uffd3\001\002\000\042" +
    "\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\030\uffc6\034" +
    "\uffc6\035\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6" +
    "\044\uffc6\046\uffc6\050\uffc6\001\002\000\010\030\uffd2\046" +
    "\uffd2\050\uffd2\001\002\000\020\030\uff99\034\uff99\035\uff99" +
    "\043\274\044\273\046\uff99\050\uff99\001\002\000\036\021" +
    "\120\022\122\023\116\024\117\025\121\030\uffdc\037\214" +
    "\040\216\041\211\042\212\043\210\044\215\046\uffdc\050" +
    "\uffdc\001\002\000\044\021\uffc2\022\uffc2\023\uffc2\024\uffc2" +
    "\025\uffc2\030\uffc2\034\uffc2\035\uffc2\037\uffc2\040\uffc2\041" +
    "\uffc2\042\uffc2\043\uffc2\044\uffc2\045\167\046\uffc2\050\uffc2" +
    "\001\002\000\012\030\uffd6\045\uff6b\046\uffd6\050\uffd6\001" +
    "\002\000\004\045\257\001\002\000\004\027\161\001\002" +
    "\000\030\004\071\005\054\006\111\007\077\021\103\022" +
    "\044\027\106\054\070\055\053\057\067\077\066\001\002" +
    "\000\012\030\uffd8\045\uff6d\046\uffd8\050\uffd8\001\002\000" +
    "\004\045\uff6c\001\002\000\030\004\071\005\054\006\111" +
    "\007\077\021\103\022\044\027\106\054\070\055\053\057" +
    "\067\077\066\001\002\000\004\045\uff6e\001\002\000\004" +
    "\045\uff6a\001\002\000\046\021\uffc3\022\uffc3\023\uffc3\024" +
    "\uffc3\025\uffc3\027\131\030\uffc3\034\uffc3\035\uffc3\037\uffc3" +
    "\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\130\046" +
    "\uffc3\050\uffc3\001\002\000\004\045\uff69\001\002\000\042" +
    "\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\030\uffd0\034" +
    "\uffd0\035\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0" +
    "\044\uffd0\046\uffd0\050\uffd0\001\002\000\004\045\uff6b\001" +
    "\002\000\004\045\uff6d\001\002\000\030\004\071\005\054" +
    "\006\111\007\077\021\103\022\044\027\106\054\070\055" +
    "\053\057\067\077\066\001\002\000\030\004\071\005\054" +
    "\006\111\007\077\021\103\022\044\027\106\054\070\055" +
    "\053\057\067\077\066\001\002\000\030\004\071\005\054" +
    "\006\111\007\077\021\103\022\044\027\106\054\070\055" +
    "\053\057\067\077\066\001\002\000\030\004\071\005\054" +
    "\006\111\007\077\021\103\022\044\027\106\054\070\055" +
    "\053\057\067\077\066\001\002\000\030\004\071\005\054" +
    "\006\111\007\077\021\103\022\044\027\106\054\070\055" +
    "\053\057\067\077\066\001\002\000\042\021\uffce\022\uffce" +
    "\023\116\024\uffce\025\121\030\uffce\034\uffce\035\uffce\037" +
    "\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044\uffce\046\uffce" +
    "\050\uffce\001\002\000\042\021\uffcc\022\uffcc\023\uffcc\024" +
    "\uffcc\025\uffcc\030\uffcc\034\uffcc\035\uffcc\037\uffcc\040\uffcc" +
    "\041\uffcc\042\uffcc\043\uffcc\044\uffcc\046\uffcc\050\uffcc\001" +
    "\002\000\042\021\uffcf\022\uffcf\023\116\024\uffcf\025\121" +
    "\030\uffcf\034\uffcf\035\uffcf\037\uffcf\040\uffcf\041\uffcf\042" +
    "\uffcf\043\uffcf\044\uffcf\046\uffcf\050\uffcf\001\002\000\042" +
    "\021\uffcb\022\uffcb\023\116\024\uffcb\025\121\030\uffcb\034" +
    "\uffcb\035\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb" +
    "\044\uffcb\046\uffcb\050\uffcb\001\002\000\042\021\uffcd\022" +
    "\uffcd\023\uffcd\024\uffcd\025\uffcd\030\uffcd\034\uffcd\035\uffcd" +
    "\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\046" +
    "\uffcd\050\uffcd\001\002\000\014\060\142\061\144\062\143" +
    "\063\140\064\141\001\002\000\042\004\071\005\054\006" +
    "\063\007\077\010\061\011\075\021\103\022\044\027\047" +
    "\030\134\036\056\054\070\055\053\056\102\057\067\077" +
    "\066\001\002\000\006\030\136\046\135\001\002\000\006" +
    "\030\uff4d\046\uff4d\001\002\000\012\030\uff50\045\uff50\046" +
    "\uff50\050\uff50\001\002\000\040\004\071\005\054\006\063" +
    "\007\077\010\061\011\075\021\103\022\044\027\047\036" +
    "\056\054\070\055\053\056\102\057\067\077\066\001\002" +
    "\000\012\030\uff4f\045\uff4f\046\uff4f\050\uff4f\001\002\000" +
    "\006\030\uff4e\046\uff4e\001\002\000\004\027\155\001\002" +
    "\000\004\027\152\001\002\000\042\021\uff81\022\uff81\023" +
    "\uff81\024\uff81\025\uff81\030\uff81\034\uff81\035\uff81\037\uff81" +
    "\040\uff81\041\uff81\042\uff81\043\uff81\044\uff81\046\uff81\050" +
    "\uff81\001\002\000\004\027\150\001\002\000\004\027\145" +
    "\001\002\000\030\004\071\005\054\006\111\007\077\021" +
    "\103\022\044\027\106\054\070\055\053\057\067\077\066" +
    "\001\002\000\016\021\120\022\122\023\116\024\117\025" +
    "\121\030\147\001\002\000\012\030\uff73\045\uff73\046\uff73" +
    "\050\uff73\001\002\000\004\030\151\001\002\000\012\030" +
    "\uff68\045\uff68\046\uff68\050\uff68\001\002\000\040\004\071" +
    "\005\054\006\063\007\077\010\061\011\075\021\103\022" +
    "\044\027\047\036\056\054\070\055\053\056\102\057\067" +
    "\077\066\001\002\000\004\030\154\001\002\000\012\030" +
    "\uff6f\045\uff6f\046\uff6f\050\uff6f\001\002\000\004\030\156" +
    "\001\002\000\012\030\uff65\045\uff65\046\uff65\050\uff65\001" +
    "\002\000\016\021\120\022\122\023\116\024\117\025\121" +
    "\030\160\001\002\000\042\021\uffca\022\uffca\023\uffca\024" +
    "\uffca\025\uffca\030\uffca\034\uffca\035\uffca\037\uffca\040\uffca" +
    "\041\uffca\042\uffca\043\uffca\044\uffca\046\uffca\050\uffca\001" +
    "\002\000\040\004\071\005\054\006\111\007\166\010\061" +
    "\011\075\021\103\022\044\027\047\036\056\054\070\055" +
    "\053\056\102\057\067\077\066\001\002\000\006\043\250" +
    "\044\247\001\002\000\010\043\242\044\241\045\uff6e\001" +
    "\002\000\010\030\234\034\233\035\235\001\002\000\032" +
    "\021\120\022\122\023\116\024\117\025\121\030\213\037" +
    "\214\040\216\041\211\042\212\043\210\044\215\001\002" +
    "\000\034\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\030" +
    "\170\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2" +
    "\045\167\001\002\000\014\060\172\061\175\062\174\063" +
    "\171\064\173\001\002\000\020\030\uff77\034\uff77\035\uff77" +
    "\043\uff77\044\uff77\046\uff77\050\uff77\001\002\000\004\027" +
    "\206\001\002\000\042\021\uff82\022\uff82\023\uff82\024\uff82" +
    "\025\uff82\030\uff82\034\uff82\035\uff82\037\uff82\040\uff82\041" +
    "\uff82\042\uff82\043\uff82\044\uff82\046\uff82\050\uff82\001\002" +
    "\000\004\027\203\001\002\000\004\027\201\001\002\000" +
    "\004\027\176\001\002\000\030\004\071\005\054\006\111" +
    "\007\077\021\103\022\044\027\106\054\070\055\053\057" +
    "\067\077\066\001\002\000\016\021\120\022\122\023\116" +
    "\024\117\025\121\030\200\001\002\000\012\030\uff72\045" +
    "\uff72\046\uff72\050\uff72\001\002\000\004\030\202\001\002" +
    "\000\012\030\uff67\045\uff67\046\uff67\050\uff67\001\002\000" +
    "\040\004\071\005\054\006\063\007\077\010\061\011\075" +
    "\021\103\022\044\027\047\036\056\054\070\055\053\056" +
    "\102\057\067\077\066\001\002\000\004\030\205\001\002" +
    "\000\012\030\uff70\045\uff70\046\uff70\050\uff70\001\002\000" +
    "\004\030\207\001\002\000\012\030\uff64\045\uff64\046\uff64" +
    "\050\uff64\001\002\000\034\004\071\005\054\006\111\007" +
    "\077\010\230\011\231\021\103\022\044\027\106\054\070" +
    "\055\053\057\067\077\066\001\002\000\030\004\071\005" +
    "\054\006\111\007\077\021\103\022\044\027\106\054\070" +
    "\055\053\057\067\077\066\001\002\000\030\004\071\005" +
    "\054\006\111\007\077\021\103\022\044\027\106\054\070" +
    "\055\053\057\067\077\066\001\002\000\020\030\uff79\034" +
    "\uff79\035\uff79\043\uff79\044\uff79\046\uff79\050\uff79\001\002" +
    "\000\030\004\071\005\054\006\111\007\077\021\103\022" +
    "\044\027\106\054\070\055\053\057\067\077\066\001\002" +
    "\000\034\004\071\005\054\006\111\007\077\010\221\011" +
    "\222\021\103\022\044\027\106\054\070\055\053\057\067" +
    "\077\066\001\002\000\030\004\071\005\054\006\111\007" +
    "\077\021\103\022\044\027\106\054\070\055\053\057\067" +
    "\077\066\001\002\000\026\021\120\022\122\023\116\024" +
    "\117\025\121\030\uffad\034\uffad\035\uffad\046\uffad\050\uffad" +
    "\001\002\000\016\030\uff89\034\uff89\035\uff89\045\uff6e\046" +
    "\uff89\050\uff89\001\002\000\014\030\uff9e\034\uff9e\035\uff9e" +
    "\046\uff9e\050\uff9e\001\002\000\014\030\uff9c\034\uff9c\035" +
    "\uff9c\046\uff9c\050\uff9c\001\002\000\026\021\120\022\122" +
    "\023\116\024\117\025\121\030\uffab\034\uffab\035\uffab\046" +
    "\uffab\050\uffab\001\002\000\026\021\120\022\122\023\116" +
    "\024\117\025\121\030\uffae\034\uffae\035\uffae\046\uffae\050" +
    "\uffae\001\002\000\026\021\120\022\122\023\116\024\117" +
    "\025\121\030\uffaf\034\uffaf\035\uffaf\046\uffaf\050\uffaf\001" +
    "\002\000\026\021\120\022\122\023\116\024\117\025\121" +
    "\030\uffb0\034\uffb0\035\uffb0\046\uffb0\050\uffb0\001\002\000" +
    "\016\030\uff8a\034\uff8a\035\uff8a\045\uff6e\046\uff8a\050\uff8a" +
    "\001\002\000\014\030\uffa6\034\uffa6\035\uffa6\046\uffa6\050" +
    "\uffa6\001\002\000\014\030\uffa4\034\uffa4\035\uffa4\046\uffa4" +
    "\050\uffa4\001\002\000\026\021\120\022\122\023\116\024" +
    "\117\025\121\030\uffac\034\uffac\035\uffac\046\uffac\050\uffac" +
    "\001\002\000\040\004\071\005\054\006\111\007\077\010" +
    "\061\011\075\021\103\022\044\027\047\036\056\054\070" +
    "\055\053\056\102\057\067\077\066\001\002\000\020\030" +
    "\uff78\034\uff78\035\uff78\043\uff78\044\uff78\046\uff78\050\uff78" +
    "\001\002\000\040\004\071\005\054\006\111\007\077\010" +
    "\061\011\075\021\103\022\044\027\047\036\056\054\070" +
    "\055\053\056\102\057\067\077\066\001\002\000\014\030" +
    "\uff86\034\uff86\035\uff86\046\uff86\050\uff86\001\002\000\030" +
    "\021\120\022\122\023\116\024\117\025\121\037\214\040" +
    "\216\041\211\042\212\043\210\044\215\001\002\000\014" +
    "\030\uff87\034\uff87\035\235\046\uff87\050\uff87\001\002\000" +
    "\030\004\071\005\054\006\111\007\077\021\103\022\044" +
    "\027\106\054\070\055\053\057\067\077\066\001\002\000" +
    "\030\004\071\005\054\006\111\007\077\021\103\022\044" +
    "\027\106\054\070\055\053\057\067\077\066\001\002\000" +
    "\016\030\uff8e\034\uff8e\035\uff8e\045\uff6e\046\uff8e\050\uff8e" +
    "\001\002\000\026\021\120\022\122\023\116\024\117\025" +
    "\121\030\uff8c\034\uff8c\035\uff8c\046\uff8c\050\uff8c\001\002" +
    "\000\016\030\uff8d\034\uff8d\035\uff8d\045\uff6e\046\uff8d\050" +
    "\uff8d\001\002\000\026\021\120\022\122\023\116\024\117" +
    "\025\121\030\uff8b\034\uff8b\035\uff8b\046\uff8b\050\uff8b\001" +
    "\002\000\010\010\255\011\256\056\102\001\002\000\010" +
    "\010\252\011\253\056\102\001\002\000\014\030\uff90\034" +
    "\uff90\035\uff90\046\uff90\050\uff90\001\002\000\014\030\uff98" +
    "\034\uff98\035\uff98\046\uff98\050\uff98\001\002\000\014\030" +
    "\uff97\034\uff97\035\uff97\046\uff97\050\uff97\001\002\000\014" +
    "\030\uff8f\034\uff8f\035\uff8f\046\uff8f\050\uff8f\001\002\000" +
    "\014\030\uff94\034\uff94\035\uff94\046\uff94\050\uff94\001\002" +
    "\000\014\030\uff93\034\uff93\035\uff93\046\uff93\050\uff93\001" +
    "\002\000\012\060\261\062\263\063\260\064\262\001\002" +
    "\000\004\027\271\001\002\000\042\021\uff80\022\uff80\023" +
    "\uff80\024\uff80\025\uff80\030\uff80\034\uff80\035\uff80\037\uff80" +
    "\040\uff80\041\uff80\042\uff80\043\uff80\044\uff80\046\uff80\050" +
    "\uff80\001\002\000\004\027\266\001\002\000\004\027\264" +
    "\001\002\000\004\030\265\001\002\000\012\030\uff66\045" +
    "\uff66\046\uff66\050\uff66\001\002\000\040\004\071\005\054" +
    "\006\063\007\077\010\061\011\075\021\103\022\044\027" +
    "\047\036\056\054\070\055\053\056\102\057\067\077\066" +
    "\001\002\000\004\030\270\001\002\000\012\030\uff71\045" +
    "\uff71\046\uff71\050\uff71\001\002\000\004\030\272\001\002" +
    "\000\012\030\uff63\045\uff63\046\uff63\050\uff63\001\002\000" +
    "\036\004\071\005\054\006\111\007\077\010\302\011\303" +
    "\021\103\022\044\027\106\054\070\055\053\056\102\057" +
    "\067\077\066\001\002\000\036\004\071\005\054\006\111" +
    "\007\077\010\276\011\277\021\103\022\044\027\106\054" +
    "\070\055\053\056\102\057\067\077\066\001\002\000\014" +
    "\030\uff95\034\uff95\035\uff95\046\uff95\050\uff95\001\002\000" +
    "\014\030\uffa8\034\uffa8\035\uffa8\046\uffa8\050\uffa8\001\002" +
    "\000\014\030\uffa7\034\uffa7\035\uffa7\046\uffa7\050\uffa7\001" +
    "\002\000\026\021\120\022\122\023\116\024\117\025\121" +
    "\030\uffa3\034\uffa3\035\uffa3\046\uffa3\050\uffa3\001\002\000" +
    "\014\030\uff91\034\uff91\035\uff91\046\uff91\050\uff91\001\002" +
    "\000\014\030\uffa0\034\uffa0\035\uffa0\046\uffa0\050\uffa0\001" +
    "\002\000\014\030\uff9f\034\uff9f\035\uff9f\046\uff9f\050\uff9f" +
    "\001\002\000\026\021\120\022\122\023\116\024\117\025" +
    "\121\030\uff9b\034\uff9b\035\uff9b\046\uff9b\050\uff9b\001\002" +
    "\000\040\004\071\005\054\006\111\007\310\010\061\011" +
    "\075\021\103\022\044\027\047\036\056\054\070\055\053" +
    "\056\102\057\067\077\066\001\002\000\010\030\313\034" +
    "\233\035\235\001\002\000\032\021\120\022\122\023\116" +
    "\024\117\025\121\030\312\037\214\040\216\041\211\042" +
    "\212\043\210\044\215\001\002\000\034\021\uffc2\022\uffc2" +
    "\023\uffc2\024\uffc2\025\uffc2\030\311\037\uffc2\040\uffc2\041" +
    "\uffc2\042\uffc2\043\uffc2\044\uffc2\045\167\001\002\000\042" +
    "\021\uff7d\022\uff7d\023\uff7d\024\uff7d\025\uff7d\030\uff7d\034" +
    "\uff7d\035\uff7d\037\uff7d\040\uff7d\041\uff7d\042\uff7d\043\uff7d" +
    "\044\uff7d\046\uff7d\050\uff7d\001\002\000\042\021\uff7f\022" +
    "\uff7f\023\uff7f\024\uff7f\025\uff7f\030\uff7f\034\uff7f\035\uff7f" +
    "\037\uff7f\040\uff7f\041\uff7f\042\uff7f\043\uff7f\044\uff7f\046" +
    "\uff7f\050\uff7f\001\002\000\042\021\uff7e\022\uff7e\023\uff7e" +
    "\024\uff7e\025\uff7e\030\uff7e\034\uff7e\035\uff7e\037\uff7e\040" +
    "\uff7e\041\uff7e\042\uff7e\043\uff7e\044\uff7e\046\uff7e\050\uff7e" +
    "\001\002\000\040\004\071\005\054\006\111\007\317\010" +
    "\061\011\075\021\103\022\044\027\047\036\056\054\070" +
    "\055\053\056\102\057\067\077\066\001\002\000\010\030" +
    "\322\034\233\035\235\001\002\000\032\021\120\022\122" +
    "\023\116\024\117\025\121\030\321\037\214\040\216\041" +
    "\211\042\212\043\210\044\215\001\002\000\034\021\uffc2" +
    "\022\uffc2\023\uffc2\024\uffc2\025\uffc2\030\320\037\uffc2\040" +
    "\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\045\167\001\002" +
    "\000\022\030\uff74\034\uff74\035\uff74\043\uff74\044\uff74\045" +
    "\uff74\046\uff74\050\uff74\001\002\000\022\030\uff76\034\uff76" +
    "\035\uff76\043\uff76\044\uff76\045\uff76\046\uff76\050\uff76\001" +
    "\002\000\022\030\uff75\034\uff75\035\uff75\043\uff75\044\uff75" +
    "\045\uff75\046\uff75\050\uff75\001\002\000\034\100\340\101" +
    "\337\102\324\103\333\104\335\105\332\106\330\107\331" +
    "\110\336\111\327\112\325\113\334\114\326\001\002\000" +
    "\042\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\030\uffb5" +
    "\034\uffb5\035\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043" +
    "\uffb5\044\uffb5\046\uffb5\050\uffb5\001\002\000\004\027\374" +
    "\001\002\000\004\027\371\001\002\000\004\027\366\001" +
    "\002\000\004\027\363\001\002\000\004\027\360\001\002" +
    "\000\004\027\355\001\002\000\004\027\352\001\002\000" +
    "\004\027\347\001\002\000\004\027\344\001\002\000\004" +
    "\027\341\001\002\000\042\021\uffb6\022\uffb6\023\uffb6\024" +
    "\uffb6\025\uffb6\030\uffb6\034\uffb6\035\uffb6\037\uffb6\040\uffb6" +
    "\041\uffb6\042\uffb6\043\uffb6\044\uffb6\046\uffb6\050\uffb6\001" +
    "\002\000\042\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7" +
    "\030\uffb7\034\uffb7\035\uffb7\037\uffb7\040\uffb7\041\uffb7\042" +
    "\uffb7\043\uffb7\044\uffb7\046\uffb7\050\uffb7\001\002\000\030" +
    "\004\071\005\054\006\111\007\077\021\103\022\044\027" +
    "\106\054\070\055\053\057\067\077\066\001\002\000\016" +
    "\021\120\022\122\023\116\024\117\025\121\030\343\001" +
    "\002\000\042\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc" +
    "\030\uffbc\034\uffbc\035\uffbc\037\uffbc\040\uffbc\041\uffbc\042" +
    "\uffbc\043\uffbc\044\uffbc\046\uffbc\050\uffbc\001\002\000\030" +
    "\004\071\005\054\006\111\007\077\021\103\022\044\027" +
    "\106\054\070\055\053\057\067\077\066\001\002\000\016" +
    "\021\120\022\122\023\116\024\117\025\121\030\346\001" +
    "\002\000\042\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0" +
    "\030\uffc0\034\uffc0\035\uffc0\037\uffc0\040\uffc0\041\uffc0\042" +
    "\uffc0\043\uffc0\044\uffc0\046\uffc0\050\uffc0\001\002\000\030" +
    "\004\071\005\054\006\111\007\077\021\103\022\044\027" +
    "\106\054\070\055\053\057\067\077\066\001\002\000\016" +
    "\021\120\022\122\023\116\024\117\025\121\030\351\001" +
    "\002\000\042\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9" +
    "\030\uffb9\034\uffb9\035\uffb9\037\uffb9\040\uffb9\041\uffb9\042" +
    "\uffb9\043\uffb9\044\uffb9\046\uffb9\050\uffb9\001\002\000\030" +
    "\004\071\005\054\006\111\007\077\021\103\022\044\027" +
    "\106\054\070\055\053\057\067\077\066\001\002\000\016" +
    "\021\120\022\122\023\116\024\117\025\121\030\354\001" +
    "\002\000\042\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1" +
    "\030\uffc1\034\uffc1\035\uffc1\037\uffc1\040\uffc1\041\uffc1\042" +
    "\uffc1\043\uffc1\044\uffc1\046\uffc1\050\uffc1\001\002\000\030" +
    "\004\071\005\054\006\111\007\077\021\103\022\044\027" +
    "\106\054\070\055\053\057\067\077\066\001\002\000\016" +
    "\021\120\022\122\023\116\024\117\025\121\030\357\001" +
    "\002\000\042\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf" +
    "\030\uffbf\034\uffbf\035\uffbf\037\uffbf\040\uffbf\041\uffbf\042" +
    "\uffbf\043\uffbf\044\uffbf\046\uffbf\050\uffbf\001\002\000\030" +
    "\004\071\005\054\006\111\007\077\021\103\022\044\027" +
    "\106\054\070\055\053\057\067\077\066\001\002\000\016" +
    "\021\120\022\122\023\116\024\117\025\121\030\362\001" +
    "\002\000\042\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd" +
    "\030\uffbd\034\uffbd\035\uffbd\037\uffbd\040\uffbd\041\uffbd\042" +
    "\uffbd\043\uffbd\044\uffbd\046\uffbd\050\uffbd\001\002\000\030" +
    "\004\071\005\054\006\111\007\077\021\103\022\044\027" +
    "\106\054\070\055\053\057\067\077\066\001\002\000\016" +
    "\021\120\022\122\023\116\024\117\025\121\030\365\001" +
    "\002\000\042\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe" +
    "\030\uffbe\034\uffbe\035\uffbe\037\uffbe\040\uffbe\041\uffbe\042" +
    "\uffbe\043\uffbe\044\uffbe\046\uffbe\050\uffbe\001\002\000\030" +
    "\004\071\005\054\006\111\007\077\021\103\022\044\027" +
    "\106\054\070\055\053\057\067\077\066\001\002\000\016" +
    "\021\120\022\122\023\116\024\117\025\121\030\370\001" +
    "\002\000\042\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb" +
    "\030\uffbb\034\uffbb\035\uffbb\037\uffbb\040\uffbb\041\uffbb\042" +
    "\uffbb\043\uffbb\044\uffbb\046\uffbb\050\uffbb\001\002\000\030" +
    "\004\071\005\054\006\111\007\077\021\103\022\044\027" +
    "\106\054\070\055\053\057\067\077\066\001\002\000\016" +
    "\021\120\022\122\023\116\024\117\025\121\030\373\001" +
    "\002\000\042\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8" +
    "\030\uffb8\034\uffb8\035\uffb8\037\uffb8\040\uffb8\041\uffb8\042" +
    "\uffb8\043\uffb8\044\uffb8\046\uffb8\050\uffb8\001\002\000\030" +
    "\004\071\005\054\006\111\007\077\021\103\022\044\027" +
    "\106\054\070\055\053\057\067\077\066\001\002\000\016" +
    "\021\120\022\122\023\116\024\117\025\121\046\376\001" +
    "\002\000\030\004\071\005\054\006\111\007\077\021\103" +
    "\022\044\027\106\054\070\055\053\057\067\077\066\001" +
    "\002\000\016\021\120\022\122\023\116\024\117\025\121" +
    "\030\u0100\001\002\000\042\021\uffba\022\uffba\023\uffba\024" +
    "\uffba\025\uffba\030\uffba\034\uffba\035\uffba\037\uffba\040\uffba" +
    "\041\uffba\042\uffba\043\uffba\044\uffba\046\uffba\050\uffba\001" +
    "\002\000\010\030\uffb3\046\uffb3\050\uffb3\001\002\000\010" +
    "\030\uffb4\046\uffb4\050\uffb4\001\002\000\036\004\071\005" +
    "\054\006\111\007\077\010\u010a\011\u010b\021\103\022\044" +
    "\027\106\054\070\055\053\056\102\057\067\077\066\001" +
    "\002\000\036\004\071\005\054\006\111\007\077\010\u0106" +
    "\011\u0107\021\103\022\044\027\106\054\070\055\053\056" +
    "\102\057\067\077\066\001\002\000\014\030\uff96\034\uff96" +
    "\035\uff96\046\uff96\050\uff96\001\002\000\014\030\uffaa\034" +
    "\uffaa\035\uffaa\046\uffaa\050\uffaa\001\002\000\014\030\uffa9" +
    "\034\uffa9\035\uffa9\046\uffa9\050\uffa9\001\002\000\026\021" +
    "\120\022\122\023\116\024\117\025\121\030\uffa5\034\uffa5" +
    "\035\uffa5\046\uffa5\050\uffa5\001\002\000\014\030\uff92\034" +
    "\uff92\035\uff92\046\uff92\050\uff92\001\002\000\014\030\uffa2" +
    "\034\uffa2\035\uffa2\046\uffa2\050\uffa2\001\002\000\014\030" +
    "\uffa1\034\uffa1\035\uffa1\046\uffa1\050\uffa1\001\002\000\026" +
    "\021\120\022\122\023\116\024\117\025\121\030\uff9d\034" +
    "\uff9d\035\uff9d\046\uff9d\050\uff9d\001\002\000\004\051\u010e" +
    "\001\002\000\026\006\020\017\025\020\034\052\uff56\053" +
    "\014\065\015\067\017\074\024\075\010\076\012\001\002" +
    "\000\026\006\020\017\025\020\034\052\uff57\053\014\065" +
    "\015\067\017\074\024\075\010\076\012\001\002\000\004" +
    "\052\u0111\001\002\000\032\002\uff48\006\uff48\017\uff48\020" +
    "\uff48\052\uff48\053\uff48\065\uff48\067\uff48\070\uff48\074\uff48" +
    "\075\uff48\076\uff48\001\002\000\030\002\ufffe\006\ufffe\017" +
    "\ufffe\020\ufffe\052\ufffe\053\ufffe\065\ufffe\067\ufffe\074\ufffe" +
    "\075\ufffe\076\ufffe\001\002\000\014\030\uff85\034\uff85\035" +
    "\uff85\046\uff85\050\uff85\001\002\000\040\004\071\005\054" +
    "\006\111\007\u0117\010\061\011\075\021\103\022\044\027" +
    "\047\036\056\054\070\055\053\056\102\057\067\077\066" +
    "\001\002\000\010\030\u011a\034\233\035\235\001\002\000" +
    "\032\021\120\022\122\023\116\024\117\025\121\030\u0119" +
    "\037\214\040\216\041\211\042\212\043\210\044\215\001" +
    "\002\000\034\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2" +
    "\030\u0118\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044" +
    "\uffc2\045\167\001\002\000\042\021\uff7a\022\uff7a\023\uff7a" +
    "\024\uff7a\025\uff7a\030\uff7a\034\uff7a\035\uff7a\037\uff7a\040" +
    "\uff7a\041\uff7a\042\uff7a\043\uff7a\044\uff7a\046\uff7a\050\uff7a" +
    "\001\002\000\042\021\uff7c\022\uff7c\023\uff7c\024\uff7c\025" +
    "\uff7c\030\uff7c\034\uff7c\035\uff7c\037\uff7c\040\uff7c\041\uff7c" +
    "\042\uff7c\043\uff7c\044\uff7c\046\uff7c\050\uff7c\001\002\000" +
    "\042\021\uff7b\022\uff7b\023\uff7b\024\uff7b\025\uff7b\030\uff7b" +
    "\034\uff7b\035\uff7b\037\uff7b\040\uff7b\041\uff7b\042\uff7b\043" +
    "\uff7b\044\uff7b\046\uff7b\050\uff7b\001\002\000\010\030\u011f" +
    "\034\uff83\035\uff83\001\002\000\010\030\u011e\034\233\035" +
    "\235\001\002\000\032\021\120\022\122\023\116\024\117" +
    "\025\121\030\160\037\214\040\216\041\211\042\212\043" +
    "\210\044\215\001\002\000\014\030\uff84\034\uff84\035\uff84" +
    "\046\uff84\050\uff84\001\002\000\014\030\uff88\034\uff88\035" +
    "\uff88\046\uff88\050\uff88\001\002\000\042\021\uffd1\022\uffd1" +
    "\023\uffd1\024\uffd1\025\uffd1\030\uffd1\034\uffd1\035\uffd1\037" +
    "\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1\046\uffd1" +
    "\050\uffd1\001\002\000\004\052\u0122\001\002\000\030\002" +
    "\uff49\006\uff49\017\uff49\020\uff49\052\uff49\053\uff49\065\uff49" +
    "\067\uff49\074\uff49\075\uff49\076\uff49\001\002\000\030\002" +
    "\uff43\006\uff43\017\uff43\020\uff43\052\uff43\053\uff43\065\uff43" +
    "\067\uff43\074\uff43\075\uff43\076\uff43\001\002\000\032\002" +
    "\uff47\006\uff47\017\uff47\020\uff47\052\uff47\053\uff47\065\uff47" +
    "\067\uff47\070\uff47\074\uff47\075\uff47\076\uff47\001\002\000" +
    "\030\002\uff41\006\uff41\017\uff41\020\uff41\052\uff41\053\uff41" +
    "\065\uff41\067\uff41\074\uff41\075\uff41\076\uff41\001\002\000" +
    "\004\002\001\001\002\000\004\050\u0134\001\002\000\040" +
    "\004\071\005\054\006\063\007\077\010\061\011\075\021" +
    "\103\022\044\027\047\036\056\054\070\055\053\056\102" +
    "\057\067\077\066\001\002\000\042\004\071\005\054\006" +
    "\063\007\077\010\061\011\075\021\103\022\044\027\047" +
    "\030\u012d\036\056\054\070\055\053\056\102\057\067\077" +
    "\066\001\002\000\004\050\u012b\001\002\000\030\002\uffb2" +
    "\006\uffb2\017\uffb2\020\uffb2\052\uffb2\053\uffb2\065\uffb2\067" +
    "\uffb2\074\uffb2\075\uffb2\076\uffb2\001\002\000\004\030\u012f" +
    "\001\002\000\004\050\u012e\001\002\000\030\002\uff4c\006" +
    "\uff4c\017\uff4c\020\uff4c\052\uff4c\053\uff4c\065\uff4c\067\uff4c" +
    "\074\uff4c\075\uff4c\076\uff4c\001\002\000\004\050\u0130\001" +
    "\002\000\030\002\uff4b\006\uff4b\017\uff4b\020\uff4b\052\uff4b" +
    "\053\uff4b\065\uff4b\067\uff4b\074\uff4b\075\uff4b\076\uff4b\001" +
    "\002\000\006\046\uffdd\050\uffdd\001\002\000\004\050\u0133" +
    "\001\002\000\030\002\uffea\006\uffea\017\uffea\020\uffea\052" +
    "\uffea\053\uffea\065\uffea\067\uffea\074\uffea\075\uffea\076\uffea" +
    "\001\002\000\030\002\uffb1\006\uffb1\017\uffb1\020\uffb1\052" +
    "\uffb1\053\uffb1\065\uffb1\067\uffb1\074\uffb1\075\uffb1\076\uffb1" +
    "\001\002\000\040\004\071\005\054\006\063\007\077\010" +
    "\061\011\075\021\103\022\044\027\047\036\056\054\070" +
    "\055\053\056\102\057\067\077\066\001\002\000\004\030" +
    "\u0137\001\002\000\004\051\u0138\001\002\000\026\006\020" +
    "\017\025\020\034\052\uff56\053\014\065\015\067\017\074" +
    "\024\075\010\076\012\001\002\000\004\052\u013a\001\002" +
    "\000\032\002\uff4a\006\uff4a\017\uff4a\020\uff4a\052\uff4a\053" +
    "\uff4a\065\uff4a\067\uff4a\070\uff4a\074\uff4a\075\uff4a\076\uff4a" +
    "\001\002\000\004\066\u013c\001\002\000\004\027\u013d\001" +
    "\002\000\040\004\071\005\054\006\063\007\077\010\061" +
    "\011\075\021\103\022\044\027\047\036\056\054\070\055" +
    "\053\056\102\057\067\077\066\001\002\000\006\030\uff60" +
    "\046\uff60\001\002\000\006\030\u0141\046\u0140\001\002\000" +
    "\040\004\071\005\054\006\063\007\077\010\061\011\075" +
    "\021\103\022\044\027\047\036\056\054\070\055\053\056" +
    "\102\057\067\077\066\001\002\000\004\050\u0142\001\002" +
    "\000\030\002\uff62\006\uff62\017\uff62\020\uff62\052\uff62\053" +
    "\uff62\065\uff62\067\uff62\074\uff62\075\uff62\076\uff62\001\002" +
    "\000\006\030\uff61\046\uff61\001\002\000\004\027\u0145\001" +
    "\002\000\006\006\u0147\030\u0149\001\002\000\006\030\uff54" +
    "\046\uff54\001\002\000\004\047\u0174\001\002\000\006\030" +
    "\u0166\046\u0165\001\002\000\006\047\u014b\051\u014a\001\002" +
    "\000\026\006\020\017\025\020\034\052\uff56\053\014\065" +
    "\015\067\017\074\024\075\010\076\012\001\002\000\014" +
    "\012\u014d\013\u014e\014\u014c\015\u0151\016\u0150\001\002\000" +
    "\014\030\uffdf\033\uffdf\046\uffdf\050\uffdf\051\uffdf\001\002" +
    "\000\014\030\uffe1\033\uffe1\046\uffe1\050\uffe1\051\uffe1\001" +
    "\002\000\014\030\uffe0\033\uffe0\046\uffe0\050\uffe0\051\uffe0" +
    "\001\002\000\004\051\u0160\001\002\000\004\051\u0152\001" +
    "\002\000\014\030\uffde\033\uffde\046\uffde\050\uffde\051\uffde" +
    "\001\002\000\022\006\u0158\017\025\020\034\053\014\065" +
    "\015\067\017\074\024\075\010\001\002\000\024\006\uffef" +
    "\017\uffef\020\uffef\052\uffef\053\uffef\065\uffef\067\uffef\074" +
    "\uffef\075\uffef\001\002\000\024\006\uffed\017\uffed\020\uffed" +
    "\052\uffed\053\uffed\065\uffed\067\uffed\074\uffed\075\uffed\001" +
    "\002\000\024\006\uffee\017\uffee\020\uffee\052\uffee\053\uffee" +
    "\065\uffee\067\uffee\074\uffee\075\uffee\001\002\000\024\006" +
    "\u0158\017\025\020\034\052\u015e\053\014\065\015\067\017" +
    "\074\024\075\010\001\002\000\024\006\ufff0\017\ufff0\020" +
    "\ufff0\052\ufff0\053\ufff0\065\ufff0\067\ufff0\074\ufff0\075\ufff0" +
    "\001\002\000\006\027\u0129\033\u0128\001\002\000\024\006" +
    "\ufff1\017\ufff1\020\ufff1\052\ufff1\053\ufff1\065\ufff1\067\ufff1" +
    "\074\ufff1\075\ufff1\001\002\000\024\006\uffec\017\uffec\020" +
    "\uffec\052\uffec\053\uffec\065\uffec\067\uffec\074\uffec\075\uffec" +
    "\001\002\000\024\006\uffeb\017\uffeb\020\uffeb\052\uffeb\053" +
    "\uffeb\065\uffeb\067\uffeb\074\uffeb\075\uffeb\001\002\000\024" +
    "\006\ufff2\017\ufff2\020\ufff2\052\ufff2\053\ufff2\065\ufff2\067" +
    "\ufff2\074\ufff2\075\ufff2\001\002\000\024\006\uff58\017\uff58" +
    "\020\uff58\052\uff58\053\uff58\065\uff58\067\uff58\074\uff58\075" +
    "\uff58\001\002\000\030\002\uff5f\006\uff5f\017\uff5f\020\uff5f" +
    "\052\uff5f\053\uff5f\065\uff5f\067\uff5f\074\uff5f\075\uff5f\076" +
    "\uff5f\001\002\000\024\006\uff59\017\uff59\020\uff59\052\uff59" +
    "\053\uff59\065\uff59\067\uff59\074\uff59\075\uff59\001\002\000" +
    "\026\006\020\017\025\020\034\052\uff56\053\014\065\015" +
    "\067\017\074\024\075\010\076\012\001\002\000\004\052" +
    "\u0162\001\002\000\030\002\uff5b\006\uff5b\017\uff5b\020\uff5b" +
    "\052\uff5b\053\uff5b\065\uff5b\067\uff5b\074\uff5b\075\uff5b\076" +
    "\uff5b\001\002\000\004\052\u0164\001\002\000\030\002\uff5d" +
    "\006\uff5d\017\uff5d\020\uff5d\052\uff5d\053\uff5d\065\uff5d\067" +
    "\uff5d\074\uff5d\075\uff5d\076\uff5d\001\002\000\004\006\u0147" +
    "\001\002\000\006\047\u0168\051\u0167\001\002\000\026\006" +
    "\020\017\025\020\034\052\uff56\053\014\065\015\067\017" +
    "\074\024\075\010\076\012\001\002\000\014\012\u014d\013" +
    "\u014e\014\u014c\015\u0151\016\u016a\001\002\000\004\051\u016e" +
    "\001\002\000\004\051\u016b\001\002\000\022\006\u0158\017" +
    "\025\020\034\053\014\065\015\067\017\074\024\075\010" +
    "\001\002\000\024\006\u0158\017\025\020\034\052\u016d\053" +
    "\014\065\015\067\017\074\024\075\010\001\002\000\030" +
    "\002\uff5e\006\uff5e\017\uff5e\020\uff5e\052\uff5e\053\uff5e\065" +
    "\uff5e\067\uff5e\074\uff5e\075\uff5e\076\uff5e\001\002\000\026" +
    "\006\020\017\025\020\034\052\uff56\053\014\065\015\067" +
    "\017\074\024\075\010\076\012\001\002\000\004\052\u0170" +
    "\001\002\000\030\002\uff5a\006\uff5a\017\uff5a\020\uff5a\052" +
    "\uff5a\053\uff5a\065\uff5a\067\uff5a\074\uff5a\075\uff5a\076\uff5a" +
    "\001\002\000\004\052\u0172\001\002\000\030\002\uff5c\006" +
    "\uff5c\017\uff5c\020\uff5c\052\uff5c\053\uff5c\065\uff5c\067\uff5c" +
    "\074\uff5c\075\uff5c\076\uff5c\001\002\000\006\030\uff55\046" +
    "\uff55\001\002\000\012\012\u014d\013\u014e\014\u014c\015\u0151" +
    "\001\002\000\006\030\uff53\046\uff53\001\002\000\006\046" +
    "\uffe7\050\uffe7\001\002\000\006\046\u017f\050\u0180\001\002" +
    "\000\006\033\u0179\047\u017a\001\002\000\040\004\071\005" +
    "\054\006\063\007\077\010\061\011\075\021\103\022\044" +
    "\027\047\036\056\054\070\055\053\056\102\057\067\077" +
    "\066\001\002\000\012\012\u014d\013\u014e\014\u014c\015\u0151" +
    "\001\002\000\010\033\u017c\046\uffe4\050\uffe4\001\002\000" +
    "\040\004\071\005\054\006\063\007\077\010\061\011\075" +
    "\021\103\022\044\027\047\036\056\054\070\055\053\056" +
    "\102\057\067\077\066\001\002\000\006\046\uffe6\050\uffe6" +
    "\001\002\000\006\046\uffe5\050\uffe5\001\002\000\004\006" +
    "\u0178\001\002\000\030\002\uffe9\006\uffe9\017\uffe9\020\uffe9" +
    "\052\uffe9\053\uffe9\065\uffe9\067\uffe9\074\uffe9\075\uffe9\076" +
    "\uffe9\001\002\000\006\046\uffe8\050\uffe8\001\002\000\004" +
    "\050\u0184\001\002\000\030\002\uff51\006\uff51\017\uff51\020" +
    "\uff51\052\uff51\053\uff51\065\uff51\067\uff51\074\uff51\075\uff51" +
    "\076\uff51\001\002\000\030\002\uff52\006\uff52\017\uff52\020" +
    "\uff52\052\uff52\053\uff52\065\uff52\067\uff52\074\uff52\075\uff52" +
    "\076\uff52\001\002\000\030\002\uff40\006\uff40\017\uff40\020" +
    "\uff40\052\uff40\053\uff40\065\uff40\067\uff40\074\uff40\075\uff40" +
    "\076\uff40\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0183\000\042\002\022\003\005\004\006\005\021\007" +
    "\027\010\012\015\020\022\032\037\015\041\003\047\030" +
    "\050\031\054\004\057\010\060\025\061\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\005\u0111\007\027\010\012\015\020\022\032\037\015\041" +
    "\003\047\030\050\031\054\004\057\010\060\025\061\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\006" +
    "\u0181\016\075\017\072\020\071\021\073\023\045\024\064" +
    "\025\056\026\051\027\054\030\047\031\050\032\103\033" +
    "\044\034\077\035\100\036\061\055\063\001\001\000\006" +
    "\011\u0176\012\u0175\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\051" +
    "\036\052\037\053\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\051\u0122\052\u0123\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\004\u010e" +
    "\005\021\007\027\010\012\015\020\022\032\037\015\041" +
    "\003\044\u0120\047\030\050\031\054\004\057\010\060\025" +
    "\061\026\001\001\000\002\001\001\000\046\006\057\016" +
    "\075\017\072\020\071\021\073\023\045\024\064\025\056" +
    "\026\051\027\054\030\047\031\050\032\103\033\044\034" +
    "\077\035\100\036\061\055\063\001\001\000\032\016\u011f" +
    "\017\072\025\056\026\051\027\054\031\106\032\114\033" +
    "\104\034\113\035\100\036\107\055\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\016\u011c\017\072\023" +
    "\u011a\024\u011b\025\056\026\051\027\054\030\161\031\162" +
    "\032\114\033\104\034\113\035\100\036\107\055\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\016\236\017\072\023\045\024\u0112\025\056\026\051" +
    "\027\054\030\161\031\162\032\114\033\104\034\113\035" +
    "\100\036\107\055\111\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\016\112" +
    "\017\072\025\056\026\051\027\054\031\106\032\114\033" +
    "\104\034\113\035\100\036\107\055\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\016\156\017\072\025" +
    "\056\026\051\027\054\031\106\032\114\033\104\034\113" +
    "\035\100\036\107\055\111\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\016" +
    "\126\017\072\025\056\026\051\027\054\031\106\032\114" +
    "\033\104\034\113\035\100\036\107\055\111\001\001\000" +
    "\032\016\125\017\072\025\056\026\051\027\054\031\106" +
    "\032\114\033\104\034\113\035\100\036\107\055\111\001" +
    "\001\000\032\016\124\017\072\025\056\026\051\027\054" +
    "\031\106\032\114\033\104\034\113\035\100\036\107\055" +
    "\111\001\001\000\032\016\123\017\072\025\056\026\051" +
    "\027\054\031\106\032\114\033\104\034\113\035\100\036" +
    "\107\055\111\001\001\000\032\016\122\017\072\025\056" +
    "\026\051\027\054\031\106\032\114\033\104\034\113\035" +
    "\100\036\107\055\111\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\006\132\016\075\017\072" +
    "\020\071\021\073\023\045\024\064\025\056\026\051\027" +
    "\054\030\047\031\050\032\103\033\044\034\077\035\100" +
    "\036\061\055\063\056\131\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\006\136\016\075" +
    "\017\072\020\071\021\073\023\045\024\064\025\056\026" +
    "\051\027\054\030\047\031\050\032\103\033\044\034\077" +
    "\035\100\036\061\055\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\016" +
    "\145\017\072\025\056\026\051\027\054\031\106\032\114" +
    "\033\104\034\113\035\100\036\107\055\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\006\152\016\075\017\072\020\071\021" +
    "\073\023\045\024\064\025\056\026\051\027\054\030\047" +
    "\031\050\032\103\033\044\034\077\035\100\036\061\055" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\016\164\017\072\023\045\024\163\025\056" +
    "\026\051\027\054\030\161\031\162\032\114\033\104\034" +
    "\113\035\100\036\107\055\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\016\176\017\072\025\056" +
    "\026\051\027\054\031\106\032\114\033\104\034\113\035" +
    "\100\036\107\055\111\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\006" +
    "\203\016\075\017\072\020\071\021\073\023\045\024\064" +
    "\025\056\026\051\027\054\030\047\031\050\032\103\033" +
    "\044\034\077\035\100\036\061\055\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\016\231\017\072\025\056\026\051\027\054" +
    "\031\226\032\114\033\104\034\113\035\100\036\107\055" +
    "\111\001\001\000\032\016\225\017\072\025\056\026\051" +
    "\027\054\031\106\032\114\033\104\034\113\035\100\036" +
    "\107\055\111\001\001\000\032\016\224\017\072\025\056" +
    "\026\051\027\054\031\106\032\114\033\104\034\113\035" +
    "\100\036\107\055\111\001\001\000\002\001\001\000\032" +
    "\016\223\017\072\025\056\026\051\027\054\031\106\032" +
    "\114\033\104\034\113\035\100\036\107\055\111\001\001" +
    "\000\032\016\222\017\072\025\056\026\051\027\054\031" +
    "\217\032\114\033\104\034\113\035\100\036\107\055\111" +
    "\001\001\000\032\016\216\017\072\025\056\026\051\027" +
    "\054\031\106\032\114\033\104\034\113\035\100\036\107" +
    "\055\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\016\236\017\072\023\045\024\237\025\056\026" +
    "\051\027\054\030\161\031\162\032\114\033\104\034\113" +
    "\035\100\036\107\055\111\001\001\000\002\001\001\000" +
    "\040\016\236\017\072\023\045\024\235\025\056\026\051" +
    "\027\054\030\161\031\162\032\114\033\104\034\113\035" +
    "\100\036\107\055\111\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\016\245\017\072\025" +
    "\056\026\051\027\054\031\244\032\114\033\104\034\113" +
    "\035\100\036\107\055\111\001\001\000\032\016\243\017" +
    "\072\025\056\026\051\027\054\031\242\032\114\033\104" +
    "\034\113\035\100\036\107\055\111\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\030\253\001\001\000\004\030\250\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\006\266\016\075\017\072\020\071\021\073\023\045" +
    "\024\064\025\056\026\051\027\054\030\047\031\050\032" +
    "\103\033\044\034\077\035\100\036\061\055\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\016\303\017\072\025\056\026\051" +
    "\027\054\030\300\031\106\032\114\033\104\034\113\035" +
    "\100\036\107\055\111\001\001\000\034\016\277\017\072" +
    "\025\056\026\051\027\054\030\274\031\106\032\114\033" +
    "\104\034\113\035\100\036\107\055\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\016\306\017\072\023\045\024" +
    "\305\025\056\026\051\027\054\030\161\031\162\032\114" +
    "\033\104\034\113\035\100\036\107\055\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\016" +
    "\315\017\072\023\045\024\314\025\056\026\051\027\054" +
    "\030\161\031\162\032\114\033\104\034\113\035\100\036" +
    "\107\055\111\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\016\341\017\072" +
    "\025\056\026\051\027\054\031\106\032\114\033\104\034" +
    "\113\035\100\036\107\055\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\016\344\017\072\025\056\026" +
    "\051\027\054\031\106\032\114\033\104\034\113\035\100" +
    "\036\107\055\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\016\347\017\072\025\056\026\051\027\054" +
    "\031\106\032\114\033\104\034\113\035\100\036\107\055" +
    "\111\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\016\352\017\072\025\056\026\051\027\054\031\106\032" +
    "\114\033\104\034\113\035\100\036\107\055\111\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\016\355\017" +
    "\072\025\056\026\051\027\054\031\106\032\114\033\104" +
    "\034\113\035\100\036\107\055\111\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\016\360\017\072\025\056" +
    "\026\051\027\054\031\106\032\114\033\104\034\113\035" +
    "\100\036\107\055\111\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\016\363\017\072\025\056\026\051\027" +
    "\054\031\106\032\114\033\104\034\113\035\100\036\107" +
    "\055\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\016\366\017\072\025\056\026\051\027\054\031\106" +
    "\032\114\033\104\034\113\035\100\036\107\055\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\016\371" +
    "\017\072\025\056\026\051\027\054\031\106\032\114\033" +
    "\104\034\113\035\100\036\107\055\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\016\374\017\072\025" +
    "\056\026\051\027\054\031\106\032\114\033\104\034\113" +
    "\035\100\036\107\055\111\001\001\000\002\001\001\000" +
    "\032\016\376\017\072\025\056\026\051\027\054\031\106" +
    "\032\114\033\104\034\113\035\100\036\107\055\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\016\u010b\017\072\025\056\026" +
    "\051\027\054\030\u0108\031\106\032\114\033\104\034\113" +
    "\035\100\036\107\055\111\001\001\000\034\016\u0107\017" +
    "\072\025\056\026\051\027\054\030\u0104\031\106\032\114" +
    "\033\104\034\113\035\100\036\107\055\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\004\u010e" +
    "\005\021\007\027\010\012\015\020\022\032\037\015\041" +
    "\003\044\u010f\047\030\050\031\054\004\057\010\060\025" +
    "\061\026\001\001\000\034\005\u0111\007\027\010\012\015" +
    "\020\022\032\037\015\041\003\047\030\050\031\054\004" +
    "\057\010\060\025\061\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\016\u0115\017\072\023\045\024\u0114\025\056\026\051\027" +
    "\054\030\161\031\162\032\114\033\104\034\113\035\100" +
    "\036\107\055\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\006\u0130\014\u0131\016\075\017" +
    "\072\020\071\021\073\023\045\024\064\025\056\026\051" +
    "\027\054\030\047\031\050\032\103\033\044\034\077\035" +
    "\100\036\061\055\063\001\001\000\046\006\u012b\016\075" +
    "\017\072\020\071\021\073\023\045\024\064\025\056\026" +
    "\051\027\054\030\047\031\050\032\103\033\044\034\077" +
    "\035\100\036\061\055\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\006\u0135\016\075\017\072\020\071\021\073\023" +
    "\045\024\064\025\056\026\051\027\054\030\047\031\050" +
    "\032\103\033\044\034\077\035\100\036\061\055\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\004\u010e" +
    "\005\021\007\027\010\012\015\020\022\032\037\015\041" +
    "\003\044\u0138\047\030\050\031\054\004\057\010\060\025" +
    "\061\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\006\u013d\016\075" +
    "\017\072\020\071\021\073\023\045\024\064\025\056\026" +
    "\051\027\054\030\047\031\050\032\103\033\044\034\077" +
    "\035\100\036\061\040\u013e\055\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\006\u0142\016\075\017\072" +
    "\020\071\021\073\023\045\024\064\025\056\026\051\027" +
    "\054\030\047\031\050\032\103\033\044\034\077\035\100" +
    "\036\061\055\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\042\u0145" +
    "\043\u0147\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\004\u010e\005\021" +
    "\007\027\010\012\015\020\022\032\037\015\041\003\044" +
    "\u0162\047\030\050\031\054\004\057\010\060\025\061\026" +
    "\001\001\000\004\013\u014e\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\007\u015b\010\012\015" +
    "\u0158\037\u0156\041\u0152\045\u0155\046\u015c\050\031\054\u0153" +
    "\057\u0154\060\u0159\061\u015a\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\007\u015b\010\012" +
    "\015\u0158\037\u0156\041\u0152\046\u015e\050\031\054\u0153\057" +
    "\u0154\060\u0159\061\u015a\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\004\u010e\005\021\007\027\010" +
    "\012\015\020\022\032\037\015\041\003\044\u0160\047\030" +
    "\050\031\054\004\057\010\060\025\061\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\042\u0172\001\001\000\002\001\001\000" +
    "\040\004\u010e\005\021\007\027\010\012\015\020\022\032" +
    "\037\015\041\003\044\u0170\047\030\050\031\054\004\057" +
    "\010\060\025\061\026\001\001\000\004\013\u0168\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\007\u015b\010" +
    "\012\015\u0158\037\u0156\041\u0152\045\u016b\046\u015c\050\031" +
    "\054\u0153\057\u0154\060\u0159\061\u015a\001\001\000\030\007" +
    "\u015b\010\012\015\u0158\037\u0156\041\u0152\046\u015e\050\031" +
    "\054\u0153\057\u0154\060\u0159\061\u015a\001\001\000\002\001" +
    "\001\000\040\004\u010e\005\021\007\027\010\012\015\020" +
    "\022\032\037\015\041\003\044\u016e\047\030\050\031\054" +
    "\004\057\010\060\025\061\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\u0174\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\006\u0130\014\u017d\016\075\017\072\020\071\021\073" +
    "\023\045\024\064\025\056\026\051\027\054\030\047\031" +
    "\050\032\103\033\044\034\077\035\100\036\061\055\063" +
    "\001\001\000\004\013\u017a\001\001\000\002\001\001\000" +
    "\050\006\u0130\014\u017c\016\075\017\072\020\071\021\073" +
    "\023\045\024\064\025\056\026\051\027\054\030\047\031" +
    "\050\032\103\033\044\034\077\035\100\036\061\055\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\u0180\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public Parser(Lexer lexer) {
        super(lexer);
    }

    //Metodo llamado automaticamente al encontrar error sintanctico


    public void syntax_error(Symbol s){

    String lexema = s.value.toString();
    int fila = s.right;
    int columna = s.left;
    
    System.out.println("Error Sintactico hallado");
    System.out.println("Lexema " + lexema + " linea"  + fila + " columna " + columna);

    }

    //Metodo llamado cuando no se puede recuperar de un error
    
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        
    String lexema = s.value.toString();
    int fila = s.right;
    int columna = s.left;
    
    System.out.println("Error Sintactico hallado PANIC MODE");
    System.out.println("Lexema " + lexema + " linea"  + fila + " columna " + columna);
        
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= ts 
            {
              Object RESULT =null;
		 System.out.println("Doc ok"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ts ::= instrucciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ts",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instrucciones opciones_instrucciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instrucciones ::= opciones_instrucciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // opciones_instrucciones ::= declaracion_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // opciones_instrucciones ::= asignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // opciones_instrucciones ::= funcion_console_log 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // opciones_instrucciones ::= declaracion_funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // opciones_instrucciones ::= llamada_funcion_normal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // opciones_instrucciones ::= opciones_if 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // opciones_instrucciones ::= funcion_return 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // opciones_instrucciones ::= instruccion_break 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // opciones_instrucciones ::= instruccion_continue 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // opciones_instrucciones ::= funcion_incremento_decremento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // opciones_instrucciones_sin_return ::= declaracion_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones_sin_return",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // opciones_instrucciones_sin_return ::= asignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones_sin_return",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // opciones_instrucciones_sin_return ::= funcion_console_log 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones_sin_return",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // opciones_instrucciones_sin_return ::= declaracion_funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones_sin_return",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // opciones_instrucciones_sin_return ::= llamada_funcion_normal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones_sin_return",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // opciones_instrucciones_sin_return ::= opciones_if 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones_sin_return",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // opciones_instrucciones_sin_return ::= instruccion_break 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones_sin_return",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // opciones_instrucciones_sin_return ::= instruccion_continue 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones_sin_return",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // asignacion ::= ID ASIGNACION variable_valor PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaracion_variable ::= tipo_acceso_variable id_valor_variable_lista PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_variable",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // id_valor_variable_lista ::= id_valor_variable_lista COMA id_valor_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_valor_variable_lista",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // id_valor_variable_lista ::= id_valor_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_valor_variable_lista",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // id_valor_variable ::= ID DOS_PUNTOS tipo_dato_variable ASIGNACION variable_valor 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tipoDatoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tipoDatoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object tipoDato = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println(id + " " + tipoDato + " " + valor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_valor_variable",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // id_valor_variable ::= ID ASIGNACION variable_valor 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println(id + " " + valor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_valor_variable",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // id_valor_variable ::= ID DOS_PUNTOS tipo_dato_variable 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tipoDatoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tipoDatoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tipoDato = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println(id + " " + tipoDato + " " + " undefined"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_valor_variable",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipo_acceso_variable ::= RCONST 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_acceso_variable",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipo_acceso_variable ::= RLET 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_acceso_variable",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipo_dato_variable ::= RNUMBER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato_variable",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tipo_dato_variable ::= RBIGINT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato_variable",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tipo_dato_variable ::= RSTRING 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato_variable",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // tipo_dato_variable ::= RBOOLEAN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato_variable",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // variable_valor ::= instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_valor",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instruccion ::= operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instruccion ::= operaciones_logicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instruccion ::= funcion_boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instruccion ::= funcion_string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instruccion ::= funcion_char_at 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instruccion ::= funcion_to_lower_case 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instruccion ::= funcion_to_upper_case 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instruccion ::= funcion_concat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instruccion ::= llamada_funcion_asignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // instruccion ::= incremento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // instruccion ::= decremento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // operaciones_matematicas ::= MENOS operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // operaciones_matematicas ::= MAS operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // operaciones_matematicas ::= operaciones_matematicas MAS operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // operaciones_matematicas ::= operaciones_matematicas MENOS operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // operaciones_matematicas ::= operaciones_matematicas MULTIPLICACION operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // operaciones_matematicas ::= operaciones_matematicas DIVISION operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // operaciones_matematicas ::= operaciones_matematicas MOD operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // operaciones_matematicas ::= PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // operaciones_matematicas ::= funcion_number 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // operaciones_matematicas ::= funcion_bigint 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // operaciones_matematicas ::= funcion_length 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // operaciones_matematicas ::= funciones_numericas_estaticas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // operaciones_matematicas ::= NUMBER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // operaciones_matematicas ::= BIGINT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // operaciones_matematicas ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // operaciones_matematicas ::= TEXTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // funciones_numericas_estaticas ::= MATH PUNTO ABS PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // funciones_numericas_estaticas ::= MATH PUNTO CEIL PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // funciones_numericas_estaticas ::= MATH PUNTO COS PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // funciones_numericas_estaticas ::= MATH PUNTO SIN PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // funciones_numericas_estaticas ::= MATH PUNTO TAN PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // funciones_numericas_estaticas ::= MATH PUNTO EXP PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // funciones_numericas_estaticas ::= MATH PUNTO FLOOR PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // funciones_numericas_estaticas ::= MATH PUNTO POW PARENTESIS_ABIERTO operaciones_matematicas COMA operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // funciones_numericas_estaticas ::= MATH PUNTO SQRT PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // funciones_numericas_estaticas ::= MATH PUNTO RANDOM PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // funciones_numericas_estaticas ::= MATH PUNTO E 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // funciones_numericas_estaticas ::= MATH PUNTO PI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // funciones_numericas_estaticas ::= MATH PUNTO SQRT2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // incremento ::= ID INCREMENTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // decremento ::= ID DECREMENTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decremento",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // funcion_incremento_decremento ::= ID INCREMENTO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_incremento_decremento",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // funcion_incremento_decremento ::= ID DECREMENTO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_incremento_decremento",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // operaciones_relacionales ::= operaciones_matematicas MAYOR_QUE operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // operaciones_relacionales ::= operaciones_matematicas MAYOR_IGUAL operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // operaciones_relacionales ::= operaciones_matematicas MENOR_QUE operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // operaciones_relacionales ::= operaciones_matematicas MENOR_IGUAL operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // operaciones_relacionales ::= operaciones_matematicas COMPARACION operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // operaciones_relacionales ::= operaciones_matematicas DISTINTO operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // operaciones_relacionales ::= TRUE COMPARACION TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // operaciones_relacionales ::= TRUE COMPARACION FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // operaciones_relacionales ::= FALSE COMPARACION TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // operaciones_relacionales ::= FALSE COMPARACION FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // operaciones_relacionales ::= operaciones_matematicas COMPARACION TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // operaciones_relacionales ::= TRUE COMPARACION operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // operaciones_relacionales ::= operaciones_matematicas COMPARACION FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // operaciones_relacionales ::= FALSE COMPARACION operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // operaciones_relacionales ::= TRUE DISTINTO TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // operaciones_relacionales ::= TRUE DISTINTO FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // operaciones_relacionales ::= FALSE DISTINTO TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // operaciones_relacionales ::= FALSE DISTINTO FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // operaciones_relacionales ::= operaciones_matematicas DISTINTO TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // operaciones_relacionales ::= TRUE DISTINTO operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // operaciones_relacionales ::= operaciones_matematicas DISTINTO FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // operaciones_relacionales ::= FALSE DISTINTO operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // operaciones_relacionales ::= TRUE 
            {
              Object RESULT =null;
		 RESULT = "true"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // operaciones_relacionales ::= FALSE 
            {
              Object RESULT =null;
		 RESULT = "false"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // operaciones_relacionales ::= funcion_boolean COMPARACION TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // operaciones_relacionales ::= funcion_boolean COMPARACION FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // operaciones_relacionales ::= TRUE COMPARACION funcion_boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // operaciones_relacionales ::= FALSE COMPARACION funcion_boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // operaciones_relacionales ::= funcion_boolean DISTINTO TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // operaciones_relacionales ::= funcion_boolean DISTINTO FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // operaciones_relacionales ::= TRUE DISTINTO funcion_boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // operaciones_relacionales ::= FALSE DISTINTO funcion_boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // operaciones_relacionales ::= funcion_boolean COMPARACION funcion_boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // operaciones_relacionales ::= funcion_boolean DISTINTO funcion_boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // operaciones_relacionales ::= funcion_string COMPARACION funcion_string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // operaciones_relacionales ::= funcion_string DISTINTO funcion_string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // operaciones_relacionales ::= funcion_string COMPARACION operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // operaciones_relacionales ::= funcion_string DISTINTO operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // operaciones_relacionales ::= operaciones_matematicas COMPARACION funcion_string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // operaciones_relacionales ::= operaciones_matematicas DISTINTO funcion_string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // operaciones_relacionales ::= PARENTESIS_ABIERTO operaciones_relacionales PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // operaciones_logicas ::= operaciones_logicas AND operaciones_logicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // operaciones_logicas ::= operaciones_logicas OR operaciones_logicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // operaciones_logicas ::= NOT operaciones_logicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // operaciones_logicas ::= PARENTESIS_ABIERTO operaciones_logicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // operaciones_logicas ::= operaciones_relacionales 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // funcion_length ::= TEXTO PUNTO LENGTH 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_length",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // funcion_length ::= ID PUNTO LENGTH 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_length",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // funcion_length ::= variables_string PUNTO LENGTH 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_length",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // funcion_number ::= FNUMBER PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_number",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // funcion_number ::= FNUMBER PARENTESIS_ABIERTO operaciones_logicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_number",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // funcion_number ::= FNUMBER PARENTESIS_ABIERTO TEXTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_number",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // funcion_bigint ::= FBIGINT PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_bigint",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // funcion_bigint ::= FBIGINT PARENTESIS_ABIERTO operaciones_logicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_bigint",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // funcion_bigint ::= FBIGINT PARENTESIS_ABIERTO TEXTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_bigint",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // funcion_boolean ::= FBOOLEAN PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_boolean",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // funcion_boolean ::= FBOOLEAN PARENTESIS_ABIERTO operaciones_logicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_boolean",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // funcion_boolean ::= FBOOLEAN PARENTESIS_ABIERTO TEXTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_boolean",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // funcion_string ::= FSTRING PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_string",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // funcion_string ::= FSTRING PARENTESIS_ABIERTO operaciones_logicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_string",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // funcion_string ::= FSTRING PARENTESIS_ABIERTO TEXTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_string",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // funcion_char_at ::= ID PUNTO CHARAT PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_char_at",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // funcion_char_at ::= TEXTO PUNTO CHARAT PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_char_at",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // funcion_concat ::= variables_string PUNTO CONCAT PARENTESIS_ABIERTO instruccion PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_concat",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // funcion_concat ::= TEXTO PUNTO CONCAT PARENTESIS_ABIERTO instruccion PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_concat",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // funcion_concat ::= ID PUNTO CONCAT PARENTESIS_ABIERTO instruccion PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_concat",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // variables_string ::= funcion_string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables_string",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // variables_string ::= funcion_char_at 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables_string",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // variables_string ::= funcion_to_lower_case 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables_string",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // variables_string ::= funcion_to_upper_case 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables_string",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // variables_string ::= funcion_concat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables_string",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // variables_string ::= llamada_funcion_asignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables_string",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // funcion_to_lower_case ::= ID PUNTO TOLOWERCASE PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_to_lower_case",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // funcion_to_lower_case ::= TEXTO PUNTO TOLOWERCASE PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_to_lower_case",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // funcion_to_lower_case ::= variables_string PUNTO TOLOWERCASE PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_to_lower_case",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // funcion_to_upper_case ::= ID PUNTO TOUPPERCASE PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_to_upper_case",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // funcion_to_upper_case ::= TEXTO PUNTO TOUPPERCASE PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_to_upper_case",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // funcion_to_upper_case ::= variables_string PUNTO TOUPPERCASE PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_to_upper_case",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // funcion_console_log ::= CONSOLE PUNTO LOG PARENTESIS_ABIERTO lista_instrucciones_console PARENTESIS_CERRADO PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 System.out.println(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_console_log",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // lista_instrucciones_console ::= lista_instrucciones_console COMA instruccion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instrucciones_console",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // lista_instrucciones_console ::= instruccion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instrucciones_console",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // declaracion_funcion ::= FUNCTION ID PARENTESIS_ABIERTO PARENTESIS_CERRADO DOS_PUNTOS RVOID CORCHETE_ABIERTO instrucciones_funciones_sin_return CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // declaracion_funcion ::= FUNCTION ID PARENTESIS_ABIERTO parametros_funcion_declaracion PARENTESIS_CERRADO DOS_PUNTOS RVOID CORCHETE_ABIERTO instrucciones_funciones_sin_return CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // declaracion_funcion ::= FUNCTION ID PARENTESIS_ABIERTO PARENTESIS_CERRADO CORCHETE_ABIERTO instrucciones_funcion CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // declaracion_funcion ::= FUNCTION ID PARENTESIS_ABIERTO parametros_funcion_declaracion PARENTESIS_CERRADO CORCHETE_ABIERTO instrucciones_funcion CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // declaracion_funcion ::= FUNCTION ID PARENTESIS_ABIERTO PARENTESIS_CERRADO DOS_PUNTOS tipo_dato_variable CORCHETE_ABIERTO instrucciones_funcion CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // declaracion_funcion ::= FUNCTION ID PARENTESIS_ABIERTO parametros_funcion_declaracion PARENTESIS_CERRADO DOS_PUNTOS tipo_dato_variable CORCHETE_ABIERTO instrucciones_funcion CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // instrucciones_funciones_sin_return ::= instrucciones_funciones_sin_return opciones_instrucciones_sin_return 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_funciones_sin_return",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // instrucciones_funciones_sin_return ::= opciones_instrucciones_sin_return 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_funciones_sin_return",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // instrucciones_funcion ::= instrucciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_funcion",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // instrucciones_funcion ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_funcion",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // parametros_funcion_declaracion ::= parametros_funcion_declaracion COMA parametro_funcion_declaracion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_funcion_declaracion",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // parametros_funcion_declaracion ::= parametro_funcion_declaracion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_funcion_declaracion",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // parametro_funcion_declaracion ::= ID DOS_PUNTOS tipo_dato_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro_funcion_declaracion",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // funcion_return ::= RETURN instruccion PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_return",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // funcion_return ::= RETURN PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_return",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // llamada_funcion_asignacion ::= ID PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion_asignacion",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // llamada_funcion_asignacion ::= ID PARENTESIS_ABIERTO parametros_funcion_asignacion PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion_asignacion",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // parametros_funcion_asignacion ::= parametros_funcion_asignacion COMA instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_funcion_asignacion",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // parametros_funcion_asignacion ::= instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_funcion_asignacion",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // llamada_funcion_normal ::= ID PARENTESIS_ABIERTO PARENTESIS_CERRADO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion_normal",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // llamada_funcion_normal ::= ID PARENTESIS_ABIERTO instruccion PARENTESIS_CERRADO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion_normal",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // funcion_if ::= IF PARENTESIS_ABIERTO instruccion PARENTESIS_CERRADO CORCHETE_ABIERTO instrucciones_funcion CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_if",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // funcion_else ::= ELSE CORCHETE_ABIERTO instrucciones_funcion CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_else",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // funcion_else_if ::= ELSE IF PARENTESIS_ABIERTO instruccion PARENTESIS_CERRADO CORCHETE_ABIERTO instrucciones_funcion CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_else_if",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // lista_else_if ::= lista_else_if funcion_else_if 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_else_if",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // lista_else_if ::= funcion_else_if 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_else_if",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // opciones_if ::= funcion_if 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_if",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // opciones_if ::= funcion_if funcion_else 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_if",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // opciones_if ::= funcion_if lista_else_if funcion_else 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_if",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // opciones_if ::= funcion_if lista_else_if 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_if",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // instruccion_break ::= BREAK PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion_break",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // instruccion_continue ::= CONTINUE PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion_continue",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
