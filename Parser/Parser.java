
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.peter.typesecure.parser;

import com.peter.typesecure.lexer.Lexer;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\315\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\004\004\000\002\004\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\046\003\000\002\046\003" +
    "\000\002\046\003\000\002\046\003\000\002\046\003\000" +
    "\002\046\003\000\002\046\003\000\002\046\003\000\002" +
    "\046\003\000\002\046\003\000\002\046\003\000\002\015" +
    "\006\000\002\007\005\000\002\011\005\000\002\011\003" +
    "\000\002\012\007\000\002\012\005\000\002\012\005\000" +
    "\002\010\003\000\002\010\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\014" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\016\004\000\002\016" +
    "\004\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\017\010\000\002\017\010" +
    "\000\002\017\010\000\002\017\010\000\002\017\010\000" +
    "\002\017\010\000\002\017\010\000\002\017\012\000\002" +
    "\017\010\000\002\017\010\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\020\004\000\002\021\004" +
    "\000\002\022\005\000\002\022\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\003\000\002\023\003" +
    "\000\002\023\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\024\005\000\002\024\005\000\002" +
    "\024\004\000\002\024\005\000\002\024\003\000\002\025" +
    "\005\000\002\025\005\000\002\025\005\000\002\026\006" +
    "\000\002\026\006\000\002\026\006\000\002\027\006\000" +
    "\002\027\006\000\002\027\006\000\002\030\006\000\002" +
    "\030\006\000\002\030\006\000\002\031\006\000\002\031" +
    "\006\000\002\031\006\000\002\032\010\000\002\032\010" +
    "\000\002\036\010\000\002\036\010\000\002\036\010\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\033" +
    "\007\000\002\033\007\000\002\033\007\000\002\034\007" +
    "\000\002\034\007\000\002\034\007\000\002\037\011\000" +
    "\002\040\005\000\002\040\003\000\002\041\013\000\002" +
    "\041\014\000\002\041\011\000\002\041\012\000\002\041" +
    "\013\000\002\041\014\000\002\045\004\000\002\045\003" +
    "\000\002\044\003\000\002\044\002\000\002\043\005\000" +
    "\002\043\003\000\002\042\005\000\002\047\005\000\002" +
    "\047\004\000\002\055\005\000\002\055\006\000\002\056" +
    "\005\000\002\056\003\000\002\057\006\000\002\057\007" +
    "\000\002\050\011\000\002\051\006\000\002\052\012\000" +
    "\002\053\004\000\002\053\003\000\002\054\003\000\002" +
    "\054\004\000\002\054\005\000\002\054\004\000\002\060" +
    "\004\000\002\061\004\000\002\062\014\000\002\062\014" +
    "\000\002\063\004\000\002\063\004\000\002\063\005\000" +
    "\002\064\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01a6\000\030\006\021\017\026\020\040\053\016\065" +
    "\017\067\020\071\035\072\012\074\027\075\010\076\013" +
    "\001\002\000\034\002\ufff9\006\ufff9\017\ufff9\020\ufff9\052" +
    "\ufff9\053\ufff9\065\ufff9\067\ufff9\071\ufff9\072\ufff9\074\ufff9" +
    "\075\ufff9\076\ufff9\001\002\000\034\002\ufff7\006\ufff7\017" +
    "\ufff7\020\ufff7\052\ufff7\053\ufff7\065\ufff7\067\ufff7\071\ufff7" +
    "\072\ufff7\074\ufff7\075\ufff7\076\ufff7\001\002\000\004\002" +
    "\000\001\002\000\032\002\uffff\006\021\017\026\020\040" +
    "\053\016\065\017\067\020\071\035\072\012\074\027\075" +
    "\010\076\013\001\002\000\004\050\u01a8\001\002\000\034" +
    "\002\ufff8\006\ufff8\017\ufff8\020\ufff8\052\ufff8\053\ufff8\065" +
    "\ufff8\067\ufff8\071\ufff8\072\ufff8\074\ufff8\075\ufff8\076\ufff8" +
    "\001\002\000\004\027\u01a2\001\002\000\042\004\076\005" +
    "\060\006\067\007\103\010\065\011\101\021\107\022\050" +
    "\027\052\036\062\050\u01a0\054\074\055\056\056\106\057" +
    "\072\077\073\001\002\000\004\006\u0194\001\002\000\034" +
    "\002\ufffa\006\ufffa\017\ufffa\020\ufffa\052\ufffa\053\ufffa\065" +
    "\ufffa\067\ufffa\071\ufffa\072\ufffa\074\ufffa\075\ufffa\076\ufffa" +
    "\001\002\000\004\006\u015f\001\002\000\004\045\u0156\001" +
    "\002\000\004\027\u0150\001\002\000\012\027\u0147\031\u0148" +
    "\032\u0146\033\u0140\001\002\000\034\002\ufffb\006\ufffb\017" +
    "\ufffb\020\ufffb\052\ufffb\053\ufffb\065\ufffb\067\ufffb\071\ufffb" +
    "\072\ufffb\074\ufffb\075\ufffb\076\ufffb\001\002\000\034\002" +
    "\ufffd\006\ufffd\017\ufffd\020\ufffd\052\ufffd\053\ufffd\065\ufffd" +
    "\067\ufffd\071\ufffd\072\ufffd\074\ufffd\075\ufffd\076\ufffd\001" +
    "\002\000\004\002\u0145\001\002\000\034\002\ufff2\006\ufff2" +
    "\017\ufff2\020\ufff2\052\ufff2\053\ufff2\065\ufff2\067\ufff2\071" +
    "\ufff2\072\ufff2\074\ufff2\075\ufff2\076\ufff2\001\002\000\004" +
    "\006\uffde\001\002\000\004\050\u0144\001\002\000\034\002" +
    "\ufff5\006\ufff5\017\ufff5\020\ufff5\052\ufff5\053\ufff5\065\ufff5" +
    "\067\ufff5\071\ufff5\072\ufff5\074\ufff5\075\ufff5\076\ufff5\001" +
    "\002\000\034\002\ufff4\006\ufff4\017\ufff4\020\ufff4\052\ufff4" +
    "\053\ufff4\065\ufff4\067\ufff4\071\ufff4\072\ufff4\074\ufff4\075" +
    "\ufff4\076\ufff4\001\002\000\034\002\ufff1\006\ufff1\017\ufff1" +
    "\020\ufff1\052\ufff1\053\ufff1\065\ufff1\067\ufff1\071\ufff1\072" +
    "\ufff1\074\ufff1\075\ufff1\076\ufff1\001\002\000\034\002\ufffc" +
    "\006\ufffc\017\ufffc\020\ufffc\052\ufffc\053\ufffc\065\ufffc\067" +
    "\ufffc\071\ufffc\072\ufffc\074\ufffc\075\ufffc\076\ufffc\001\002" +
    "\000\034\002\ufff6\006\ufff6\017\ufff6\020\ufff6\052\ufff6\053" +
    "\ufff6\065\ufff6\067\ufff6\071\ufff6\072\ufff6\074\ufff6\075\ufff6" +
    "\076\ufff6\001\002\000\004\027\u0129\001\002\000\036\002" +
    "\uff40\006\uff40\017\uff40\020\uff40\052\uff40\053\uff40\065\uff40" +
    "\067\uff40\070\042\071\uff40\072\uff40\074\uff40\075\uff40\076" +
    "\uff40\001\002\000\034\002\ufff3\006\ufff3\017\ufff3\020\ufff3" +
    "\052\ufff3\053\ufff3\065\ufff3\067\ufff3\071\ufff3\072\ufff3\074" +
    "\ufff3\075\ufff3\076\ufff3\001\002\000\004\006\uffdd\001\002" +
    "\000\036\002\uff3d\006\uff3d\017\uff3d\020\uff3d\052\uff3d\053" +
    "\uff3d\065\uff3d\067\uff3d\070\042\071\uff3d\072\uff3d\074\uff3d" +
    "\075\uff3d\076\uff3d\001\002\000\006\051\045\067\046\001" +
    "\002\000\034\002\uff3f\006\uff3f\017\uff3f\020\uff3f\052\uff3f" +
    "\053\uff3f\065\uff3f\067\uff3f\071\uff3f\072\uff3f\074\uff3f\075" +
    "\uff3f\076\uff3f\001\002\000\036\002\uff41\006\uff41\017\uff41" +
    "\020\uff41\052\uff41\053\uff41\065\uff41\067\uff41\070\uff41\071" +
    "\uff41\072\uff41\074\uff41\075\uff41\076\uff41\001\002\000\032" +
    "\006\021\017\026\020\040\052\uff51\053\016\065\017\067" +
    "\020\071\035\072\012\074\027\075\010\076\013\001\002" +
    "\000\004\027\047\001\002\000\040\004\076\005\060\006" +
    "\067\007\103\010\065\011\101\021\107\022\050\027\052" +
    "\036\062\054\074\055\056\056\106\057\072\077\073\001" +
    "\002\000\030\004\076\005\060\006\115\007\103\021\107" +
    "\022\050\027\112\054\074\055\056\057\072\077\073\001" +
    "\002\000\012\030\uffd2\045\uff67\046\uffd2\050\uffd2\001\002" +
    "\000\040\004\076\005\060\006\115\007\103\010\065\011" +
    "\101\021\107\022\050\027\052\036\062\054\074\055\056" +
    "\056\106\057\072\077\073\001\002\000\014\030\uffd5\043" +
    "\254\044\253\046\uffd5\050\uffd5\001\002\000\016\030\uffd4" +
    "\043\246\044\245\045\uff69\046\uffd4\050\uffd4\001\002\000" +
    "\014\030\uff7e\034\uff7e\035\uff7e\046\uff7e\050\uff7e\001\002" +
    "\000\004\027\u0118\001\002\000\042\021\uffc4\022\uffc4\023" +
    "\uffc4\024\uffc4\025\uffc4\030\uffc4\034\uffc4\035\uffc4\037\uffc4" +
    "\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\046\uffc4\050" +
    "\uffc4\001\002\000\042\021\uffbf\022\uffbf\023\uffbf\024\uffbf" +
    "\025\uffbf\030\uffbf\034\uffbf\035\uffbf\037\uffbf\040\uffbf\041" +
    "\uffbf\042\uffbf\043\uffbf\044\uffbf\046\uffbf\050\uffbf\001\002" +
    "\000\042\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\030" +
    "\uffc3\034\uffc3\035\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3" +
    "\043\uffc3\044\uffc3\046\uffc3\050\uffc3\001\002\000\040\004" +
    "\076\005\060\006\115\007\103\010\065\011\101\021\107" +
    "\022\050\027\052\036\062\054\074\055\056\056\106\057" +
    "\072\077\073\001\002\000\042\021\uffc2\022\uffc2\023\uffc2" +
    "\024\uffc2\025\uffc2\030\uffc2\034\uffc2\035\uffc2\037\uffc2\040" +
    "\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\046\uffc2\050\uffc2" +
    "\001\002\000\004\030\u0111\001\002\000\020\030\uff95\034" +
    "\uff95\035\uff95\043\u0108\044\u0107\046\uff95\050\uff95\001\002" +
    "\000\012\030\uffd0\045\uff65\046\uffd0\050\uffd0\001\002\000" +
    "\046\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\027\135" +
    "\030\uffbe\031\u0106\032\u0105\037\uffbe\040\uffbe\041\uffbe\042" +
    "\uffbe\043\uffbe\044\uffbe\045\134\046\uffbe\050\uffbe\001\002" +
    "\000\014\030\uffd6\034\237\035\241\046\uffd6\050\uffd6\001" +
    "\002\000\012\030\uffcf\045\uff64\046\uffcf\050\uffcf\001\002" +
    "\000\004\027\376\001\002\000\004\045\320\001\002\000" +
    "\004\027\311\001\002\000\010\030\uffce\046\uffce\050\uffce" +
    "\001\002\000\042\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025" +
    "\uffc0\030\uffc0\034\uffc0\035\uffc0\037\uffc0\040\uffc0\041\uffc0" +
    "\042\uffc0\043\uffc0\044\uffc0\046\uffc0\050\uffc0\001\002\000" +
    "\042\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\030\uffc1" +
    "\034\uffc1\035\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043" +
    "\uffc1\044\uffc1\046\uffc1\050\uffc1\001\002\000\010\030\uffcd" +
    "\046\uffcd\050\uffcd\001\002\000\020\030\uff94\034\uff94\035" +
    "\uff94\043\300\044\277\046\uff94\050\uff94\001\002\000\036" +
    "\021\124\022\126\023\122\024\123\025\125\030\uffd7\037" +
    "\220\040\222\041\215\042\216\043\214\044\221\046\uffd7" +
    "\050\uffd7\001\002\000\044\021\uffbd\022\uffbd\023\uffbd\024" +
    "\uffbd\025\uffbd\030\uffbd\034\uffbd\035\uffbd\037\uffbd\040\uffbd" +
    "\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\173\046\uffbd\050" +
    "\uffbd\001\002\000\012\030\uffd1\045\uff66\046\uffd1\050\uffd1" +
    "\001\002\000\004\045\263\001\002\000\004\027\165\001" +
    "\002\000\030\004\076\005\060\006\115\007\103\021\107" +
    "\022\050\027\112\054\074\055\056\057\072\077\073\001" +
    "\002\000\012\030\uffd3\045\uff68\046\uffd3\050\uffd3\001\002" +
    "\000\004\045\uff67\001\002\000\030\004\076\005\060\006" +
    "\115\007\103\021\107\022\050\027\112\054\074\055\056" +
    "\057\072\077\073\001\002\000\004\045\uff69\001\002\000" +
    "\004\045\uff65\001\002\000\046\021\uffbe\022\uffbe\023\uffbe" +
    "\024\uffbe\025\uffbe\027\135\030\uffbe\034\uffbe\035\uffbe\037" +
    "\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\045\134" +
    "\046\uffbe\050\uffbe\001\002\000\004\045\uff64\001\002\000" +
    "\042\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\030\uffcb" +
    "\034\uffcb\035\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043" +
    "\uffcb\044\uffcb\046\uffcb\050\uffcb\001\002\000\004\045\uff66" +
    "\001\002\000\004\045\uff68\001\002\000\030\004\076\005" +
    "\060\006\115\007\103\021\107\022\050\027\112\054\074" +
    "\055\056\057\072\077\073\001\002\000\030\004\076\005" +
    "\060\006\115\007\103\021\107\022\050\027\112\054\074" +
    "\055\056\057\072\077\073\001\002\000\030\004\076\005" +
    "\060\006\115\007\103\021\107\022\050\027\112\054\074" +
    "\055\056\057\072\077\073\001\002\000\030\004\076\005" +
    "\060\006\115\007\103\021\107\022\050\027\112\054\074" +
    "\055\056\057\072\077\073\001\002\000\030\004\076\005" +
    "\060\006\115\007\103\021\107\022\050\027\112\054\074" +
    "\055\056\057\072\077\073\001\002\000\042\021\uffc9\022" +
    "\uffc9\023\122\024\uffc9\025\125\030\uffc9\034\uffc9\035\uffc9" +
    "\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\046" +
    "\uffc9\050\uffc9\001\002\000\042\021\uffc7\022\uffc7\023\uffc7" +
    "\024\uffc7\025\uffc7\030\uffc7\034\uffc7\035\uffc7\037\uffc7\040" +
    "\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\046\uffc7\050\uffc7" +
    "\001\002\000\042\021\uffca\022\uffca\023\122\024\uffca\025" +
    "\125\030\uffca\034\uffca\035\uffca\037\uffca\040\uffca\041\uffca" +
    "\042\uffca\043\uffca\044\uffca\046\uffca\050\uffca\001\002\000" +
    "\042\021\uffc6\022\uffc6\023\122\024\uffc6\025\125\030\uffc6" +
    "\034\uffc6\035\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043" +
    "\uffc6\044\uffc6\046\uffc6\050\uffc6\001\002\000\042\021\uffc8" +
    "\022\uffc8\023\uffc8\024\uffc8\025\uffc8\030\uffc8\034\uffc8\035" +
    "\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8" +
    "\046\uffc8\050\uffc8\001\002\000\014\060\146\061\150\062" +
    "\147\063\144\064\145\001\002\000\042\004\076\005\060" +
    "\006\067\007\103\010\065\011\101\021\107\022\050\027" +
    "\052\030\140\036\062\054\074\055\056\056\106\057\072" +
    "\077\073\001\002\000\006\030\142\046\141\001\002\000" +
    "\006\030\uff48\046\uff48\001\002\000\012\030\uff4b\045\uff4b" +
    "\046\uff4b\050\uff4b\001\002\000\040\004\076\005\060\006" +
    "\067\007\103\010\065\011\101\021\107\022\050\027\052" +
    "\036\062\054\074\055\056\056\106\057\072\077\073\001" +
    "\002\000\012\030\uff4a\045\uff4a\046\uff4a\050\uff4a\001\002" +
    "\000\006\030\uff49\046\uff49\001\002\000\004\027\161\001" +
    "\002\000\004\027\156\001\002\000\042\021\uff7c\022\uff7c" +
    "\023\uff7c\024\uff7c\025\uff7c\030\uff7c\034\uff7c\035\uff7c\037" +
    "\uff7c\040\uff7c\041\uff7c\042\uff7c\043\uff7c\044\uff7c\046\uff7c" +
    "\050\uff7c\001\002\000\004\027\154\001\002\000\004\027" +
    "\151\001\002\000\030\004\076\005\060\006\115\007\103" +
    "\021\107\022\050\027\112\054\074\055\056\057\072\077" +
    "\073\001\002\000\016\021\124\022\126\023\122\024\123" +
    "\025\125\030\153\001\002\000\012\030\uff6e\045\uff6e\046" +
    "\uff6e\050\uff6e\001\002\000\004\030\155\001\002\000\012" +
    "\030\uff63\045\uff63\046\uff63\050\uff63\001\002\000\040\004" +
    "\076\005\060\006\067\007\103\010\065\011\101\021\107" +
    "\022\050\027\052\036\062\054\074\055\056\056\106\057" +
    "\072\077\073\001\002\000\004\030\160\001\002\000\012" +
    "\030\uff6a\045\uff6a\046\uff6a\050\uff6a\001\002\000\004\030" +
    "\162\001\002\000\012\030\uff60\045\uff60\046\uff60\050\uff60" +
    "\001\002\000\016\021\124\022\126\023\122\024\123\025" +
    "\125\030\164\001\002\000\042\021\uffc5\022\uffc5\023\uffc5" +
    "\024\uffc5\025\uffc5\030\uffc5\034\uffc5\035\uffc5\037\uffc5\040" +
    "\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\046\uffc5\050\uffc5" +
    "\001\002\000\040\004\076\005\060\006\115\007\172\010" +
    "\065\011\101\021\107\022\050\027\052\036\062\054\074" +
    "\055\056\056\106\057\072\077\073\001\002\000\006\043" +
    "\254\044\253\001\002\000\010\043\246\044\245\045\uff69" +
    "\001\002\000\010\030\240\034\237\035\241\001\002\000" +
    "\032\021\124\022\126\023\122\024\123\025\125\030\217" +
    "\037\220\040\222\041\215\042\216\043\214\044\221\001" +
    "\002\000\034\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd" +
    "\030\174\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044" +
    "\uffbd\045\173\001\002\000\014\060\176\061\201\062\200" +
    "\063\175\064\177\001\002\000\020\030\uff72\034\uff72\035" +
    "\uff72\043\uff72\044\uff72\046\uff72\050\uff72\001\002\000\004" +
    "\027\212\001\002\000\042\021\uff7d\022\uff7d\023\uff7d\024" +
    "\uff7d\025\uff7d\030\uff7d\034\uff7d\035\uff7d\037\uff7d\040\uff7d" +
    "\041\uff7d\042\uff7d\043\uff7d\044\uff7d\046\uff7d\050\uff7d\001" +
    "\002\000\004\027\207\001\002\000\004\027\205\001\002" +
    "\000\004\027\202\001\002\000\030\004\076\005\060\006" +
    "\115\007\103\021\107\022\050\027\112\054\074\055\056" +
    "\057\072\077\073\001\002\000\016\021\124\022\126\023" +
    "\122\024\123\025\125\030\204\001\002\000\012\030\uff6d" +
    "\045\uff6d\046\uff6d\050\uff6d\001\002\000\004\030\206\001" +
    "\002\000\012\030\uff62\045\uff62\046\uff62\050\uff62\001\002" +
    "\000\040\004\076\005\060\006\067\007\103\010\065\011" +
    "\101\021\107\022\050\027\052\036\062\054\074\055\056" +
    "\056\106\057\072\077\073\001\002\000\004\030\211\001" +
    "\002\000\012\030\uff6b\045\uff6b\046\uff6b\050\uff6b\001\002" +
    "\000\004\030\213\001\002\000\012\030\uff5f\045\uff5f\046" +
    "\uff5f\050\uff5f\001\002\000\034\004\076\005\060\006\115" +
    "\007\103\010\234\011\235\021\107\022\050\027\112\054" +
    "\074\055\056\057\072\077\073\001\002\000\030\004\076" +
    "\005\060\006\115\007\103\021\107\022\050\027\112\054" +
    "\074\055\056\057\072\077\073\001\002\000\030\004\076" +
    "\005\060\006\115\007\103\021\107\022\050\027\112\054" +
    "\074\055\056\057\072\077\073\001\002\000\020\030\uff74" +
    "\034\uff74\035\uff74\043\uff74\044\uff74\046\uff74\050\uff74\001" +
    "\002\000\030\004\076\005\060\006\115\007\103\021\107" +
    "\022\050\027\112\054\074\055\056\057\072\077\073\001" +
    "\002\000\034\004\076\005\060\006\115\007\103\010\225" +
    "\011\226\021\107\022\050\027\112\054\074\055\056\057" +
    "\072\077\073\001\002\000\030\004\076\005\060\006\115" +
    "\007\103\021\107\022\050\027\112\054\074\055\056\057" +
    "\072\077\073\001\002\000\026\021\124\022\126\023\122" +
    "\024\123\025\125\030\uffa8\034\uffa8\035\uffa8\046\uffa8\050" +
    "\uffa8\001\002\000\016\030\uff84\034\uff84\035\uff84\045\uff69" +
    "\046\uff84\050\uff84\001\002\000\014\030\uff99\034\uff99\035" +
    "\uff99\046\uff99\050\uff99\001\002\000\014\030\uff97\034\uff97" +
    "\035\uff97\046\uff97\050\uff97\001\002\000\026\021\124\022" +
    "\126\023\122\024\123\025\125\030\uffa6\034\uffa6\035\uffa6" +
    "\046\uffa6\050\uffa6\001\002\000\026\021\124\022\126\023" +
    "\122\024\123\025\125\030\uffa9\034\uffa9\035\uffa9\046\uffa9" +
    "\050\uffa9\001\002\000\026\021\124\022\126\023\122\024" +
    "\123\025\125\030\uffaa\034\uffaa\035\uffaa\046\uffaa\050\uffaa" +
    "\001\002\000\026\021\124\022\126\023\122\024\123\025" +
    "\125\030\uffab\034\uffab\035\uffab\046\uffab\050\uffab\001\002" +
    "\000\016\030\uff85\034\uff85\035\uff85\045\uff69\046\uff85\050" +
    "\uff85\001\002\000\014\030\uffa1\034\uffa1\035\uffa1\046\uffa1" +
    "\050\uffa1\001\002\000\014\030\uff9f\034\uff9f\035\uff9f\046" +
    "\uff9f\050\uff9f\001\002\000\026\021\124\022\126\023\122" +
    "\024\123\025\125\030\uffa7\034\uffa7\035\uffa7\046\uffa7\050" +
    "\uffa7\001\002\000\040\004\076\005\060\006\115\007\103" +
    "\010\065\011\101\021\107\022\050\027\052\036\062\054" +
    "\074\055\056\056\106\057\072\077\073\001\002\000\020" +
    "\030\uff73\034\uff73\035\uff73\043\uff73\044\uff73\046\uff73\050" +
    "\uff73\001\002\000\040\004\076\005\060\006\115\007\103" +
    "\010\065\011\101\021\107\022\050\027\052\036\062\054" +
    "\074\055\056\056\106\057\072\077\073\001\002\000\014" +
    "\030\uff81\034\uff81\035\uff81\046\uff81\050\uff81\001\002\000" +
    "\030\021\124\022\126\023\122\024\123\025\125\037\220" +
    "\040\222\041\215\042\216\043\214\044\221\001\002\000" +
    "\014\030\uff82\034\uff82\035\241\046\uff82\050\uff82\001\002" +
    "\000\030\004\076\005\060\006\115\007\103\021\107\022" +
    "\050\027\112\054\074\055\056\057\072\077\073\001\002" +
    "\000\030\004\076\005\060\006\115\007\103\021\107\022" +
    "\050\027\112\054\074\055\056\057\072\077\073\001\002" +
    "\000\016\030\uff89\034\uff89\035\uff89\045\uff69\046\uff89\050" +
    "\uff89\001\002\000\026\021\124\022\126\023\122\024\123" +
    "\025\125\030\uff87\034\uff87\035\uff87\046\uff87\050\uff87\001" +
    "\002\000\016\030\uff88\034\uff88\035\uff88\045\uff69\046\uff88" +
    "\050\uff88\001\002\000\026\021\124\022\126\023\122\024" +
    "\123\025\125\030\uff86\034\uff86\035\uff86\046\uff86\050\uff86" +
    "\001\002\000\010\010\261\011\262\056\106\001\002\000" +
    "\010\010\256\011\257\056\106\001\002\000\014\030\uff8b" +
    "\034\uff8b\035\uff8b\046\uff8b\050\uff8b\001\002\000\014\030" +
    "\uff93\034\uff93\035\uff93\046\uff93\050\uff93\001\002\000\014" +
    "\030\uff92\034\uff92\035\uff92\046\uff92\050\uff92\001\002\000" +
    "\014\030\uff8a\034\uff8a\035\uff8a\046\uff8a\050\uff8a\001\002" +
    "\000\014\030\uff8f\034\uff8f\035\uff8f\046\uff8f\050\uff8f\001" +
    "\002\000\014\030\uff8e\034\uff8e\035\uff8e\046\uff8e\050\uff8e" +
    "\001\002\000\012\060\266\062\267\063\264\064\265\001" +
    "\002\000\004\027\275\001\002\000\004\027\272\001\002" +
    "\000\042\021\uff7b\022\uff7b\023\uff7b\024\uff7b\025\uff7b\030" +
    "\uff7b\034\uff7b\035\uff7b\037\uff7b\040\uff7b\041\uff7b\042\uff7b" +
    "\043\uff7b\044\uff7b\046\uff7b\050\uff7b\001\002\000\004\027" +
    "\270\001\002\000\004\030\271\001\002\000\012\030\uff61" +
    "\045\uff61\046\uff61\050\uff61\001\002\000\040\004\076\005" +
    "\060\006\067\007\103\010\065\011\101\021\107\022\050" +
    "\027\052\036\062\054\074\055\056\056\106\057\072\077" +
    "\073\001\002\000\004\030\274\001\002\000\012\030\uff6c" +
    "\045\uff6c\046\uff6c\050\uff6c\001\002\000\004\030\276\001" +
    "\002\000\012\030\uff5e\045\uff5e\046\uff5e\050\uff5e\001\002" +
    "\000\036\004\076\005\060\006\115\007\103\010\306\011" +
    "\307\021\107\022\050\027\112\054\074\055\056\056\106" +
    "\057\072\077\073\001\002\000\036\004\076\005\060\006" +
    "\115\007\103\010\302\011\303\021\107\022\050\027\112" +
    "\054\074\055\056\056\106\057\072\077\073\001\002\000" +
    "\014\030\uff90\034\uff90\035\uff90\046\uff90\050\uff90\001\002" +
    "\000\014\030\uffa3\034\uffa3\035\uffa3\046\uffa3\050\uffa3\001" +
    "\002\000\014\030\uffa2\034\uffa2\035\uffa2\046\uffa2\050\uffa2" +
    "\001\002\000\026\021\124\022\126\023\122\024\123\025" +
    "\125\030\uff9e\034\uff9e\035\uff9e\046\uff9e\050\uff9e\001\002" +
    "\000\014\030\uff8c\034\uff8c\035\uff8c\046\uff8c\050\uff8c\001" +
    "\002\000\014\030\uff9b\034\uff9b\035\uff9b\046\uff9b\050\uff9b" +
    "\001\002\000\014\030\uff9a\034\uff9a\035\uff9a\046\uff9a\050" +
    "\uff9a\001\002\000\026\021\124\022\126\023\122\024\123" +
    "\025\125\030\uff96\034\uff96\035\uff96\046\uff96\050\uff96\001" +
    "\002\000\040\004\076\005\060\006\115\007\314\010\065" +
    "\011\101\021\107\022\050\027\052\036\062\054\074\055" +
    "\056\056\106\057\072\077\073\001\002\000\010\030\317" +
    "\034\237\035\241\001\002\000\032\021\124\022\126\023" +
    "\122\024\123\025\125\030\316\037\220\040\222\041\215" +
    "\042\216\043\214\044\221\001\002\000\034\021\uffbd\022" +
    "\uffbd\023\uffbd\024\uffbd\025\uffbd\030\315\037\uffbd\040\uffbd" +
    "\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\173\001\002\000" +
    "\042\021\uff78\022\uff78\023\uff78\024\uff78\025\uff78\030\uff78" +
    "\034\uff78\035\uff78\037\uff78\040\uff78\041\uff78\042\uff78\043" +
    "\uff78\044\uff78\046\uff78\050\uff78\001\002\000\042\021\uff7a" +
    "\022\uff7a\023\uff7a\024\uff7a\025\uff7a\030\uff7a\034\uff7a\035" +
    "\uff7a\037\uff7a\040\uff7a\041\uff7a\042\uff7a\043\uff7a\044\uff7a" +
    "\046\uff7a\050\uff7a\001\002\000\042\021\uff79\022\uff79\023" +
    "\uff79\024\uff79\025\uff79\030\uff79\034\uff79\035\uff79\037\uff79" +
    "\040\uff79\041\uff79\042\uff79\043\uff79\044\uff79\046\uff79\050" +
    "\uff79\001\002\000\034\100\335\101\334\102\321\103\330" +
    "\104\332\105\327\106\325\107\326\110\333\111\324\112" +
    "\322\113\331\114\323\001\002\000\042\021\uffb0\022\uffb0" +
    "\023\uffb0\024\uffb0\025\uffb0\030\uffb0\034\uffb0\035\uffb0\037" +
    "\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\046\uffb0" +
    "\050\uffb0\001\002\000\004\027\371\001\002\000\004\027" +
    "\366\001\002\000\004\027\363\001\002\000\004\027\360" +
    "\001\002\000\004\027\355\001\002\000\004\027\352\001" +
    "\002\000\004\027\347\001\002\000\004\027\344\001\002" +
    "\000\004\027\341\001\002\000\004\027\336\001\002\000" +
    "\042\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\030\uffb1" +
    "\034\uffb1\035\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043" +
    "\uffb1\044\uffb1\046\uffb1\050\uffb1\001\002\000\042\021\uffb2" +
    "\022\uffb2\023\uffb2\024\uffb2\025\uffb2\030\uffb2\034\uffb2\035" +
    "\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2" +
    "\046\uffb2\050\uffb2\001\002\000\030\004\076\005\060\006" +
    "\115\007\103\021\107\022\050\027\112\054\074\055\056" +
    "\057\072\077\073\001\002\000\016\021\124\022\126\023" +
    "\122\024\123\025\125\030\340\001\002\000\042\021\uffb7" +
    "\022\uffb7\023\uffb7\024\uffb7\025\uffb7\030\uffb7\034\uffb7\035" +
    "\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7" +
    "\046\uffb7\050\uffb7\001\002\000\030\004\076\005\060\006" +
    "\115\007\103\021\107\022\050\027\112\054\074\055\056" +
    "\057\072\077\073\001\002\000\016\021\124\022\126\023" +
    "\122\024\123\025\125\030\343\001\002\000\042\021\uffbb" +
    "\022\uffbb\023\uffbb\024\uffbb\025\uffbb\030\uffbb\034\uffbb\035" +
    "\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb" +
    "\046\uffbb\050\uffbb\001\002\000\030\004\076\005\060\006" +
    "\115\007\103\021\107\022\050\027\112\054\074\055\056" +
    "\057\072\077\073\001\002\000\016\021\124\022\126\023" +
    "\122\024\123\025\125\030\346\001\002\000\042\021\uffb4" +
    "\022\uffb4\023\uffb4\024\uffb4\025\uffb4\030\uffb4\034\uffb4\035" +
    "\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4" +
    "\046\uffb4\050\uffb4\001\002\000\030\004\076\005\060\006" +
    "\115\007\103\021\107\022\050\027\112\054\074\055\056" +
    "\057\072\077\073\001\002\000\016\021\124\022\126\023" +
    "\122\024\123\025\125\030\351\001\002\000\042\021\uffbc" +
    "\022\uffbc\023\uffbc\024\uffbc\025\uffbc\030\uffbc\034\uffbc\035" +
    "\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc" +
    "\046\uffbc\050\uffbc\001\002\000\030\004\076\005\060\006" +
    "\115\007\103\021\107\022\050\027\112\054\074\055\056" +
    "\057\072\077\073\001\002\000\016\021\124\022\126\023" +
    "\122\024\123\025\125\030\354\001\002\000\042\021\uffba" +
    "\022\uffba\023\uffba\024\uffba\025\uffba\030\uffba\034\uffba\035" +
    "\uffba\037\uffba\040\uffba\041\uffba\042\uffba\043\uffba\044\uffba" +
    "\046\uffba\050\uffba\001\002\000\030\004\076\005\060\006" +
    "\115\007\103\021\107\022\050\027\112\054\074\055\056" +
    "\057\072\077\073\001\002\000\016\021\124\022\126\023" +
    "\122\024\123\025\125\030\357\001\002\000\042\021\uffb8" +
    "\022\uffb8\023\uffb8\024\uffb8\025\uffb8\030\uffb8\034\uffb8\035" +
    "\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8" +
    "\046\uffb8\050\uffb8\001\002\000\030\004\076\005\060\006" +
    "\115\007\103\021\107\022\050\027\112\054\074\055\056" +
    "\057\072\077\073\001\002\000\016\021\124\022\126\023" +
    "\122\024\123\025\125\030\362\001\002\000\042\021\uffb9" +
    "\022\uffb9\023\uffb9\024\uffb9\025\uffb9\030\uffb9\034\uffb9\035" +
    "\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9" +
    "\046\uffb9\050\uffb9\001\002\000\030\004\076\005\060\006" +
    "\115\007\103\021\107\022\050\027\112\054\074\055\056" +
    "\057\072\077\073\001\002\000\016\021\124\022\126\023" +
    "\122\024\123\025\125\030\365\001\002\000\042\021\uffb6" +
    "\022\uffb6\023\uffb6\024\uffb6\025\uffb6\030\uffb6\034\uffb6\035" +
    "\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6" +
    "\046\uffb6\050\uffb6\001\002\000\030\004\076\005\060\006" +
    "\115\007\103\021\107\022\050\027\112\054\074\055\056" +
    "\057\072\077\073\001\002\000\016\021\124\022\126\023" +
    "\122\024\123\025\125\030\370\001\002\000\042\021\uffb3" +
    "\022\uffb3\023\uffb3\024\uffb3\025\uffb3\030\uffb3\034\uffb3\035" +
    "\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3" +
    "\046\uffb3\050\uffb3\001\002\000\030\004\076\005\060\006" +
    "\115\007\103\021\107\022\050\027\112\054\074\055\056" +
    "\057\072\077\073\001\002\000\016\021\124\022\126\023" +
    "\122\024\123\025\125\046\373\001\002\000\030\004\076" +
    "\005\060\006\115\007\103\021\107\022\050\027\112\054" +
    "\074\055\056\057\072\077\073\001\002\000\016\021\124" +
    "\022\126\023\122\024\123\025\125\030\375\001\002\000" +
    "\042\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\030\uffb5" +
    "\034\uffb5\035\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043" +
    "\uffb5\044\uffb5\046\uffb5\050\uffb5\001\002\000\040\004\076" +
    "\005\060\006\115\007\u0101\010\065\011\101\021\107\022" +
    "\050\027\052\036\062\054\074\055\056\056\106\057\072" +
    "\077\073\001\002\000\010\030\u0104\034\237\035\241\001" +
    "\002\000\032\021\124\022\126\023\122\024\123\025\125" +
    "\030\u0103\037\220\040\222\041\215\042\216\043\214\044" +
    "\221\001\002\000\034\021\uffbd\022\uffbd\023\uffbd\024\uffbd" +
    "\025\uffbd\030\u0102\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043" +
    "\uffbd\044\uffbd\045\173\001\002\000\022\030\uff6f\034\uff6f" +
    "\035\uff6f\043\uff6f\044\uff6f\045\uff6f\046\uff6f\050\uff6f\001" +
    "\002\000\022\030\uff71\034\uff71\035\uff71\043\uff71\044\uff71" +
    "\045\uff71\046\uff71\050\uff71\001\002\000\022\030\uff70\034" +
    "\uff70\035\uff70\043\uff70\044\uff70\045\uff70\046\uff70\050\uff70" +
    "\001\002\000\010\030\uffae\046\uffae\050\uffae\001\002\000" +
    "\010\030\uffaf\046\uffaf\050\uffaf\001\002\000\036\004\076" +
    "\005\060\006\115\007\103\010\u010e\011\u010f\021\107\022" +
    "\050\027\112\054\074\055\056\056\106\057\072\077\073" +
    "\001\002\000\036\004\076\005\060\006\115\007\103\010" +
    "\u010a\011\u010b\021\107\022\050\027\112\054\074\055\056" +
    "\056\106\057\072\077\073\001\002\000\014\030\uff91\034" +
    "\uff91\035\uff91\046\uff91\050\uff91\001\002\000\014\030\uffa5" +
    "\034\uffa5\035\uffa5\046\uffa5\050\uffa5\001\002\000\014\030" +
    "\uffa4\034\uffa4\035\uffa4\046\uffa4\050\uffa4\001\002\000\026" +
    "\021\124\022\126\023\122\024\123\025\125\030\uffa0\034" +
    "\uffa0\035\uffa0\046\uffa0\050\uffa0\001\002\000\014\030\uff8d" +
    "\034\uff8d\035\uff8d\046\uff8d\050\uff8d\001\002\000\014\030" +
    "\uff9d\034\uff9d\035\uff9d\046\uff9d\050\uff9d\001\002\000\014" +
    "\030\uff9c\034\uff9c\035\uff9c\046\uff9c\050\uff9c\001\002\000" +
    "\026\021\124\022\126\023\122\024\123\025\125\030\uff98" +
    "\034\uff98\035\uff98\046\uff98\050\uff98\001\002\000\004\051" +
    "\u0112\001\002\000\032\006\021\017\026\020\040\052\uff51" +
    "\053\016\065\017\067\020\071\035\072\012\074\027\075" +
    "\010\076\013\001\002\000\032\006\021\017\026\020\040" +
    "\052\uff52\053\016\065\017\067\020\071\035\072\012\074" +
    "\027\075\010\076\013\001\002\000\004\052\u0115\001\002" +
    "\000\036\002\uff43\006\uff43\017\uff43\020\uff43\052\uff43\053" +
    "\uff43\065\uff43\067\uff43\070\uff43\071\uff43\072\uff43\074\uff43" +
    "\075\uff43\076\uff43\001\002\000\034\002\ufffe\006\ufffe\017" +
    "\ufffe\020\ufffe\052\ufffe\053\ufffe\065\ufffe\067\ufffe\071\ufffe" +
    "\072\ufffe\074\ufffe\075\ufffe\076\ufffe\001\002\000\014\030" +
    "\uff80\034\uff80\035\uff80\046\uff80\050\uff80\001\002\000\040" +
    "\004\076\005\060\006\115\007\u011b\010\065\011\101\021" +
    "\107\022\050\027\052\036\062\054\074\055\056\056\106" +
    "\057\072\077\073\001\002\000\010\030\u011e\034\237\035" +
    "\241\001\002\000\032\021\124\022\126\023\122\024\123" +
    "\025\125\030\u011d\037\220\040\222\041\215\042\216\043" +
    "\214\044\221\001\002\000\034\021\uffbd\022\uffbd\023\uffbd" +
    "\024\uffbd\025\uffbd\030\u011c\037\uffbd\040\uffbd\041\uffbd\042" +
    "\uffbd\043\uffbd\044\uffbd\045\173\001\002\000\042\021\uff75" +
    "\022\uff75\023\uff75\024\uff75\025\uff75\030\uff75\034\uff75\035" +
    "\uff75\037\uff75\040\uff75\041\uff75\042\uff75\043\uff75\044\uff75" +
    "\046\uff75\050\uff75\001\002\000\042\021\uff77\022\uff77\023" +
    "\uff77\024\uff77\025\uff77\030\uff77\034\uff77\035\uff77\037\uff77" +
    "\040\uff77\041\uff77\042\uff77\043\uff77\044\uff77\046\uff77\050" +
    "\uff77\001\002\000\042\021\uff76\022\uff76\023\uff76\024\uff76" +
    "\025\uff76\030\uff76\034\uff76\035\uff76\037\uff76\040\uff76\041" +
    "\uff76\042\uff76\043\uff76\044\uff76\046\uff76\050\uff76\001\002" +
    "\000\010\030\u0123\034\uff7e\035\uff7e\001\002\000\010\030" +
    "\u0122\034\237\035\241\001\002\000\032\021\124\022\126" +
    "\023\122\024\123\025\125\030\164\037\220\040\222\041" +
    "\215\042\216\043\214\044\221\001\002\000\014\030\uff7f" +
    "\034\uff7f\035\uff7f\046\uff7f\050\uff7f\001\002\000\014\030" +
    "\uff83\034\uff83\035\uff83\046\uff83\050\uff83\001\002\000\042" +
    "\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\030\uffcc\034" +
    "\uffcc\035\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc" +
    "\044\uffcc\046\uffcc\050\uffcc\001\002\000\004\052\u0126\001" +
    "\002\000\034\002\uff44\006\uff44\017\uff44\020\uff44\052\uff44" +
    "\053\uff44\065\uff44\067\uff44\071\uff44\072\uff44\074\uff44\075" +
    "\uff44\076\uff44\001\002\000\034\002\uff3e\006\uff3e\017\uff3e" +
    "\020\uff3e\052\uff3e\053\uff3e\065\uff3e\067\uff3e\071\uff3e\072" +
    "\uff3e\074\uff3e\075\uff3e\076\uff3e\001\002\000\036\002\uff42" +
    "\006\uff42\017\uff42\020\uff42\052\uff42\053\uff42\065\uff42\067" +
    "\uff42\070\uff42\071\uff42\072\uff42\074\uff42\075\uff42\076\uff42" +
    "\001\002\000\010\006\u012a\017\026\020\040\001\002\000" +
    "\004\033\u0140\001\002\000\040\004\076\005\060\006\115" +
    "\007\103\010\065\011\101\021\107\022\050\027\052\036" +
    "\062\054\074\055\056\056\106\057\072\077\073\001\002" +
    "\000\040\004\076\005\060\006\115\007\103\010\065\011" +
    "\101\021\107\022\050\027\052\036\062\054\074\055\056" +
    "\056\106\057\072\077\073\001\002\000\010\034\237\035" +
    "\241\050\u012e\001\002\000\004\006\u0130\001\002\000\004" +
    "\030\u0135\001\002\000\010\031\u0133\032\u0131\033\u0132\001" +
    "\002\000\004\030\uff37\001\002\000\040\004\076\005\060" +
    "\006\067\007\103\010\065\011\101\021\107\022\050\027" +
    "\052\036\062\054\074\055\056\056\106\057\072\077\073" +
    "\001\002\000\004\030\uff38\001\002\000\004\030\uff36\001" +
    "\002\000\004\051\u0136\001\002\000\032\006\021\017\026" +
    "\020\040\052\uff51\053\016\065\017\067\020\071\035\072" +
    "\012\074\027\075\010\076\013\001\002\000\004\052\u0138" +
    "\001\002\000\034\002\uff39\006\uff39\017\uff39\020\uff39\052" +
    "\uff39\053\uff39\065\uff39\067\uff39\071\uff39\072\uff39\074\uff39" +
    "\075\uff39\076\uff39\001\002\000\010\034\237\035\241\050" +
    "\u013a\001\002\000\004\006\u0130\001\002\000\004\030\u013c" +
    "\001\002\000\004\051\u013d\001\002\000\032\006\021\017" +
    "\026\020\040\052\uff51\053\016\065\017\067\020\071\035" +
    "\072\012\074\027\075\010\076\013\001\002\000\004\052" +
    "\u013f\001\002\000\034\002\uff3a\006\uff3a\017\uff3a\020\uff3a" +
    "\052\uff3a\053\uff3a\065\uff3a\067\uff3a\071\uff3a\072\uff3a\074" +
    "\uff3a\075\uff3a\076\uff3a\001\002\000\040\004\076\005\060" +
    "\006\067\007\103\010\065\011\101\021\107\022\050\027" +
    "\052\036\062\054\074\055\056\056\106\057\072\077\073" +
    "\001\002\000\006\046\uffd8\050\uffd8\001\002\000\004\050" +
    "\u0143\001\002\000\070\002\uffe5\004\uffe5\005\uffe5\006\uffe5" +
    "\007\uffe5\010\uffe5\011\uffe5\017\uffe5\020\uffe5\021\uffe5\022" +
    "\uffe5\027\uffe5\036\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5" +
    "\056\uffe5\057\uffe5\065\uffe5\067\uffe5\071\uffe5\072\uffe5\074" +
    "\uffe5\075\uffe5\076\uffe5\077\uffe5\001\002\000\034\002\uff3c" +
    "\006\uff3c\017\uff3c\020\uff3c\052\uff3c\053\uff3c\065\uff3c\067" +
    "\uff3c\071\uff3c\072\uff3c\074\uff3c\075\uff3c\076\uff3c\001\002" +
    "\000\004\002\001\001\002\000\004\050\u014f\001\002\000" +
    "\042\004\076\005\060\006\067\007\103\010\065\011\101" +
    "\021\107\022\050\027\052\030\u014b\036\062\054\074\055" +
    "\056\056\106\057\072\077\073\001\002\000\004\050\u0149" +
    "\001\002\000\034\002\uffad\006\uffad\017\uffad\020\uffad\052" +
    "\uffad\053\uffad\065\uffad\067\uffad\071\uffad\072\uffad\074\uffad" +
    "\075\uffad\076\uffad\001\002\000\004\030\u014d\001\002\000" +
    "\004\050\u014c\001\002\000\034\002\uff47\006\uff47\017\uff47" +
    "\020\uff47\052\uff47\053\uff47\065\uff47\067\uff47\071\uff47\072" +
    "\uff47\074\uff47\075\uff47\076\uff47\001\002\000\004\050\u014e" +
    "\001\002\000\034\002\uff46\006\uff46\017\uff46\020\uff46\052" +
    "\uff46\053\uff46\065\uff46\067\uff46\071\uff46\072\uff46\074\uff46" +
    "\075\uff46\076\uff46\001\002\000\034\002\uffac\006\uffac\017" +
    "\uffac\020\uffac\052\uffac\053\uffac\065\uffac\067\uffac\071\uffac" +
    "\072\uffac\074\uffac\075\uffac\076\uffac\001\002\000\040\004" +
    "\076\005\060\006\067\007\103\010\065\011\101\021\107" +
    "\022\050\027\052\036\062\054\074\055\056\056\106\057" +
    "\072\077\073\001\002\000\004\030\u0152\001\002\000\004" +
    "\051\u0153\001\002\000\032\006\021\017\026\020\040\052" +
    "\uff51\053\016\065\017\067\020\071\035\072\012\074\027" +
    "\075\010\076\013\001\002\000\004\052\u0155\001\002\000" +
    "\036\002\uff45\006\uff45\017\uff45\020\uff45\052\uff45\053\uff45" +
    "\065\uff45\067\uff45\070\uff45\071\uff45\072\uff45\074\uff45\075" +
    "\uff45\076\uff45\001\002\000\004\066\u0157\001\002\000\004" +
    "\027\u0158\001\002\000\040\004\076\005\060\006\067\007" +
    "\103\010\065\011\101\021\107\022\050\027\052\036\062" +
    "\054\074\055\056\056\106\057\072\077\073\001\002\000" +
    "\006\030\uff5b\046\uff5b\001\002\000\006\030\u015c\046\u015b" +
    "\001\002\000\040\004\076\005\060\006\067\007\103\010" +
    "\065\011\101\021\107\022\050\027\052\036\062\054\074" +
    "\055\056\056\106\057\072\077\073\001\002\000\004\050" +
    "\u015d\001\002\000\034\002\uff5d\006\uff5d\017\uff5d\020\uff5d" +
    "\052\uff5d\053\uff5d\065\uff5d\067\uff5d\071\uff5d\072\uff5d\074" +
    "\uff5d\075\uff5d\076\uff5d\001\002\000\006\030\uff5c\046\uff5c" +
    "\001\002\000\004\027\u0160\001\002\000\006\006\u0161\030" +
    "\u0164\001\002\000\004\047\u0191\001\002\000\006\030\uff4f" +
    "\046\uff4f\001\002\000\006\030\u0183\046\u0182\001\002\000" +
    "\006\047\u0166\051\u0165\001\002\000\032\006\021\017\026" +
    "\020\040\052\uff51\053\016\065\017\067\020\071\035\072" +
    "\012\074\027\075\010\076\013\001\002\000\014\012\u0168" +
    "\013\u016a\014\u0167\015\u016c\016\u016b\001\002\000\014\030" +
    "\uffda\033\uffda\046\uffda\050\uffda\051\uffda\001\002\000\014" +
    "\030\uffdc\033\uffdc\046\uffdc\050\uffdc\051\uffdc\001\002\000" +
    "\004\051\u017d\001\002\000\014\030\uffdb\033\uffdb\046\uffdb" +
    "\050\uffdb\051\uffdb\001\002\000\004\051\u016d\001\002\000" +
    "\014\030\uffd9\033\uffd9\046\uffd9\050\uffd9\051\uffd9\001\002" +
    "\000\026\006\021\017\026\020\040\053\016\065\017\067" +
    "\020\071\035\072\012\074\027\075\010\001\002\000\030" +
    "\006\uffed\017\uffed\020\uffed\052\uffed\053\uffed\065\uffed\067" +
    "\uffed\071\uffed\072\uffed\074\uffed\075\uffed\001\002\000\030" +
    "\006\uffeb\017\uffeb\020\uffeb\052\uffeb\053\uffeb\065\uffeb\067" +
    "\uffeb\071\uffeb\072\uffeb\074\uffeb\075\uffeb\001\002\000\030" +
    "\006\uffec\017\uffec\020\uffec\052\uffec\053\uffec\065\uffec\067" +
    "\uffec\071\uffec\072\uffec\074\uffec\075\uffec\001\002\000\030" +
    "\006\021\017\026\020\040\052\u017b\053\016\065\017\067" +
    "\020\071\035\072\012\074\027\075\010\001\002\000\030" +
    "\006\uffee\017\uffee\020\uffee\052\uffee\053\uffee\065\uffee\067" +
    "\uffee\071\uffee\072\uffee\074\uffee\075\uffee\001\002\000\030" +
    "\006\uffef\017\uffef\020\uffef\052\uffef\053\uffef\065\uffef\067" +
    "\uffef\071\uffef\072\uffef\074\uffef\075\uffef\001\002\000\030" +
    "\006\uffe7\017\uffe7\020\uffe7\052\uffe7\053\uffe7\065\uffe7\067" +
    "\uffe7\071\uffe7\072\uffe7\074\uffe7\075\uffe7\001\002\000\030" +
    "\006\uffea\017\uffea\020\uffea\052\uffea\053\uffea\065\uffea\067" +
    "\uffea\071\uffea\072\uffea\074\uffea\075\uffea\001\002\000\030" +
    "\006\uffe9\017\uffe9\020\uffe9\052\uffe9\053\uffe9\065\uffe9\067" +
    "\uffe9\071\uffe9\072\uffe9\074\uffe9\075\uffe9\001\002\000\030" +
    "\006\uffe6\017\uffe6\020\uffe6\052\uffe6\053\uffe6\065\uffe6\067" +
    "\uffe6\071\uffe6\072\uffe6\074\uffe6\075\uffe6\001\002\000\030" +
    "\006\ufff0\017\ufff0\020\ufff0\052\ufff0\053\ufff0\065\ufff0\067" +
    "\ufff0\071\ufff0\072\ufff0\074\ufff0\075\ufff0\001\002\000\030" +
    "\006\uff53\017\uff53\020\uff53\052\uff53\053\uff53\065\uff53\067" +
    "\uff53\071\uff53\072\uff53\074\uff53\075\uff53\001\002\000\030" +
    "\006\uffe8\017\uffe8\020\uffe8\052\uffe8\053\uffe8\065\uffe8\067" +
    "\uffe8\071\uffe8\072\uffe8\074\uffe8\075\uffe8\001\002\000\034" +
    "\002\uff5a\006\uff5a\017\uff5a\020\uff5a\052\uff5a\053\uff5a\065" +
    "\uff5a\067\uff5a\071\uff5a\072\uff5a\074\uff5a\075\uff5a\076\uff5a" +
    "\001\002\000\030\006\uff54\017\uff54\020\uff54\052\uff54\053" +
    "\uff54\065\uff54\067\uff54\071\uff54\072\uff54\074\uff54\075\uff54" +
    "\001\002\000\032\006\021\017\026\020\040\052\uff51\053" +
    "\016\065\017\067\020\071\035\072\012\074\027\075\010" +
    "\076\013\001\002\000\004\052\u017f\001\002\000\034\002" +
    "\uff56\006\uff56\017\uff56\020\uff56\052\uff56\053\uff56\065\uff56" +
    "\067\uff56\071\uff56\072\uff56\074\uff56\075\uff56\076\uff56\001" +
    "\002\000\004\052\u0181\001\002\000\034\002\uff58\006\uff58" +
    "\017\uff58\020\uff58\052\uff58\053\uff58\065\uff58\067\uff58\071" +
    "\uff58\072\uff58\074\uff58\075\uff58\076\uff58\001\002\000\004" +
    "\006\u0161\001\002\000\006\047\u0185\051\u0184\001\002\000" +
    "\032\006\021\017\026\020\040\052\uff51\053\016\065\017" +
    "\067\020\071\035\072\012\074\027\075\010\076\013\001" +
    "\002\000\014\012\u0168\013\u016a\014\u0167\015\u016c\016\u0187" +
    "\001\002\000\004\051\u018b\001\002\000\004\051\u0188\001" +
    "\002\000\026\006\021\017\026\020\040\053\016\065\017" +
    "\067\020\071\035\072\012\074\027\075\010\001\002\000" +
    "\030\006\021\017\026\020\040\052\u018a\053\016\065\017" +
    "\067\020\071\035\072\012\074\027\075\010\001\002\000" +
    "\034\002\uff59\006\uff59\017\uff59\020\uff59\052\uff59\053\uff59" +
    "\065\uff59\067\uff59\071\uff59\072\uff59\074\uff59\075\uff59\076" +
    "\uff59\001\002\000\032\006\021\017\026\020\040\052\uff51" +
    "\053\016\065\017\067\020\071\035\072\012\074\027\075" +
    "\010\076\013\001\002\000\004\052\u018d\001\002\000\034" +
    "\002\uff55\006\uff55\017\uff55\020\uff55\052\uff55\053\uff55\065" +
    "\uff55\067\uff55\071\uff55\072\uff55\074\uff55\075\uff55\076\uff55" +
    "\001\002\000\004\052\u018f\001\002\000\034\002\uff57\006" +
    "\uff57\017\uff57\020\uff57\052\uff57\053\uff57\065\uff57\067\uff57" +
    "\071\uff57\072\uff57\074\uff57\075\uff57\076\uff57\001\002\000" +
    "\006\030\uff50\046\uff50\001\002\000\012\012\u0168\013\u016a" +
    "\014\u0167\015\u016c\001\002\000\006\030\uff4e\046\uff4e\001" +
    "\002\000\006\046\uffe2\050\uffe2\001\002\000\006\033\u0199" +
    "\047\u019a\001\002\000\006\046\u0196\050\u0197\001\002\000" +
    "\004\006\u0194\001\002\000\070\002\uffe4\004\uffe4\005\uffe4" +
    "\006\uffe4\007\uffe4\010\uffe4\011\uffe4\017\uffe4\020\uffe4\021" +
    "\uffe4\022\uffe4\027\uffe4\036\uffe4\052\uffe4\053\uffe4\054\uffe4" +
    "\055\uffe4\056\uffe4\057\uffe4\065\uffe4\067\uffe4\071\uffe4\072" +
    "\uffe4\074\uffe4\075\uffe4\076\uffe4\077\uffe4\001\002\000\006" +
    "\046\uffe3\050\uffe3\001\002\000\040\004\076\005\060\006" +
    "\067\007\103\010\065\011\101\021\107\022\050\027\052" +
    "\036\062\054\074\055\056\056\106\057\072\077\073\001" +
    "\002\000\012\012\u0168\013\u016a\014\u0167\015\u016c\001\002" +
    "\000\010\033\u019c\046\uffdf\050\uffdf\001\002\000\040\004" +
    "\076\005\060\006\067\007\103\010\065\011\101\021\107" +
    "\022\050\027\052\036\062\054\074\055\056\056\106\057" +
    "\072\077\073\001\002\000\006\046\uffe1\050\uffe1\001\002" +
    "\000\006\046\uffe0\050\uffe0\001\002\000\004\050\u01a1\001" +
    "\002\000\034\002\uff4c\006\uff4c\017\uff4c\020\uff4c\052\uff4c" +
    "\053\uff4c\065\uff4c\067\uff4c\071\uff4c\072\uff4c\074\uff4c\075" +
    "\uff4c\076\uff4c\001\002\000\034\002\uff4d\006\uff4d\017\uff4d" +
    "\020\uff4d\052\uff4d\053\uff4d\065\uff4d\067\uff4d\071\uff4d\072" +
    "\uff4d\074\uff4d\075\uff4d\076\uff4d\001\002\000\040\004\076" +
    "\005\060\006\115\007\103\010\065\011\101\021\107\022" +
    "\050\027\052\036\062\054\074\055\056\056\106\057\072" +
    "\077\073\001\002\000\010\030\u01a4\034\237\035\241\001" +
    "\002\000\004\051\u01a5\001\002\000\032\006\021\017\026" +
    "\020\040\052\uff51\053\016\065\017\067\020\071\035\072" +
    "\012\074\027\075\010\076\013\001\002\000\004\052\u01a7" +
    "\001\002\000\034\002\uff35\006\uff35\017\uff35\020\uff35\052" +
    "\uff35\053\uff35\065\uff35\067\uff35\071\uff35\072\uff35\074\uff35" +
    "\075\uff35\076\uff35\001\002\000\034\002\uff3b\006\uff3b\017" +
    "\uff3b\020\uff3b\052\uff3b\053\uff3b\065\uff3b\067\uff3b\071\uff3b" +
    "\072\uff3b\074\uff3b\075\uff3b\076\uff3b\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01a6\000\046\002\023\003\005\004\006\005\022\007" +
    "\032\010\013\015\021\022\036\037\014\041\003\047\033" +
    "\050\035\054\004\057\010\060\027\061\030\062\024\064" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\005\u0115\007\032\010\013\015\021\022" +
    "\036\037\014\041\003\047\033\050\035\054\004\057\010" +
    "\060\027\061\030\062\024\064\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\006\u019e" +
    "\016\101\017\076\020\074\021\077\023\054\024\067\025" +
    "\062\026\056\027\060\030\052\031\053\032\107\033\050" +
    "\034\103\035\104\036\065\055\070\001\001\000\006\011" +
    "\u0194\012\u0192\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\051\042\052" +
    "\043\053\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\051\u0126\052\u0127\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\004\u0112\005\022" +
    "\007\032\010\013\015\021\022\036\037\014\041\003\044" +
    "\u0124\047\033\050\035\054\004\057\010\060\027\061\030" +
    "\062\024\064\031\001\001\000\002\001\001\000\046\006" +
    "\063\016\101\017\076\020\074\021\077\023\054\024\067" +
    "\025\062\026\056\027\060\030\052\031\053\032\107\033" +
    "\050\034\103\035\104\036\065\055\070\001\001\000\032" +
    "\016\u0123\017\076\025\062\026\056\027\060\031\112\032" +
    "\120\033\110\034\117\035\104\036\113\055\115\001\001" +
    "\000\002\001\001\000\040\016\u0120\017\076\023\u011e\024" +
    "\u011f\025\062\026\056\027\060\030\165\031\166\032\120" +
    "\033\110\034\117\035\104\036\113\055\115\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\016\242\017\076\023\054\024\u0116\025\062" +
    "\026\056\027\060\030\165\031\166\032\120\033\110\034" +
    "\117\035\104\036\113\055\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\016\116\017\076\025\062\026\056\027\060\031\112\032" +
    "\120\033\110\034\117\035\104\036\113\055\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\016\162\017" +
    "\076\025\062\026\056\027\060\031\112\032\120\033\110" +
    "\034\117\035\104\036\113\055\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\016\132\017\076\025\062\026\056\027\060\031\112" +
    "\032\120\033\110\034\117\035\104\036\113\055\115\001" +
    "\001\000\032\016\131\017\076\025\062\026\056\027\060" +
    "\031\112\032\120\033\110\034\117\035\104\036\113\055" +
    "\115\001\001\000\032\016\130\017\076\025\062\026\056" +
    "\027\060\031\112\032\120\033\110\034\117\035\104\036" +
    "\113\055\115\001\001\000\032\016\127\017\076\025\062" +
    "\026\056\027\060\031\112\032\120\033\110\034\117\035" +
    "\104\036\113\055\115\001\001\000\032\016\126\017\076" +
    "\025\062\026\056\027\060\031\112\032\120\033\110\034" +
    "\117\035\104\036\113\055\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\006\136\016\101" +
    "\017\076\020\074\021\077\023\054\024\067\025\062\026" +
    "\056\027\060\030\052\031\053\032\107\033\050\034\103" +
    "\035\104\036\065\055\070\056\135\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\006\142" +
    "\016\101\017\076\020\074\021\077\023\054\024\067\025" +
    "\062\026\056\027\060\030\052\031\053\032\107\033\050" +
    "\034\103\035\104\036\065\055\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\016\151\017\076\025\062\026\056\027\060\031\112" +
    "\032\120\033\110\034\117\035\104\036\113\055\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\006\156\016\101\017\076\020" +
    "\074\021\077\023\054\024\067\025\062\026\056\027\060" +
    "\030\052\031\053\032\107\033\050\034\103\035\104\036" +
    "\065\055\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\016\170\017\076\023\054\024\167" +
    "\025\062\026\056\027\060\030\165\031\166\032\120\033" +
    "\110\034\117\035\104\036\113\055\115\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\016\202\017\076" +
    "\025\062\026\056\027\060\031\112\032\120\033\110\034" +
    "\117\035\104\036\113\055\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\006\207\016\101\017\076\020\074\021\077\023\054" +
    "\024\067\025\062\026\056\027\060\030\052\031\053\032" +
    "\107\033\050\034\103\035\104\036\065\055\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\016\235\017\076\025\062\026\056" +
    "\027\060\031\232\032\120\033\110\034\117\035\104\036" +
    "\113\055\115\001\001\000\032\016\231\017\076\025\062" +
    "\026\056\027\060\031\112\032\120\033\110\034\117\035" +
    "\104\036\113\055\115\001\001\000\032\016\230\017\076" +
    "\025\062\026\056\027\060\031\112\032\120\033\110\034" +
    "\117\035\104\036\113\055\115\001\001\000\002\001\001" +
    "\000\032\016\227\017\076\025\062\026\056\027\060\031" +
    "\112\032\120\033\110\034\117\035\104\036\113\055\115" +
    "\001\001\000\032\016\226\017\076\025\062\026\056\027" +
    "\060\031\223\032\120\033\110\034\117\035\104\036\113" +
    "\055\115\001\001\000\032\016\222\017\076\025\062\026" +
    "\056\027\060\031\112\032\120\033\110\034\117\035\104" +
    "\036\113\055\115\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\016\242\017\076\023\054\024\243\025" +
    "\062\026\056\027\060\030\165\031\166\032\120\033\110" +
    "\034\117\035\104\036\113\055\115\001\001\000\002\001" +
    "\001\000\040\016\242\017\076\023\054\024\241\025\062" +
    "\026\056\027\060\030\165\031\166\032\120\033\110\034" +
    "\117\035\104\036\113\055\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\016\251\017" +
    "\076\025\062\026\056\027\060\031\250\032\120\033\110" +
    "\034\117\035\104\036\113\055\115\001\001\000\032\016" +
    "\247\017\076\025\062\026\056\027\060\031\246\032\120" +
    "\033\110\034\117\035\104\036\113\055\115\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\257\001\001\000\004\030\254\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\006\272\016\101\017\076\020\074\021\077" +
    "\023\054\024\067\025\062\026\056\027\060\030\052\031" +
    "\053\032\107\033\050\034\103\035\104\036\065\055\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\016\307\017\076\025\062" +
    "\026\056\027\060\030\304\031\112\032\120\033\110\034" +
    "\117\035\104\036\113\055\115\001\001\000\034\016\303" +
    "\017\076\025\062\026\056\027\060\030\300\031\112\032" +
    "\120\033\110\034\117\035\104\036\113\055\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\016\312\017\076\023" +
    "\054\024\311\025\062\026\056\027\060\030\165\031\166" +
    "\032\120\033\110\034\117\035\104\036\113\055\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\016\336\017\076\025\062\026\056" +
    "\027\060\031\112\032\120\033\110\034\117\035\104\036" +
    "\113\055\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\016\341\017\076\025\062\026\056\027\060\031" +
    "\112\032\120\033\110\034\117\035\104\036\113\055\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\016" +
    "\344\017\076\025\062\026\056\027\060\031\112\032\120" +
    "\033\110\034\117\035\104\036\113\055\115\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\016\347\017\076" +
    "\025\062\026\056\027\060\031\112\032\120\033\110\034" +
    "\117\035\104\036\113\055\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\016\352\017\076\025\062\026" +
    "\056\027\060\031\112\032\120\033\110\034\117\035\104" +
    "\036\113\055\115\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\016\355\017\076\025\062\026\056\027\060" +
    "\031\112\032\120\033\110\034\117\035\104\036\113\055" +
    "\115\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\016\360\017\076\025\062\026\056\027\060\031\112\032" +
    "\120\033\110\034\117\035\104\036\113\055\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\016\363\017" +
    "\076\025\062\026\056\027\060\031\112\032\120\033\110" +
    "\034\117\035\104\036\113\055\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\016\366\017\076\025\062" +
    "\026\056\027\060\031\112\032\120\033\110\034\117\035" +
    "\104\036\113\055\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\016\371\017\076\025\062\026\056\027" +
    "\060\031\112\032\120\033\110\034\117\035\104\036\113" +
    "\055\115\001\001\000\002\001\001\000\032\016\373\017" +
    "\076\025\062\026\056\027\060\031\112\032\120\033\110" +
    "\034\117\035\104\036\113\055\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\016\377\017\076\023\054" +
    "\024\376\025\062\026\056\027\060\030\165\031\166\032" +
    "\120\033\110\034\117\035\104\036\113\055\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\016\u010f\017\076\025" +
    "\062\026\056\027\060\030\u010c\031\112\032\120\033\110" +
    "\034\117\035\104\036\113\055\115\001\001\000\034\016" +
    "\u010b\017\076\025\062\026\056\027\060\030\u0108\031\112" +
    "\032\120\033\110\034\117\035\104\036\113\055\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\004\u0112\005\022\007\032\010\013\015\021\022\036\037" +
    "\014\041\003\044\u0113\047\033\050\035\054\004\057\010" +
    "\060\027\061\030\062\024\064\031\001\001\000\040\005" +
    "\u0115\007\032\010\013\015\021\022\036\037\014\041\003" +
    "\047\033\050\035\054\004\057\010\060\027\061\030\062" +
    "\024\064\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\016\u0119\017" +
    "\076\023\054\024\u0118\025\062\026\056\027\060\030\165" +
    "\031\166\032\120\033\110\034\117\035\104\036\113\055" +
    "\115\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\u012a\010\013\015\u012b\001\001\000" +
    "\002\001\001\000\040\016\242\017\076\023\054\024\u0138" +
    "\025\062\026\056\027\060\030\165\031\166\032\120\033" +
    "\110\034\117\035\104\036\113\055\115\001\001\000\040" +
    "\016\242\017\076\023\054\024\u012c\025\062\026\056\027" +
    "\060\030\165\031\166\032\120\033\110\034\117\035\104" +
    "\036\113\055\115\001\001\000\002\001\001\000\004\063" +
    "\u012e\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\006\u0133\016\101\017\076\020\074\021" +
    "\077\023\054\024\067\025\062\026\056\027\060\030\052" +
    "\031\053\032\107\033\050\034\103\035\104\036\065\055" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\004\u0112\005\022\007\032\010\013\015" +
    "\021\022\036\037\014\041\003\044\u0136\047\033\050\035" +
    "\054\004\057\010\060\027\061\030\062\024\064\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\063\u013a\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\004\u0112\005\022\007\032\010\013\015\021" +
    "\022\036\037\014\041\003\044\u013d\047\033\050\035\054" +
    "\004\057\010\060\027\061\030\062\024\064\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\006\u0140\014" +
    "\u0141\016\101\017\076\020\074\021\077\023\054\024\067" +
    "\025\062\026\056\027\060\030\052\031\053\032\107\033" +
    "\050\034\103\035\104\036\065\055\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\006\u0149" +
    "\016\101\017\076\020\074\021\077\023\054\024\067\025" +
    "\062\026\056\027\060\030\052\031\053\032\107\033\050" +
    "\034\103\035\104\036\065\055\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\006\u0150\016\101\017\076\020\074" +
    "\021\077\023\054\024\067\025\062\026\056\027\060\030" +
    "\052\031\053\032\107\033\050\034\103\035\104\036\065" +
    "\055\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\004\u0112\005\022\007\032\010\013\015\021\022\036" +
    "\037\014\041\003\044\u0153\047\033\050\035\054\004\057" +
    "\010\060\027\061\030\062\024\064\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\050\006\u0158\016\101\017\076\020\074\021\077" +
    "\023\054\024\067\025\062\026\056\027\060\030\052\031" +
    "\053\032\107\033\050\034\103\035\104\036\065\040\u0159" +
    "\055\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\006\u015d\016\101\017\076\020\074\021\077\023\054" +
    "\024\067\025\062\026\056\027\060\030\052\031\053\032" +
    "\107\033\050\034\103\035\104\036\065\055\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\042\u0161\043\u0162\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\004\u0112\005\022\007\032\010\013\015\021" +
    "\022\036\037\014\041\003\044\u017f\047\033\050\035\054" +
    "\004\057\010\060\027\061\030\062\024\064\031\001\001" +
    "\000\004\013\u0168\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\007\u0177\010\013\015\u0172\022" +
    "\u0179\037\u0171\041\u016d\045\u0170\046\u0178\050\035\054\u016e" +
    "\057\u016f\060\u0174\061\u0175\062\u0173\064\u0176\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\007\u0177\010\013\015\u0172\022\u0179\037\u0171\041\u016d\046" +
    "\u017b\050\035\054\u016e\057\u016f\060\u0174\061\u0175\062\u0173" +
    "\064\u0176\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\004\u0112" +
    "\005\022\007\032\010\013\015\021\022\036\037\014\041" +
    "\003\044\u017d\047\033\050\035\054\004\057\010\060\027" +
    "\061\030\062\024\064\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\042\u018f\001\001\000\002\001\001\000\044\004\u0112\005" +
    "\022\007\032\010\013\015\021\022\036\037\014\041\003" +
    "\044\u018d\047\033\050\035\054\004\057\010\060\027\061" +
    "\030\062\024\064\031\001\001\000\004\013\u0185\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\007\u0177\010" +
    "\013\015\u0172\022\u0179\037\u0171\041\u016d\045\u0188\046\u0178" +
    "\050\035\054\u016e\057\u016f\060\u0174\061\u0175\062\u0173\064" +
    "\u0176\001\001\000\036\007\u0177\010\013\015\u0172\022\u0179" +
    "\037\u0171\041\u016d\046\u017b\050\035\054\u016e\057\u016f\060" +
    "\u0174\061\u0175\062\u0173\064\u0176\001\001\000\002\001\001" +
    "\000\044\004\u0112\005\022\007\032\010\013\015\021\022" +
    "\036\037\014\041\003\044\u018b\047\033\050\035\054\004" +
    "\057\010\060\027\061\030\062\024\064\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\u0191\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\u0197\001\001\000\002\001\001\000" +
    "\002\001\001\000\050\006\u0140\014\u019d\016\101\017\076" +
    "\020\074\021\077\023\054\024\067\025\062\026\056\027" +
    "\060\030\052\031\053\032\107\033\050\034\103\035\104" +
    "\036\065\055\070\001\001\000\004\013\u019a\001\001\000" +
    "\002\001\001\000\050\006\u0140\014\u019c\016\101\017\076" +
    "\020\074\021\077\023\054\024\067\025\062\026\056\027" +
    "\060\030\052\031\053\032\107\033\050\034\103\035\104" +
    "\036\065\055\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\016\242\017\076\023\054\024\u01a2\025\062\026" +
    "\056\027\060\030\165\031\166\032\120\033\110\034\117" +
    "\035\104\036\113\055\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\004\u0112\005\022\007\032\010\013" +
    "\015\021\022\036\037\014\041\003\044\u01a5\047\033\050" +
    "\035\054\004\057\010\060\027\061\030\062\024\064\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public Parser(Lexer lexer) {
        super(lexer);
    }

    //Metodo llamado automaticamente al encontrar error sintanctico


    public void syntax_error(Symbol s){

    String lexema = s.value.toString();
    int fila = s.right;
    int columna = s.left;
    
    System.out.println("Error Sintactico hallado");
    System.out.println("Lexema " + lexema + " linea"  + fila + " columna " + columna);

    }

    //Metodo llamado cuando no se puede recuperar de un error
    
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        
    String lexema = s.value.toString();
    int fila = s.right;
    int columna = s.left;
    
    System.out.println("Error Sintactico hallado PANIC MODE");
    System.out.println("Lexema " + lexema + " linea"  + fila + " columna " + columna);
        
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= ts 
            {
              Object RESULT =null;
		 System.out.println("Doc ok"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ts ::= instrucciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ts",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instrucciones opciones_instrucciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instrucciones ::= opciones_instrucciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // opciones_instrucciones ::= declaracion_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // opciones_instrucciones ::= asignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // opciones_instrucciones ::= funcion_console_log 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // opciones_instrucciones ::= declaracion_funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // opciones_instrucciones ::= llamada_funcion_normal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // opciones_instrucciones ::= opciones_if 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // opciones_instrucciones ::= funcion_return 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // opciones_instrucciones ::= instruccion_break 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // opciones_instrucciones ::= instruccion_continue 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // opciones_instrucciones ::= funcion_incremento_decremento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // opciones_instrucciones ::= funcion_for 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // opciones_instrucciones ::= funcion_while 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // opciones_instrucciones_sin_return ::= declaracion_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones_sin_return",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // opciones_instrucciones_sin_return ::= asignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones_sin_return",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // opciones_instrucciones_sin_return ::= funcion_console_log 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones_sin_return",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // opciones_instrucciones_sin_return ::= declaracion_funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones_sin_return",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // opciones_instrucciones_sin_return ::= llamada_funcion_normal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones_sin_return",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // opciones_instrucciones_sin_return ::= opciones_if 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones_sin_return",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // opciones_instrucciones_sin_return ::= instruccion_break 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones_sin_return",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // opciones_instrucciones_sin_return ::= instruccion_continue 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones_sin_return",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // opciones_instrucciones_sin_return ::= funcion_incremento_decremento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones_sin_return",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // opciones_instrucciones_sin_return ::= funcion_for 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones_sin_return",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // opciones_instrucciones_sin_return ::= funcion_while 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones_sin_return",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // asignacion ::= ID ASIGNACION variable_valor PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaracion_variable ::= tipo_acceso_variable id_valor_variable_lista PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_variable",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // id_valor_variable_lista ::= id_valor_variable_lista COMA id_valor_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_valor_variable_lista",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // id_valor_variable_lista ::= id_valor_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_valor_variable_lista",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // id_valor_variable ::= ID DOS_PUNTOS tipo_dato_variable ASIGNACION variable_valor 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tipoDatoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tipoDatoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object tipoDato = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println(id + " " + tipoDato + " " + valor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_valor_variable",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // id_valor_variable ::= ID ASIGNACION variable_valor 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println(id + " " + valor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_valor_variable",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // id_valor_variable ::= ID DOS_PUNTOS tipo_dato_variable 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tipoDatoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tipoDatoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tipoDato = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println(id + " " + tipoDato + " " + " undefined"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_valor_variable",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // tipo_acceso_variable ::= RCONST 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_acceso_variable",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // tipo_acceso_variable ::= RLET 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_acceso_variable",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // tipo_dato_variable ::= RNUMBER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato_variable",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // tipo_dato_variable ::= RBIGINT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato_variable",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // tipo_dato_variable ::= RSTRING 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato_variable",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // tipo_dato_variable ::= RBOOLEAN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato_variable",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // variable_valor ::= instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_valor",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instruccion ::= operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instruccion ::= operaciones_logicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instruccion ::= funcion_boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instruccion ::= funcion_string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // instruccion ::= funcion_char_at 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // instruccion ::= funcion_to_lower_case 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // instruccion ::= funcion_to_upper_case 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // instruccion ::= funcion_concat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // instruccion ::= llamada_funcion_asignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // instruccion ::= incremento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // instruccion ::= decremento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // operaciones_matematicas ::= MENOS operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // operaciones_matematicas ::= MAS operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // operaciones_matematicas ::= operaciones_matematicas MAS operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // operaciones_matematicas ::= operaciones_matematicas MENOS operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // operaciones_matematicas ::= operaciones_matematicas MULTIPLICACION operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // operaciones_matematicas ::= operaciones_matematicas DIVISION operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // operaciones_matematicas ::= operaciones_matematicas MOD operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // operaciones_matematicas ::= PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // operaciones_matematicas ::= funcion_number 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // operaciones_matematicas ::= funcion_bigint 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // operaciones_matematicas ::= funcion_length 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // operaciones_matematicas ::= funciones_numericas_estaticas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // operaciones_matematicas ::= NUMBER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // operaciones_matematicas ::= BIGINT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // operaciones_matematicas ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // operaciones_matematicas ::= TEXTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // funciones_numericas_estaticas ::= MATH PUNTO ABS PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // funciones_numericas_estaticas ::= MATH PUNTO CEIL PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // funciones_numericas_estaticas ::= MATH PUNTO COS PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // funciones_numericas_estaticas ::= MATH PUNTO SIN PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // funciones_numericas_estaticas ::= MATH PUNTO TAN PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // funciones_numericas_estaticas ::= MATH PUNTO EXP PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // funciones_numericas_estaticas ::= MATH PUNTO FLOOR PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // funciones_numericas_estaticas ::= MATH PUNTO POW PARENTESIS_ABIERTO operaciones_matematicas COMA operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // funciones_numericas_estaticas ::= MATH PUNTO SQRT PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // funciones_numericas_estaticas ::= MATH PUNTO RANDOM PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // funciones_numericas_estaticas ::= MATH PUNTO E 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // funciones_numericas_estaticas ::= MATH PUNTO PI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // funciones_numericas_estaticas ::= MATH PUNTO SQRT2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // incremento ::= ID INCREMENTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // decremento ::= ID DECREMENTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decremento",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // funcion_incremento_decremento ::= ID INCREMENTO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_incremento_decremento",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // funcion_incremento_decremento ::= ID DECREMENTO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_incremento_decremento",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // operaciones_relacionales ::= operaciones_matematicas MAYOR_QUE operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // operaciones_relacionales ::= operaciones_matematicas MAYOR_IGUAL operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // operaciones_relacionales ::= operaciones_matematicas MENOR_QUE operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // operaciones_relacionales ::= operaciones_matematicas MENOR_IGUAL operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // operaciones_relacionales ::= operaciones_matematicas COMPARACION operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // operaciones_relacionales ::= operaciones_matematicas DISTINTO operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // operaciones_relacionales ::= TRUE COMPARACION TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // operaciones_relacionales ::= TRUE COMPARACION FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // operaciones_relacionales ::= FALSE COMPARACION TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // operaciones_relacionales ::= FALSE COMPARACION FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // operaciones_relacionales ::= operaciones_matematicas COMPARACION TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // operaciones_relacionales ::= TRUE COMPARACION operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // operaciones_relacionales ::= operaciones_matematicas COMPARACION FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // operaciones_relacionales ::= FALSE COMPARACION operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // operaciones_relacionales ::= TRUE DISTINTO TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // operaciones_relacionales ::= TRUE DISTINTO FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // operaciones_relacionales ::= FALSE DISTINTO TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // operaciones_relacionales ::= FALSE DISTINTO FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // operaciones_relacionales ::= operaciones_matematicas DISTINTO TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // operaciones_relacionales ::= TRUE DISTINTO operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // operaciones_relacionales ::= operaciones_matematicas DISTINTO FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // operaciones_relacionales ::= FALSE DISTINTO operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // operaciones_relacionales ::= TRUE 
            {
              Object RESULT =null;
		 RESULT = "true"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // operaciones_relacionales ::= FALSE 
            {
              Object RESULT =null;
		 RESULT = "false"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // operaciones_relacionales ::= funcion_boolean COMPARACION TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // operaciones_relacionales ::= funcion_boolean COMPARACION FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // operaciones_relacionales ::= TRUE COMPARACION funcion_boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // operaciones_relacionales ::= FALSE COMPARACION funcion_boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // operaciones_relacionales ::= funcion_boolean DISTINTO TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // operaciones_relacionales ::= funcion_boolean DISTINTO FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // operaciones_relacionales ::= TRUE DISTINTO funcion_boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // operaciones_relacionales ::= FALSE DISTINTO funcion_boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // operaciones_relacionales ::= funcion_boolean COMPARACION funcion_boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // operaciones_relacionales ::= funcion_boolean DISTINTO funcion_boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // operaciones_relacionales ::= funcion_string COMPARACION funcion_string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // operaciones_relacionales ::= funcion_string DISTINTO funcion_string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // operaciones_relacionales ::= funcion_string COMPARACION operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // operaciones_relacionales ::= funcion_string DISTINTO operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // operaciones_relacionales ::= operaciones_matematicas COMPARACION funcion_string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // operaciones_relacionales ::= operaciones_matematicas DISTINTO funcion_string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // operaciones_relacionales ::= PARENTESIS_ABIERTO operaciones_relacionales PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // operaciones_logicas ::= operaciones_logicas AND operaciones_logicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // operaciones_logicas ::= operaciones_logicas OR operaciones_logicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // operaciones_logicas ::= NOT operaciones_logicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // operaciones_logicas ::= PARENTESIS_ABIERTO operaciones_logicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // operaciones_logicas ::= operaciones_relacionales 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // funcion_length ::= TEXTO PUNTO LENGTH 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_length",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // funcion_length ::= ID PUNTO LENGTH 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_length",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // funcion_length ::= variables_string PUNTO LENGTH 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_length",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // funcion_number ::= FNUMBER PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_number",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // funcion_number ::= FNUMBER PARENTESIS_ABIERTO operaciones_logicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_number",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // funcion_number ::= FNUMBER PARENTESIS_ABIERTO TEXTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_number",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // funcion_bigint ::= FBIGINT PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_bigint",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // funcion_bigint ::= FBIGINT PARENTESIS_ABIERTO operaciones_logicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_bigint",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // funcion_bigint ::= FBIGINT PARENTESIS_ABIERTO TEXTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_bigint",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // funcion_boolean ::= FBOOLEAN PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_boolean",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // funcion_boolean ::= FBOOLEAN PARENTESIS_ABIERTO operaciones_logicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_boolean",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // funcion_boolean ::= FBOOLEAN PARENTESIS_ABIERTO TEXTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_boolean",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // funcion_string ::= FSTRING PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_string",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // funcion_string ::= FSTRING PARENTESIS_ABIERTO operaciones_logicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_string",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // funcion_string ::= FSTRING PARENTESIS_ABIERTO TEXTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_string",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // funcion_char_at ::= ID PUNTO CHARAT PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_char_at",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // funcion_char_at ::= TEXTO PUNTO CHARAT PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_char_at",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // funcion_concat ::= variables_string PUNTO CONCAT PARENTESIS_ABIERTO instruccion PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_concat",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // funcion_concat ::= TEXTO PUNTO CONCAT PARENTESIS_ABIERTO instruccion PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_concat",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // funcion_concat ::= ID PUNTO CONCAT PARENTESIS_ABIERTO instruccion PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_concat",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // variables_string ::= funcion_string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables_string",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // variables_string ::= funcion_char_at 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables_string",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // variables_string ::= funcion_to_lower_case 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables_string",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // variables_string ::= funcion_to_upper_case 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables_string",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // variables_string ::= funcion_concat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables_string",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // variables_string ::= llamada_funcion_asignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables_string",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // funcion_to_lower_case ::= ID PUNTO TOLOWERCASE PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_to_lower_case",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // funcion_to_lower_case ::= TEXTO PUNTO TOLOWERCASE PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_to_lower_case",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // funcion_to_lower_case ::= variables_string PUNTO TOLOWERCASE PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_to_lower_case",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // funcion_to_upper_case ::= ID PUNTO TOUPPERCASE PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_to_upper_case",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // funcion_to_upper_case ::= TEXTO PUNTO TOUPPERCASE PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_to_upper_case",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // funcion_to_upper_case ::= variables_string PUNTO TOUPPERCASE PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_to_upper_case",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // funcion_console_log ::= CONSOLE PUNTO LOG PARENTESIS_ABIERTO lista_instrucciones_console PARENTESIS_CERRADO PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 System.out.println(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_console_log",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // lista_instrucciones_console ::= lista_instrucciones_console COMA instruccion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instrucciones_console",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // lista_instrucciones_console ::= instruccion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instrucciones_console",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // declaracion_funcion ::= FUNCTION ID PARENTESIS_ABIERTO PARENTESIS_CERRADO DOS_PUNTOS RVOID CORCHETE_ABIERTO instrucciones_funciones_sin_return CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // declaracion_funcion ::= FUNCTION ID PARENTESIS_ABIERTO parametros_funcion_declaracion PARENTESIS_CERRADO DOS_PUNTOS RVOID CORCHETE_ABIERTO instrucciones_funciones_sin_return CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // declaracion_funcion ::= FUNCTION ID PARENTESIS_ABIERTO PARENTESIS_CERRADO CORCHETE_ABIERTO instrucciones_funcion CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // declaracion_funcion ::= FUNCTION ID PARENTESIS_ABIERTO parametros_funcion_declaracion PARENTESIS_CERRADO CORCHETE_ABIERTO instrucciones_funcion CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // declaracion_funcion ::= FUNCTION ID PARENTESIS_ABIERTO PARENTESIS_CERRADO DOS_PUNTOS tipo_dato_variable CORCHETE_ABIERTO instrucciones_funcion CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // declaracion_funcion ::= FUNCTION ID PARENTESIS_ABIERTO parametros_funcion_declaracion PARENTESIS_CERRADO DOS_PUNTOS tipo_dato_variable CORCHETE_ABIERTO instrucciones_funcion CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // instrucciones_funciones_sin_return ::= instrucciones_funciones_sin_return opciones_instrucciones_sin_return 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_funciones_sin_return",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // instrucciones_funciones_sin_return ::= opciones_instrucciones_sin_return 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_funciones_sin_return",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // instrucciones_funcion ::= instrucciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_funcion",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // instrucciones_funcion ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_funcion",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // parametros_funcion_declaracion ::= parametros_funcion_declaracion COMA parametro_funcion_declaracion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_funcion_declaracion",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // parametros_funcion_declaracion ::= parametro_funcion_declaracion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_funcion_declaracion",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // parametro_funcion_declaracion ::= ID DOS_PUNTOS tipo_dato_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro_funcion_declaracion",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // funcion_return ::= RETURN instruccion PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_return",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // funcion_return ::= RETURN PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_return",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // llamada_funcion_asignacion ::= ID PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion_asignacion",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // llamada_funcion_asignacion ::= ID PARENTESIS_ABIERTO parametros_funcion_asignacion PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion_asignacion",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // parametros_funcion_asignacion ::= parametros_funcion_asignacion COMA instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_funcion_asignacion",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // parametros_funcion_asignacion ::= instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_funcion_asignacion",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // llamada_funcion_normal ::= ID PARENTESIS_ABIERTO PARENTESIS_CERRADO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion_normal",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // llamada_funcion_normal ::= ID PARENTESIS_ABIERTO instruccion PARENTESIS_CERRADO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion_normal",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // funcion_if ::= IF PARENTESIS_ABIERTO instruccion PARENTESIS_CERRADO CORCHETE_ABIERTO instrucciones_funcion CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_if",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // funcion_else ::= ELSE CORCHETE_ABIERTO instrucciones_funcion CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_else",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // funcion_else_if ::= ELSE IF PARENTESIS_ABIERTO instruccion PARENTESIS_CERRADO CORCHETE_ABIERTO instrucciones_funcion CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_else_if",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // lista_else_if ::= lista_else_if funcion_else_if 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_else_if",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // lista_else_if ::= funcion_else_if 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_else_if",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // opciones_if ::= funcion_if 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_if",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // opciones_if ::= funcion_if funcion_else 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_if",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // opciones_if ::= funcion_if lista_else_if funcion_else 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_if",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // opciones_if ::= funcion_if lista_else_if 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_if",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // instruccion_break ::= BREAK PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion_break",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // instruccion_continue ::= CONTINUE PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion_continue",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // funcion_for ::= FOR PARENTESIS_ABIERTO declaracion_variable operaciones_logicas PUNTO_COMA accion_asignacion_for PARENTESIS_CERRADO CORCHETE_ABIERTO instrucciones_funcion CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_for",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // funcion_for ::= FOR PARENTESIS_ABIERTO asignacion operaciones_logicas PUNTO_COMA accion_asignacion_for PARENTESIS_CERRADO CORCHETE_ABIERTO instrucciones_funcion CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_for",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // accion_asignacion_for ::= ID INCREMENTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("accion_asignacion_for",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // accion_asignacion_for ::= ID DECREMENTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("accion_asignacion_for",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // accion_asignacion_for ::= ID ASIGNACION instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("accion_asignacion_for",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // funcion_while ::= WHILE PARENTESIS_ABIERTO operaciones_logicas PARENTESIS_CERRADO CORCHETE_ABIERTO instrucciones_funcion CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_while",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
