
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.peter.typesecure.parser;

import com.peter.typesecure.lexer.Lexer;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\203\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\004\004\000\002\004\003\000\002\005\003" +
    "\000\002\005\003\000\002\017\003\000\002\017\003\000" +
    "\002\010\005\000\002\012\005\000\002\012\003\000\002" +
    "\013\007\000\002\013\005\000\002\013\005\000\002\011" +
    "\003\000\002\011\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\015\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\016\004" +
    "\000\002\016\004\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\005" +
    "\000\002\016\005\000\002\020\005\000\002\021\005\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\022\005\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\005\000\002\022\005" +
    "\000\002\022\005\000\002\022\005\000\002\022\005\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\022\005\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\005\000\002\022\003" +
    "\000\002\022\003\000\002\022\005\000\002\022\005\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\022\005\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\005\000\002\022\005" +
    "\000\002\022\005\000\002\022\005\000\002\022\005\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\022\005\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\023\005\000\002\023\005" +
    "\000\002\023\004\000\002\023\005\000\002\023\003\000" +
    "\002\024\005\000\002\024\005\000\002\024\005\000\002" +
    "\024\005\000\002\025\006\000\002\025\006\000\002\025" +
    "\006\000\002\026\006\000\002\026\006\000\002\026\006" +
    "\000\002\027\006\000\002\027\006\000\002\027\006\000" +
    "\002\030\006\000\002\030\006\000\002\030\006\000\002" +
    "\031\007\000\002\031\007\000\002\032\007\000\002\032" +
    "\007\000\002\033\011\000\002\034\005\000\002\034\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\327\000\010\017\004\020\010\065\015\001\002\000" +
    "\004\006\ufff2\001\002\000\012\002\ufffb\017\ufffb\020\ufffb" +
    "\065\ufffb\001\002\000\004\002\331\001\002\000\012\002" +
    "\uffff\017\004\020\010\065\015\001\002\000\004\006\ufff1" +
    "\001\002\000\012\002\ufffd\017\ufffd\020\ufffd\065\ufffd\001" +
    "\002\000\012\002\ufffc\017\ufffc\020\ufffc\065\ufffc\001\002" +
    "\000\004\002\000\001\002\000\004\006\300\001\002\000" +
    "\004\045\016\001\002\000\004\066\017\001\002\000\004" +
    "\027\020\001\002\000\036\004\041\005\031\006\035\007" +
    "\044\010\034\011\042\021\052\022\021\027\023\036\033" +
    "\054\040\055\030\056\050\057\037\001\002\000\024\004" +
    "\041\005\031\006\055\007\053\021\052\022\021\027\056" +
    "\054\040\055\030\001\002\000\006\030\uff80\046\uff80\001" +
    "\002\000\036\004\041\005\031\006\055\007\146\010\034" +
    "\011\042\021\052\022\021\027\023\036\033\054\040\055" +
    "\030\056\050\057\037\001\002\000\012\030\uff82\043\157" +
    "\044\156\046\uff82\001\002\000\012\030\uff81\043\151\044" +
    "\150\046\uff81\001\002\000\016\021\uff9e\030\uff9e\034\uff9e" +
    "\035\uff9e\046\uff9e\050\uff9e\001\002\000\042\021\uffd7\022" +
    "\uffd7\023\uffd7\024\uffd7\025\uffd7\030\uffd7\034\uffd7\035\uffd7" +
    "\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7\046" +
    "\uffd7\050\uffd7\001\002\000\004\027\261\001\002\000\042" +
    "\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\030\uffd9\034" +
    "\uffd9\035\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9" +
    "\044\uffd9\046\uffd9\050\uffd9\001\002\000\042\021\uffd6\022" +
    "\uffd6\023\uffd6\024\uffd6\025\uffd6\030\uffd6\034\uffd6\035\uffd6" +
    "\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\046" +
    "\uffd6\050\uffd6\001\002\000\036\004\041\005\031\006\055" +
    "\007\146\010\034\011\042\021\052\022\021\027\023\036" +
    "\033\054\040\055\030\056\050\057\037\001\002\000\022" +
    "\021\uffbb\030\uffbb\034\uffbb\035\uffbb\043\247\044\246\046" +
    "\uffbb\050\uffbb\001\002\000\040\021\uffd8\022\uffd8\023\uffd8" +
    "\024\uffd8\025\uffd8\030\uffd8\037\uffd8\040\uffd8\041\uffd8\042" +
    "\uffd8\043\uffd8\044\uffd8\045\237\046\uffd8\050\uffd8\001\002" +
    "\000\014\021\235\030\uff84\034\141\035\143\046\uff84\001" +
    "\002\000\004\027\226\001\002\000\004\027\217\001\002" +
    "\000\042\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda\030" +
    "\uffda\034\uffda\035\uffda\037\uffda\040\uffda\041\uffda\042\uffda" +
    "\043\uffda\044\uffda\046\uffda\050\uffda\001\002\000\022\021" +
    "\uffba\030\uffba\034\uffba\035\uffba\043\206\044\205\046\uffba" +
    "\050\uffba\001\002\000\034\021\062\022\064\023\060\024" +
    "\061\025\063\030\uff86\037\120\040\122\041\115\042\116" +
    "\043\114\044\121\046\uff86\001\002\000\016\021\173\030" +
    "\uff85\043\107\044\105\045\172\046\uff85\001\002\000\006" +
    "\030\167\046\166\001\002\000\006\030\uff7f\046\uff7f\001" +
    "\002\000\006\030\uff83\046\uff83\001\002\000\004\027\077" +
    "\001\002\000\006\030\uff87\046\uff87\001\002\000\024\004" +
    "\041\005\031\006\055\007\053\021\052\022\021\027\056" +
    "\054\040\055\030\001\002\000\004\045\075\001\002\000" +
    "\042\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\030\uffe1" +
    "\034\uffe1\035\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043" +
    "\uffe1\044\uffe1\046\uffe1\050\uffe1\001\002\000\044\021\uffd8" +
    "\022\uffd8\023\uffd8\024\uffd8\025\uffd8\030\uffd8\034\uffd8\035" +
    "\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8" +
    "\045\073\046\uffd8\050\uffd8\001\002\000\024\004\041\005" +
    "\031\006\055\007\053\021\052\022\021\027\056\054\040" +
    "\055\030\001\002\000\016\021\062\022\064\023\060\024" +
    "\061\025\063\030\065\001\002\000\024\004\041\005\031" +
    "\006\055\007\053\021\052\022\021\027\056\054\040\055" +
    "\030\001\002\000\024\004\041\005\031\006\055\007\053" +
    "\021\052\022\021\027\056\054\040\055\030\001\002\000" +
    "\024\004\041\005\031\006\055\007\053\021\052\022\021" +
    "\027\056\054\040\055\030\001\002\000\024\004\041\005" +
    "\031\006\055\007\053\021\052\022\021\027\056\054\040" +
    "\055\030\001\002\000\024\004\041\005\031\006\055\007" +
    "\053\021\052\022\021\027\056\054\040\055\030\001\002" +
    "\000\042\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\030" +
    "\uffdb\034\uffdb\035\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb" +
    "\043\uffdb\044\uffdb\046\uffdb\050\uffdb\001\002\000\042\021" +
    "\uffdf\022\uffdf\023\060\024\uffdf\025\063\030\uffdf\034\uffdf" +
    "\035\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf\044" +
    "\uffdf\046\uffdf\050\uffdf\001\002\000\042\021\uffdd\022\uffdd" +
    "\023\uffdd\024\uffdd\025\uffdd\030\uffdd\034\uffdd\035\uffdd\037" +
    "\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\046\uffdd" +
    "\050\uffdd\001\002\000\042\021\uffe0\022\uffe0\023\060\024" +
    "\uffe0\025\063\030\uffe0\034\uffe0\035\uffe0\037\uffe0\040\uffe0" +
    "\041\uffe0\042\uffe0\043\uffe0\044\uffe0\046\uffe0\050\uffe0\001" +
    "\002\000\042\021\uffdc\022\uffdc\023\060\024\uffdc\025\063" +
    "\030\uffdc\034\uffdc\035\uffdc\037\uffdc\040\uffdc\041\uffdc\042" +
    "\uffdc\043\uffdc\044\uffdc\046\uffdc\050\uffdc\001\002\000\042" +
    "\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\030\uffde\034" +
    "\uffde\035\uffde\037\uffde\040\uffde\041\uffde\042\uffde\043\uffde" +
    "\044\uffde\046\uffde\050\uffde\001\002\000\004\060\074\001" +
    "\002\000\042\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5" +
    "\030\uffd5\034\uffd5\035\uffd5\037\uffd5\040\uffd5\041\uffd5\042" +
    "\uffd5\043\uffd5\044\uffd5\046\uffd5\050\uffd5\001\002\000\004" +
    "\060\076\001\002\000\042\021\uffd4\022\uffd4\023\uffd4\024" +
    "\uffd4\025\uffd4\030\uffd4\034\uffd4\035\uffd4\037\uffd4\040\uffd4" +
    "\041\uffd4\042\uffd4\043\uffd4\044\uffd4\046\uffd4\050\uffd4\001" +
    "\002\000\036\004\041\005\031\006\055\007\104\010\034" +
    "\011\042\021\052\022\021\027\023\036\033\054\040\055" +
    "\030\056\050\057\037\001\002\000\006\043\157\044\156" +
    "\001\002\000\006\043\151\044\150\001\002\000\010\030" +
    "\142\034\141\035\143\001\002\000\032\021\062\022\064" +
    "\023\060\024\061\025\063\030\117\037\120\040\122\041" +
    "\115\042\116\043\114\044\121\001\002\000\012\030\106" +
    "\043\107\044\105\045\075\001\002\000\024\004\041\005" +
    "\031\006\055\007\112\021\052\022\021\027\056\054\040" +
    "\055\030\001\002\000\022\021\uff91\030\uff91\034\uff91\035" +
    "\uff91\043\uff91\044\uff91\046\uff91\050\uff91\001\002\000\024" +
    "\004\041\005\031\006\055\007\110\021\052\022\021\027" +
    "\056\054\040\055\030\001\002\000\020\021\uffb5\030\uffb5" +
    "\034\uffb5\035\uffb5\045\075\046\uffb5\050\uffb5\001\002\000" +
    "\026\021\062\022\064\023\060\024\061\025\063\030\uffb8" +
    "\034\uffb8\035\uffb8\046\uffb8\050\uffb8\001\002\000\020\021" +
    "\uffb4\030\uffb4\034\uffb4\035\uffb4\045\075\046\uffb4\050\uffb4" +
    "\001\002\000\026\021\062\022\064\023\060\024\061\025" +
    "\063\030\uffb6\034\uffb6\035\uffb6\046\uffb6\050\uffb6\001\002" +
    "\000\032\004\041\005\031\006\055\007\134\010\136\011" +
    "\140\021\052\022\021\027\056\054\040\055\030\057\037" +
    "\001\002\000\024\004\041\005\031\006\055\007\053\021" +
    "\052\022\021\027\056\054\040\055\030\001\002\000\024" +
    "\004\041\005\031\006\055\007\053\021\052\022\021\027" +
    "\056\054\040\055\030\001\002\000\022\021\uff93\030\uff93" +
    "\034\uff93\035\uff93\043\uff93\044\uff93\046\uff93\050\uff93\001" +
    "\002\000\024\004\041\005\031\006\055\007\053\021\052" +
    "\022\021\027\056\054\040\055\030\001\002\000\032\004" +
    "\041\005\031\006\055\007\124\010\126\011\130\021\052" +
    "\022\021\027\056\054\040\055\030\057\037\001\002\000" +
    "\024\004\041\005\031\006\055\007\053\021\052\022\021" +
    "\027\056\054\040\055\030\001\002\000\026\021\062\022" +
    "\064\023\060\024\061\025\063\030\uffce\034\uffce\035\uffce" +
    "\046\uffce\050\uffce\001\002\000\020\021\uffb7\030\uffb7\034" +
    "\uffb7\035\uffb7\045\075\046\uffb7\050\uffb7\001\002\000\016" +
    "\021\uffa4\030\uffa4\034\uffa4\035\uffa4\046\uffa4\050\uffa4\001" +
    "\002\000\016\021\uffbf\030\uffbf\034\uffbf\035\uffbf\046\uffbf" +
    "\050\uffbf\001\002\000\026\021\062\022\064\023\060\024" +
    "\061\025\063\030\uffcc\034\uffcc\035\uffcc\046\uffcc\050\uffcc" +
    "\001\002\000\016\021\uffbd\030\uffbd\034\uffbd\035\uffbd\046" +
    "\uffbd\050\uffbd\001\002\000\026\021\062\022\064\023\060" +
    "\024\061\025\063\030\uffcf\034\uffcf\035\uffcf\046\uffcf\050" +
    "\uffcf\001\002\000\026\021\062\022\064\023\060\024\061" +
    "\025\063\030\uffd0\034\uffd0\035\uffd0\046\uffd0\050\uffd0\001" +
    "\002\000\026\021\062\022\064\023\060\024\061\025\063" +
    "\030\uffd1\034\uffd1\035\uffd1\046\uffd1\050\uffd1\001\002\000" +
    "\020\021\uffb9\030\uffb9\034\uffb9\035\uffb9\045\075\046\uffb9" +
    "\050\uffb9\001\002\000\016\021\uffa5\030\uffa5\034\uffa5\035" +
    "\uffa5\046\uffa5\050\uffa5\001\002\000\016\021\uffc7\030\uffc7" +
    "\034\uffc7\035\uffc7\046\uffc7\050\uffc7\001\002\000\026\021" +
    "\062\022\064\023\060\024\061\025\063\030\uffcd\034\uffcd" +
    "\035\uffcd\046\uffcd\050\uffcd\001\002\000\016\021\uffc5\030" +
    "\uffc5\034\uffc5\035\uffc5\046\uffc5\050\uffc5\001\002\000\036" +
    "\004\041\005\031\006\055\007\146\010\034\011\042\021" +
    "\052\022\021\027\023\036\033\054\040\055\030\056\050" +
    "\057\037\001\002\000\022\021\uff92\030\uff92\034\uff92\035" +
    "\uff92\043\uff92\044\uff92\046\uff92\050\uff92\001\002\000\036" +
    "\004\041\005\031\006\055\007\146\010\034\011\042\021" +
    "\052\022\021\027\023\036\033\054\040\055\030\056\050" +
    "\057\037\001\002\000\016\021\uffa1\030\uffa1\034\uffa1\035" +
    "\uffa1\046\uffa1\050\uffa1\001\002\000\030\021\062\022\064" +
    "\023\060\024\061\025\063\037\120\040\122\041\115\042" +
    "\116\043\114\044\121\001\002\000\010\043\107\044\105" +
    "\045\075\001\002\000\016\021\uffa2\030\uffa2\034\uffa2\035" +
    "\143\046\uffa2\050\uffa2\001\002\000\026\004\041\005\031" +
    "\006\055\007\053\021\052\022\021\027\056\054\040\055" +
    "\030\057\037\001\002\000\026\004\041\005\031\006\055" +
    "\007\053\021\052\022\021\027\056\054\040\055\030\057" +
    "\037\001\002\000\016\021\uffa9\030\uffa9\034\uffa9\035\uffa9" +
    "\046\uffa9\050\uffa9\001\002\000\026\021\062\022\064\023" +
    "\060\024\061\025\063\030\uffa7\034\uffa7\035\uffa7\046\uffa7" +
    "\050\uffa7\001\002\000\016\021\uffa8\030\uffa8\034\uffa8\035" +
    "\uffa8\046\uffa8\050\uffa8\001\002\000\026\021\062\022\064" +
    "\023\060\024\061\025\063\030\uffa6\034\uffa6\035\uffa6\046" +
    "\uffa6\050\uffa6\001\002\000\010\010\164\011\165\056\050" +
    "\001\002\000\010\010\161\011\162\056\050\001\002\000" +
    "\016\021\uffab\030\uffab\034\uffab\035\uffab\046\uffab\050\uffab" +
    "\001\002\000\016\021\uffb3\030\uffb3\034\uffb3\035\uffb3\046" +
    "\uffb3\050\uffb3\001\002\000\016\021\uffb2\030\uffb2\034\uffb2" +
    "\035\uffb2\046\uffb2\050\uffb2\001\002\000\016\021\uffaa\030" +
    "\uffaa\034\uffaa\035\uffaa\046\uffaa\050\uffaa\001\002\000\016" +
    "\021\uffaf\030\uffaf\034\uffaf\035\uffaf\046\uffaf\050\uffaf\001" +
    "\002\000\016\021\uffae\030\uffae\034\uffae\035\uffae\046\uffae" +
    "\050\uffae\001\002\000\036\004\041\005\031\006\035\007" +
    "\044\010\034\011\042\021\052\022\021\027\023\036\033" +
    "\054\040\055\030\056\050\057\037\001\002\000\004\050" +
    "\170\001\002\000\012\002\uff89\017\uff89\020\uff89\065\uff89" +
    "\001\002\000\006\030\uff88\046\uff88\001\002\000\010\060" +
    "\076\062\200\063\177\001\002\000\036\004\041\005\031" +
    "\006\055\007\176\010\034\011\042\021\052\022\021\027" +
    "\023\036\033\054\040\055\030\056\050\057\037\001\002" +
    "\000\014\030\uff9c\034\141\035\143\046\uff9c\050\uff9c\001" +
    "\002\000\036\021\062\022\064\023\060\024\061\025\063" +
    "\030\uff9a\037\120\040\122\041\115\042\116\043\114\044" +
    "\121\046\uff9a\050\uff9a\001\002\000\016\030\uff9d\043\107" +
    "\044\105\045\075\046\uff9d\050\uff9d\001\002\000\004\027" +
    "\203\001\002\000\004\027\201\001\002\000\004\030\202" +
    "\001\002\000\010\030\uff8c\046\uff8c\050\uff8c\001\002\000" +
    "\004\030\204\001\002\000\010\030\uff8a\046\uff8a\050\uff8a" +
    "\001\002\000\032\004\041\005\031\006\055\007\053\010" +
    "\213\011\215\021\052\022\021\027\056\054\040\055\030" +
    "\056\050\001\002\000\032\004\041\005\031\006\055\007" +
    "\053\010\207\011\211\021\052\022\021\027\056\054\040" +
    "\055\030\056\050\001\002\000\016\021\uffc9\030\uffc9\034" +
    "\uffc9\035\uffc9\046\uffc9\050\uffc9\001\002\000\026\021\062" +
    "\022\064\023\060\024\061\025\063\030\uffc4\034\uffc4\035" +
    "\uffc4\046\uffc4\050\uffc4\001\002\000\016\021\uffc8\030\uffc8" +
    "\034\uffc8\035\uffc8\046\uffc8\050\uffc8\001\002\000\016\021" +
    "\uffb0\030\uffb0\034\uffb0\035\uffb0\046\uffb0\050\uffb0\001\002" +
    "\000\016\021\uffc1\030\uffc1\034\uffc1\035\uffc1\046\uffc1\050" +
    "\uffc1\001\002\000\026\021\062\022\064\023\060\024\061" +
    "\025\063\030\uffbc\034\uffbc\035\uffbc\046\uffbc\050\uffbc\001" +
    "\002\000\016\021\uffc0\030\uffc0\034\uffc0\035\uffc0\046\uffc0" +
    "\050\uffc0\001\002\000\016\021\uffac\030\uffac\034\uffac\035" +
    "\uffac\046\uffac\050\uffac\001\002\000\036\004\041\005\031" +
    "\006\055\007\222\010\034\011\042\021\052\022\021\027" +
    "\023\036\033\054\040\055\030\056\050\057\037\001\002" +
    "\000\010\030\225\034\141\035\143\001\002\000\032\021" +
    "\062\022\064\023\060\024\061\025\063\030\224\037\120" +
    "\040\122\041\115\042\116\043\114\044\121\001\002\000" +
    "\012\030\223\043\107\044\105\045\075\001\002\000\042" +
    "\021\uff97\022\uff97\023\uff97\024\uff97\025\uff97\030\uff97\034" +
    "\uff97\035\uff97\037\uff97\040\uff97\041\uff97\042\uff97\043\uff97" +
    "\044\uff97\046\uff97\050\uff97\001\002\000\042\021\uff99\022" +
    "\uff99\023\uff99\024\uff99\025\uff99\030\uff99\034\uff99\035\uff99" +
    "\037\uff99\040\uff99\041\uff99\042\uff99\043\uff99\044\uff99\046" +
    "\uff99\050\uff99\001\002\000\042\021\uff98\022\uff98\023\uff98" +
    "\024\uff98\025\uff98\030\uff98\034\uff98\035\uff98\037\uff98\040" +
    "\uff98\041\uff98\042\uff98\043\uff98\044\uff98\046\uff98\050\uff98" +
    "\001\002\000\036\004\041\005\031\006\055\007\231\010" +
    "\034\011\042\021\052\022\021\027\023\036\033\054\040" +
    "\055\030\056\050\057\037\001\002\000\010\030\234\034" +
    "\141\035\143\001\002\000\032\021\062\022\064\023\060" +
    "\024\061\025\063\030\233\037\120\040\122\041\115\042" +
    "\116\043\114\044\121\001\002\000\012\030\232\043\107" +
    "\044\105\045\075\001\002\000\022\021\uff8e\030\uff8e\034" +
    "\uff8e\035\uff8e\043\uff8e\044\uff8e\046\uff8e\050\uff8e\001\002" +
    "\000\022\021\uff90\030\uff90\034\uff90\035\uff90\043\uff90\044" +
    "\uff90\046\uff90\050\uff90\001\002\000\022\021\uff8f\030\uff8f" +
    "\034\uff8f\035\uff8f\043\uff8f\044\uff8f\046\uff8f\050\uff8f\001" +
    "\002\000\004\007\236\001\002\000\010\030\uff9b\046\uff9b" +
    "\050\uff9b\001\002\000\010\060\074\062\241\063\240\001" +
    "\002\000\004\027\244\001\002\000\004\027\242\001\002" +
    "\000\004\030\243\001\002\000\010\030\uff8d\046\uff8d\050" +
    "\uff8d\001\002\000\004\030\245\001\002\000\010\030\uff8b" +
    "\046\uff8b\050\uff8b\001\002\000\032\004\041\005\031\006" +
    "\055\007\053\010\254\011\257\021\052\022\021\027\056" +
    "\054\040\055\030\056\050\001\002\000\032\004\041\005" +
    "\031\006\055\007\053\010\250\011\252\021\052\022\021" +
    "\027\056\054\040\055\030\056\050\001\002\000\016\021" +
    "\uffcb\030\uffcb\034\uffcb\035\uffcb\046\uffcb\050\uffcb\001\002" +
    "\000\026\021\062\022\064\023\060\024\061\025\063\030" +
    "\uffc6\034\uffc6\035\uffc6\046\uffc6\050\uffc6\001\002\000\016" +
    "\021\uffca\030\uffca\034\uffca\035\uffca\046\uffca\050\uffca\001" +
    "\002\000\016\021\uffb1\030\uffb1\034\uffb1\035\uffb1\046\uffb1" +
    "\050\uffb1\001\002\000\016\021\uffc3\030\uffc3\034\uffc3\035" +
    "\uffc3\046\uffc3\050\uffc3\001\002\000\026\021\062\022\064" +
    "\023\060\024\061\025\063\030\uffbe\034\uffbe\035\uffbe\046" +
    "\uffbe\050\uffbe\001\002\000\016\021\uffad\030\uffad\034\uffad" +
    "\035\uffad\046\uffad\050\uffad\001\002\000\016\021\uffc2\030" +
    "\uffc2\034\uffc2\035\uffc2\046\uffc2\050\uffc2\001\002\000\016" +
    "\021\uffa0\030\uffa0\034\uffa0\035\uffa0\046\uffa0\050\uffa0\001" +
    "\002\000\036\004\041\005\031\006\055\007\264\010\034" +
    "\011\042\021\052\022\021\027\023\036\033\054\040\055" +
    "\030\056\050\057\037\001\002\000\010\030\267\034\141" +
    "\035\143\001\002\000\032\021\062\022\064\023\060\024" +
    "\061\025\063\030\266\037\120\040\122\041\115\042\116" +
    "\043\114\044\121\001\002\000\012\030\265\043\107\044" +
    "\105\045\075\001\002\000\042\021\uff94\022\uff94\023\uff94" +
    "\024\uff94\025\uff94\030\uff94\034\uff94\035\uff94\037\uff94\040" +
    "\uff94\041\uff94\042\uff94\043\uff94\044\uff94\046\uff94\050\uff94" +
    "\001\002\000\042\021\uff96\022\uff96\023\uff96\024\uff96\025" +
    "\uff96\030\uff96\034\uff96\035\uff96\037\uff96\040\uff96\041\uff96" +
    "\042\uff96\043\uff96\044\uff96\046\uff96\050\uff96\001\002\000" +
    "\042\021\uff95\022\uff95\023\uff95\024\uff95\025\uff95\030\uff95" +
    "\034\uff95\035\uff95\037\uff95\040\uff95\041\uff95\042\uff95\043" +
    "\uff95\044\uff95\046\uff95\050\uff95\001\002\000\010\030\274" +
    "\034\uff9e\035\uff9e\001\002\000\010\030\273\034\141\035" +
    "\143\001\002\000\032\021\062\022\064\023\060\024\061" +
    "\025\063\030\065\037\120\040\122\041\115\042\116\043" +
    "\114\044\121\001\002\000\016\021\uff9f\030\uff9f\034\uff9f" +
    "\035\uff9f\046\uff9f\050\uff9f\001\002\000\016\021\uffa3\030" +
    "\uffa3\034\uffa3\035\uffa3\046\uffa3\050\uffa3\001\002\000\042" +
    "\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\030\uffe2\034" +
    "\uffe2\035\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2" +
    "\044\uffe2\046\uffe2\050\uffe2\001\002\000\006\046\ufff6\050" +
    "\ufff6\001\002\000\006\046\325\050\326\001\002\000\006" +
    "\033\301\047\302\001\002\000\036\004\041\005\031\006" +
    "\035\007\321\010\034\011\042\021\052\022\021\027\023" +
    "\036\033\054\040\055\030\056\050\057\037\001\002\000" +
    "\014\012\304\013\306\014\303\015\310\016\307\001\002" +
    "\000\010\033\uffee\046\uffee\050\uffee\001\002\000\010\033" +
    "\ufff0\046\ufff0\050\ufff0\001\002\000\010\033\311\046\ufff3" +
    "\050\ufff3\001\002\000\010\033\uffef\046\uffef\050\uffef\001" +
    "\002\000\010\033\uffec\046\uffec\050\uffec\001\002\000\010" +
    "\033\uffed\046\uffed\050\uffed\001\002\000\036\004\041\005" +
    "\031\006\035\007\321\010\034\011\042\021\052\022\021" +
    "\027\023\036\033\054\040\055\030\056\050\057\037\001" +
    "\002\000\006\046\uffe4\050\uffe4\001\002\000\012\043\157" +
    "\044\156\046\uffe6\050\uffe6\001\002\000\012\043\151\044" +
    "\150\046\uffe5\050\uffe5\001\002\000\006\046\uffeb\050\uffeb" +
    "\001\002\000\006\046\ufff5\050\ufff5\001\002\000\014\021" +
    "\235\034\141\035\143\046\uffe8\050\uffe8\001\002\000\034" +
    "\021\062\022\064\023\060\024\061\025\063\037\120\040" +
    "\122\041\115\042\116\043\114\044\121\046\uffea\050\uffea" +
    "\001\002\000\016\021\173\043\107\044\105\045\172\046" +
    "\uffe9\050\uffe9\001\002\000\006\046\uffe3\050\uffe3\001\002" +
    "\000\006\046\uffe7\050\uffe7\001\002\000\006\046\ufff4\050" +
    "\ufff4\001\002\000\004\006\300\001\002\000\012\002\ufff8" +
    "\017\ufff8\020\ufff8\065\ufff8\001\002\000\006\046\ufff7\050" +
    "\ufff7\001\002\000\012\002\ufffe\017\ufffe\020\ufffe\065\ufffe" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\327\000\020\002\005\003\012\004\006\005\010\010" +
    "\011\011\013\033\004\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\005\327\010\011\011" +
    "\013\033\004\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\276\013" +
    "\275\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\016\042\022\025\023\035\024\046\025" +
    "\026\026\031\027\023\030\024\031\021\032\045\034\044" +
    "\035\050\001\001\000\010\016\274\025\026\026\031\001" +
    "\001\000\002\001\001\000\020\016\271\022\267\023\270" +
    "\025\026\026\031\027\077\030\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\016\144\022\025\023\257\025\026\026\031\027\077" +
    "\030\100\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\016\053\025" +
    "\026\026\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\016\056\025\026\026\031\001" +
    "\001\000\002\001\001\000\010\016\071\025\026\026\031" +
    "\001\001\000\010\016\070\025\026\026\031\001\001\000" +
    "\010\016\067\025\026\026\031\001\001\000\010\016\066" +
    "\025\026\026\031\001\001\000\010\016\065\025\026\026" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\016\102\022\025\023\101\025" +
    "\026\026\031\027\077\030\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\016\112\025\026\026\031\001\001" +
    "\000\002\001\001\000\010\016\110\025\026\026\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\016\136\025\026\026\031\030" +
    "\134\001\001\000\010\016\132\025\026\026\031\001\001" +
    "\000\010\016\131\025\026\026\031\001\001\000\002\001" +
    "\001\000\010\016\130\025\026\026\031\001\001\000\012" +
    "\016\126\025\026\026\031\030\124\001\001\000\010\016" +
    "\122\025\026\026\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\016\144\022\025\023\146\025\026\026\031\027\077\030" +
    "\100\001\001\000\002\001\001\000\020\016\144\022\025" +
    "\023\143\025\026\026\031\027\077\030\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\016\154\025\026\026\031\030\153\001" +
    "\001\000\012\016\152\025\026\026\031\030\151\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\162\001\001\000\004\027\157" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\016\042\022\025\023\035\024\046\025\026\026" +
    "\031\027\023\030\024\031\021\032\045\035\170\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\016\174\022\025\023\173\025\026" +
    "\026\031\027\077\030\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\016\213\025\026\026\031" +
    "\027\215\001\001\000\012\016\207\025\026\026\031\027" +
    "\211\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\016\220" +
    "\022\025\023\217\025\026\026\031\027\077\030\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\016\227\022\025\023\226\025\026\026\031\027\077" +
    "\030\100\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\016\254\025\026\026\031\027\255\001\001\000\012" +
    "\016\250\025\026\026\031\027\252\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\016\262\022\025" +
    "\023\261\025\026\026\031\027\077\030\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\006\314\015\323" +
    "\016\317\022\025\023\316\024\322\025\026\026\031\027" +
    "\312\030\313\031\311\032\321\001\001\000\004\014\304" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\006\314\015\315\016\317\022\025\023\316\024" +
    "\322\025\026\026\031\027\312\030\313\031\311\032\321" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\326\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public Parser(Lexer lexer) {
        super(lexer);
    }

    //Metodo llamado automaticamente al encontrar error sintanctico


    public void syntax_error(Symbol s){

    String lexema = s.value.toString();
    int fila = s.right;
    int columna = s.left;
    
    System.out.println("Error Sintactico hallado");
    System.out.println("Lexema " + lexema + " linea"  + fila + " columna " + columna);

    }

    //Metodo llamado cuando no se puede recuperar de un error
    
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        
    String lexema = s.value.toString();
    int fila = s.right;
    int columna = s.left;
    
    System.out.println("Error Sintactico hallado PANIC MODE");
    System.out.println("Lexema " + lexema + " linea"  + fila + " columna " + columna);
        
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= ts 
            {
              Object RESULT =null;
		 System.out.println("Doc ok"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ts ::= instrucciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ts",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instrucciones opciones_instrucciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instrucciones ::= opciones_instrucciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // opciones_instrucciones ::= declaracion_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // opciones_instrucciones ::= funcion_console_log 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // dentro_bloque ::= incremento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dentro_bloque",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // dentro_bloque ::= decremento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dentro_bloque",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion_variable ::= tipo_acceso_variable id_valor_variable_lista PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_variable",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // id_valor_variable_lista ::= id_valor_variable_lista COMA id_valor_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_valor_variable_lista",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // id_valor_variable_lista ::= id_valor_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_valor_variable_lista",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // id_valor_variable ::= ID DOS_PUNTOS tipo_dato_variable ASIGNACION variable_valor 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tipoDatoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tipoDatoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object tipoDato = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println(id + " " + tipoDato + " " + valor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_valor_variable",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // id_valor_variable ::= ID ASIGNACION variable_valor 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println(id + " " + valor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_valor_variable",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // id_valor_variable ::= ID DOS_PUNTOS tipo_dato_variable 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tipoDatoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tipoDatoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tipoDato = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println(id + " " + tipoDato + " " + " undefined"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_valor_variable",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo_acceso_variable ::= RCONST 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_acceso_variable",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo_acceso_variable ::= RLET 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_acceso_variable",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo_dato_variable ::= RNUMBER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato_variable",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo_dato_variable ::= RBIGINT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato_variable",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo_dato_variable ::= RSTRING 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato_variable",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo_dato_variable ::= RBOOLEAN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato_variable",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipo_dato_variable ::= RVOID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato_variable",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // variable_valor ::= instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_valor",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruccion ::= operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruccion ::= TEXTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instruccion ::= operaciones_logicas 
            {
              Object RESULT =null;
		 RESULT = "operacion logica"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruccion ::= concatenacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruccion ::= funcion_boolean 
            {
              Object RESULT =null;
		 System.out.println("funcion booelan"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instruccion ::= funcion_string 
            {
              Object RESULT =null;
		 System.out.println("funcion string"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instruccion ::= funcion_to_lower_case 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instruccion ::= funcion_to_upper_case 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operaciones_matematicas ::= MENOS operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operaciones_matematicas ::= MAS operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operaciones_matematicas ::= operaciones_matematicas MAS operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // operaciones_matematicas ::= operaciones_matematicas MENOS operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // operaciones_matematicas ::= operaciones_matematicas MULTIPLICACION operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // operaciones_matematicas ::= operaciones_matematicas DIVISION operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // operaciones_matematicas ::= operaciones_matematicas MOD operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // operaciones_matematicas ::= PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operaciones_matematicas ::= NUMBER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operaciones_matematicas ::= BIGINT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // operaciones_matematicas ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operaciones_matematicas ::= funcion_number 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operaciones_matematicas ::= funcion_bigint 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operaciones_matematicas ::= ID PUNTO LENGTH 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operaciones_matematicas ::= TEXTO PUNTO LENGTH 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // incremento ::= ID MAS MAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // decremento ::= ID MENOS MENOS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decremento",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // operaciones_relacionales ::= operaciones_matematicas MAYOR_QUE operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // operaciones_relacionales ::= operaciones_matematicas MAYOR_IGUAL operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // operaciones_relacionales ::= operaciones_matematicas MENOR_QUE operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // operaciones_relacionales ::= operaciones_matematicas MENOR_IGUAL operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // operaciones_relacionales ::= operaciones_matematicas COMPARACION operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // operaciones_relacionales ::= operaciones_matematicas DISTINTO operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // operaciones_relacionales ::= TRUE COMPARACION TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // operaciones_relacionales ::= TRUE COMPARACION FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // operaciones_relacionales ::= FALSE COMPARACION TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // operaciones_relacionales ::= FALSE COMPARACION FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // operaciones_relacionales ::= operaciones_matematicas COMPARACION TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // operaciones_relacionales ::= TRUE COMPARACION operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // operaciones_relacionales ::= operaciones_matematicas COMPARACION FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // operaciones_relacionales ::= FALSE COMPARACION operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // operaciones_relacionales ::= TRUE DISTINTO TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // operaciones_relacionales ::= TRUE DISTINTO FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // operaciones_relacionales ::= FALSE DISTINTO TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // operaciones_relacionales ::= FALSE DISTINTO FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // operaciones_relacionales ::= operaciones_matematicas DISTINTO TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // operaciones_relacionales ::= TRUE DISTINTO operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // operaciones_relacionales ::= operaciones_matematicas DISTINTO FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // operaciones_relacionales ::= FALSE DISTINTO operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // operaciones_relacionales ::= TRUE 
            {
              Object RESULT =null;
		 RESULT = "true"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // operaciones_relacionales ::= FALSE 
            {
              Object RESULT =null;
		 RESULT = "false"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // operaciones_relacionales ::= operaciones_matematicas COMPARACION TEXTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // operaciones_relacionales ::= TEXTO COMPARACION operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // operaciones_relacionales ::= operaciones_matematicas DISTINTO TEXTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // operaciones_relacionales ::= TEXTO DISTINTO operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // operaciones_relacionales ::= TEXTO COMPARACION TEXTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // operaciones_relacionales ::= TEXTO DISTINTO TEXTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // operaciones_relacionales ::= funcion_boolean COMPARACION TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // operaciones_relacionales ::= funcion_boolean COMPARACION FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // operaciones_relacionales ::= TRUE COMPARACION funcion_boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // operaciones_relacionales ::= FALSE COMPARACION funcion_boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // operaciones_relacionales ::= funcion_boolean DISTINTO TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // operaciones_relacionales ::= funcion_boolean DISTINTO FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // operaciones_relacionales ::= TRUE DISTINTO funcion_boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // operaciones_relacionales ::= FALSE DISTINTO funcion_boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // operaciones_relacionales ::= funcion_boolean COMPARACION funcion_boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // operaciones_relacionales ::= funcion_boolean DISTINTO funcion_boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // operaciones_relacionales ::= funcion_string COMPARACION funcion_string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // operaciones_relacionales ::= funcion_string DISTINTO funcion_string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // operaciones_relacionales ::= funcion_string COMPARACION operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // operaciones_relacionales ::= funcion_string DISTINTO operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // operaciones_relacionales ::= operaciones_matematicas COMPARACION funcion_string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // operaciones_relacionales ::= operaciones_matematicas DISTINTO funcion_string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // operaciones_relacionales ::= PARENTESIS_ABIERTO operaciones_relacionales PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // operaciones_logicas ::= operaciones_logicas AND operaciones_logicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // operaciones_logicas ::= operaciones_logicas OR operaciones_logicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // operaciones_logicas ::= NOT operaciones_logicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // operaciones_logicas ::= PARENTESIS_ABIERTO operaciones_logicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // operaciones_logicas ::= operaciones_relacionales 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // concatenacion ::= TEXTO MAS TEXTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("concatenacion",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // concatenacion ::= TEXTO MAS operaciones_logicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("concatenacion",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // concatenacion ::= operaciones_logicas MAS TEXTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("concatenacion",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // concatenacion ::= TEXTO MAS operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("concatenacion",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // funcion_number ::= FNUMBER PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_number",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // funcion_number ::= FNUMBER PARENTESIS_ABIERTO operaciones_logicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_number",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // funcion_number ::= FNUMBER PARENTESIS_ABIERTO TEXTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_number",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // funcion_bigint ::= FBIGINT PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_bigint",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // funcion_bigint ::= FBIGINT PARENTESIS_ABIERTO operaciones_logicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_bigint",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // funcion_bigint ::= FBIGINT PARENTESIS_ABIERTO TEXTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_bigint",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // funcion_boolean ::= FBOOLEAN PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_boolean",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // funcion_boolean ::= FBOOLEAN PARENTESIS_ABIERTO operaciones_logicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_boolean",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // funcion_boolean ::= FBOOLEAN PARENTESIS_ABIERTO TEXTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_boolean",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // funcion_string ::= FSTRING PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_string",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // funcion_string ::= FSTRING PARENTESIS_ABIERTO operaciones_logicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_string",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // funcion_string ::= FSTRING PARENTESIS_ABIERTO TEXTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_string",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // funcion_to_lower_case ::= ID PUNTO TOLOWERCASE PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_to_lower_case",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // funcion_to_lower_case ::= TEXTO PUNTO TOLOWERCASE PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_to_lower_case",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // funcion_to_upper_case ::= ID PUNTO TOUPPERCASE PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_to_upper_case",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // funcion_to_upper_case ::= TEXTO PUNTO TOUPPERCASE PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_to_upper_case",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // funcion_console_log ::= CONSOLE PUNTO LOG PARENTESIS_ABIERTO lista_instrucciones_console PARENTESIS_CERRADO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_console_log",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // lista_instrucciones_console ::= lista_instrucciones_console COMA instrucciones_console 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instrucciones_console",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // lista_instrucciones_console ::= instrucciones_console 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instrucciones_console",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // instrucciones_console ::= operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_console",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // instrucciones_console ::= TEXTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_console",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // instrucciones_console ::= operaciones_logicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_console",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // instrucciones_console ::= concatenacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_console",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // instrucciones_console ::= funcion_boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_console",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // instrucciones_console ::= funcion_string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_console",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // instrucciones_console ::= funcion_to_lower_case 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_console",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // instrucciones_console ::= funcion_to_upper_case 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_console",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
