
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.peter.typesecure.parser;

import com.peter.typesecure.lexer.Lexer;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\262\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\004\004\000\002\004\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\045\003\000\002\045" +
    "\003\000\002\045\003\000\002\045\003\000\002\045\003" +
    "\000\002\045\003\000\002\045\003\000\002\045\003\000" +
    "\002\015\006\000\002\007\005\000\002\011\005\000\002" +
    "\011\003\000\002\012\007\000\002\012\005\000\002\012" +
    "\005\000\002\010\003\000\002\010\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\014\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\016\004\000\002\016\004\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\017\010\000\002\017\010\000\002\017\010\000\002" +
    "\017\010\000\002\017\010\000\002\017\010\000\002\017" +
    "\010\000\002\017\012\000\002\017\010\000\002\017\010" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\020\005\000\002\021\005\000\002\022\005\000\002" +
    "\022\005\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\005\000\002\022\005" +
    "\000\002\022\005\000\002\022\005\000\002\022\005\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\022\005\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\005\000\002\022\005" +
    "\000\002\022\005\000\002\022\003\000\002\022\003\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\022\005\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\005\000\002\022\005" +
    "\000\002\022\005\000\002\022\005\000\002\022\005\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\022\005\000\002\023\005\000\002\023\005\000\002\023" +
    "\004\000\002\023\005\000\002\023\003\000\002\024\005" +
    "\000\002\024\005\000\002\024\005\000\002\025\006\000" +
    "\002\025\006\000\002\025\006\000\002\026\006\000\002" +
    "\026\006\000\002\026\006\000\002\027\006\000\002\027" +
    "\006\000\002\027\006\000\002\030\006\000\002\030\006" +
    "\000\002\030\006\000\002\031\010\000\002\031\010\000" +
    "\002\035\010\000\002\035\010\000\002\035\010\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\032\007\000\002\032\007" +
    "\000\002\032\007\000\002\033\007\000\002\033\007\000" +
    "\002\033\007\000\002\036\011\000\002\037\005\000\002" +
    "\037\003\000\002\040\013\000\002\040\014\000\002\040" +
    "\011\000\002\040\012\000\002\040\013\000\002\040\014" +
    "\000\002\044\004\000\002\044\003\000\002\043\003\000" +
    "\002\043\002\000\002\042\005\000\002\042\003\000\002" +
    "\041\005\000\002\046\005\000\002\046\004\000\002\050" +
    "\005\000\002\050\006\000\002\051\006\000\002\051\007" +
    "\000\002\047\011\000\002\052\004\000\002\053\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0164\000\024\006\017\017\023\020\032\053\015\065" +
    "\013\067\016\074\024\075\007\076\011\001\002\000\030" +
    "\002\ufff9\006\ufff9\017\ufff9\020\ufff9\052\ufff9\053\ufff9\065" +
    "\ufff9\067\ufff9\074\ufff9\075\ufff9\076\ufff9\001\002\000\004" +
    "\002\000\001\002\000\026\002\uffff\006\017\017\023\020" +
    "\032\053\015\065\013\067\016\074\024\075\007\076\011" +
    "\001\002\000\004\050\u0166\001\002\000\030\002\ufff8\006" +
    "\ufff8\017\ufff8\020\ufff8\052\ufff8\053\ufff8\065\ufff8\067\ufff8" +
    "\074\ufff8\075\ufff8\076\ufff8\001\002\000\042\004\065\005" +
    "\047\006\056\007\071\010\054\011\067\021\075\022\037" +
    "\027\042\036\051\050\u0164\054\064\055\045\056\074\057" +
    "\062\077\063\001\002\000\004\006\u0159\001\002\000\004" +
    "\045\u014e\001\002\000\030\002\ufffa\006\ufffa\017\ufffa\020" +
    "\ufffa\052\ufffa\053\ufffa\065\ufffa\067\ufffa\074\ufffa\075\ufffa" +
    "\076\ufffa\001\002\000\004\006\u011d\001\002\000\004\027" +
    "\u0115\001\002\000\006\027\036\033\035\001\002\000\030" +
    "\002\ufffb\006\ufffb\017\ufffb\020\ufffb\052\ufffb\053\ufffb\065" +
    "\ufffb\067\ufffb\074\ufffb\075\ufffb\076\ufffb\001\002\000\030" +
    "\002\ufffd\006\ufffd\017\ufffd\020\ufffd\052\ufffd\053\ufffd\065" +
    "\ufffd\067\ufffd\074\ufffd\075\ufffd\076\ufffd\001\002\000\004" +
    "\002\034\001\002\000\004\006\uffe4\001\002\000\004\050" +
    "\033\001\002\000\030\002\ufff5\006\ufff5\017\ufff5\020\ufff5" +
    "\052\ufff5\053\ufff5\065\ufff5\067\ufff5\074\ufff5\075\ufff5\076" +
    "\ufff5\001\002\000\030\002\ufff4\006\ufff4\017\ufff4\020\ufff4" +
    "\052\ufff4\053\ufff4\065\ufff4\067\ufff4\074\ufff4\075\ufff4\076" +
    "\ufff4\001\002\000\030\002\ufffc\006\ufffc\017\ufffc\020\ufffc" +
    "\052\ufffc\053\ufffc\065\ufffc\067\ufffc\074\ufffc\075\ufffc\076" +
    "\ufffc\001\002\000\030\002\ufff6\006\ufff6\017\ufff6\020\ufff6" +
    "\052\ufff6\053\ufff6\065\ufff6\067\ufff6\074\ufff6\075\ufff6\076" +
    "\ufff6\001\002\000\030\002\ufff7\006\ufff7\017\ufff7\020\ufff7" +
    "\052\ufff7\053\ufff7\065\ufff7\067\ufff7\074\ufff7\075\ufff7\076" +
    "\ufff7\001\002\000\004\006\uffe3\001\002\000\030\002\uff51" +
    "\006\uff51\017\uff51\020\uff51\052\uff51\053\uff51\065\uff51\067" +
    "\uff51\074\uff51\075\uff51\076\uff51\001\002\000\004\002\001" +
    "\001\002\000\040\004\065\005\047\006\056\007\071\010" +
    "\054\011\067\021\075\022\037\027\042\036\051\054\064" +
    "\055\045\056\074\057\062\077\063\001\002\000\042\004" +
    "\065\005\047\006\056\007\071\010\054\011\067\021\075" +
    "\022\037\027\042\030\061\036\051\054\064\055\045\056" +
    "\074\057\062\077\063\001\002\000\030\004\065\005\047" +
    "\006\103\007\071\021\075\022\037\027\100\054\064\055" +
    "\045\057\062\077\063\001\002\000\012\030\uffd8\045\uff71" +
    "\046\uffd8\050\uffd8\001\002\000\014\030\uff88\034\uff88\035" +
    "\uff88\046\uff88\050\uff88\001\002\000\040\004\065\005\047" +
    "\006\103\007\071\010\054\011\067\021\075\022\037\027" +
    "\042\036\051\054\064\055\045\056\074\057\062\077\063" +
    "\001\002\000\014\030\uffdb\043\232\044\231\046\uffdb\050" +
    "\uffdb\001\002\000\016\030\uffda\043\224\044\223\045\uff73" +
    "\046\uffda\050\uffda\001\002\000\004\027\u0105\001\002\000" +
    "\042\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\030\uffcc" +
    "\034\uffcc\035\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043" +
    "\uffcc\044\uffcc\046\uffcc\050\uffcc\001\002\000\042\021\uffc7" +
    "\022\uffc7\023\uffc7\024\uffc7\025\uffc7\030\uffc7\034\uffc7\035" +
    "\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7" +
    "\046\uffc7\050\uffc7\001\002\000\042\021\uffcb\022\uffcb\023" +
    "\uffcb\024\uffcb\025\uffcb\030\uffcb\034\uffcb\035\uffcb\037\uffcb" +
    "\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\046\uffcb\050" +
    "\uffcb\001\002\000\040\004\065\005\047\006\103\007\071" +
    "\010\054\011\067\021\075\022\037\027\042\036\051\054" +
    "\064\055\045\056\074\057\062\077\063\001\002\000\042" +
    "\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca\030\uffca\034" +
    "\uffca\035\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca" +
    "\044\uffca\046\uffca\050\uffca\001\002\000\004\030\u0102\001" +
    "\002\000\020\030\uff9f\034\uff9f\035\uff9f\043\371\044\370" +
    "\046\uff9f\050\uff9f\001\002\000\012\030\uffd6\045\uff6f\046" +
    "\uffd6\050\uffd6\001\002\000\042\021\uffc6\022\uffc6\023\uffc6" +
    "\024\uffc6\025\uffc6\027\364\030\uffc6\037\uffc6\040\uffc6\041" +
    "\uffc6\042\uffc6\043\uffc6\044\uffc6\045\121\046\uffc6\050\uffc6" +
    "\001\002\000\010\030\uffd5\046\uffd5\050\uffd5\001\002\000" +
    "\014\030\uffdc\034\215\035\217\046\uffdc\050\uffdc\001\002" +
    "\000\004\050\363\001\002\000\004\027\354\001\002\000" +
    "\004\045\276\001\002\000\004\027\267\001\002\000\042" +
    "\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\030\uffc8\034" +
    "\uffc8\035\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8" +
    "\044\uffc8\046\uffc8\050\uffc8\001\002\000\042\021\uffc9\022" +
    "\uffc9\023\uffc9\024\uffc9\025\uffc9\030\uffc9\034\uffc9\035\uffc9" +
    "\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\046" +
    "\uffc9\050\uffc9\001\002\000\020\030\uff9e\034\uff9e\035\uff9e" +
    "\043\256\044\255\046\uff9e\050\uff9e\001\002\000\036\021" +
    "\111\022\113\023\107\024\110\025\112\030\uffdd\037\176" +
    "\040\200\041\173\042\174\043\172\044\177\046\uffdd\050" +
    "\uffdd\001\002\000\044\021\uffc5\022\uffc5\023\uffc5\024\uffc5" +
    "\025\uffc5\030\uffc5\034\uffc5\035\uffc5\037\uffc5\040\uffc5\041" +
    "\uffc5\042\uffc5\043\uffc5\044\uffc5\045\151\046\uffc5\050\uffc5" +
    "\001\002\000\012\030\uffd7\045\uff70\046\uffd7\050\uffd7\001" +
    "\002\000\004\045\241\001\002\000\004\027\143\001\002" +
    "\000\030\004\065\005\047\006\103\007\071\021\075\022" +
    "\037\027\100\054\064\055\045\057\062\077\063\001\002" +
    "\000\012\030\uffd9\045\uff72\046\uffd9\050\uffd9\001\002\000" +
    "\004\045\uff71\001\002\000\030\004\065\005\047\006\103" +
    "\007\071\021\075\022\037\027\100\054\064\055\045\057" +
    "\062\077\063\001\002\000\004\045\uff73\001\002\000\004" +
    "\045\uff6f\001\002\000\044\021\uffc6\022\uffc6\023\uffc6\024" +
    "\uffc6\025\uffc6\030\uffc6\034\uffc6\035\uffc6\037\uffc6\040\uffc6" +
    "\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045\121\046\uffc6\050" +
    "\uffc6\001\002\000\042\021\uffd3\022\uffd3\023\uffd3\024\uffd3" +
    "\025\uffd3\030\uffd3\034\uffd3\035\uffd3\037\uffd3\040\uffd3\041" +
    "\uffd3\042\uffd3\043\uffd3\044\uffd3\046\uffd3\050\uffd3\001\002" +
    "\000\004\045\uff70\001\002\000\004\045\uff72\001\002\000" +
    "\030\004\065\005\047\006\103\007\071\021\075\022\037" +
    "\027\100\054\064\055\045\057\062\077\063\001\002\000" +
    "\030\004\065\005\047\006\103\007\071\021\075\022\037" +
    "\027\100\054\064\055\045\057\062\077\063\001\002\000" +
    "\030\004\065\005\047\006\103\007\071\021\075\022\037" +
    "\027\100\054\064\055\045\057\062\077\063\001\002\000" +
    "\030\004\065\005\047\006\103\007\071\021\075\022\037" +
    "\027\100\054\064\055\045\057\062\077\063\001\002\000" +
    "\030\004\065\005\047\006\103\007\071\021\075\022\037" +
    "\027\100\054\064\055\045\057\062\077\063\001\002\000" +
    "\042\021\uffd1\022\uffd1\023\107\024\uffd1\025\112\030\uffd1" +
    "\034\uffd1\035\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043" +
    "\uffd1\044\uffd1\046\uffd1\050\uffd1\001\002\000\042\021\uffcf" +
    "\022\uffcf\023\uffcf\024\uffcf\025\uffcf\030\uffcf\034\uffcf\035" +
    "\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf" +
    "\046\uffcf\050\uffcf\001\002\000\042\021\uffd2\022\uffd2\023" +
    "\107\024\uffd2\025\112\030\uffd2\034\uffd2\035\uffd2\037\uffd2" +
    "\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\046\uffd2\050" +
    "\uffd2\001\002\000\042\021\uffce\022\uffce\023\107\024\uffce" +
    "\025\112\030\uffce\034\uffce\035\uffce\037\uffce\040\uffce\041" +
    "\uffce\042\uffce\043\uffce\044\uffce\046\uffce\050\uffce\001\002" +
    "\000\042\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\030" +
    "\uffd0\034\uffd0\035\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0" +
    "\043\uffd0\044\uffd0\046\uffd0\050\uffd0\001\002\000\014\060" +
    "\124\061\126\062\125\063\122\064\123\001\002\000\004" +
    "\027\137\001\002\000\004\027\134\001\002\000\042\021" +
    "\uff86\022\uff86\023\uff86\024\uff86\025\uff86\030\uff86\034\uff86" +
    "\035\uff86\037\uff86\040\uff86\041\uff86\042\uff86\043\uff86\044" +
    "\uff86\046\uff86\050\uff86\001\002\000\004\027\132\001\002" +
    "\000\004\027\127\001\002\000\030\004\065\005\047\006" +
    "\103\007\071\021\075\022\037\027\100\054\064\055\045" +
    "\057\062\077\063\001\002\000\016\021\111\022\113\023" +
    "\107\024\110\025\112\030\131\001\002\000\012\030\uff78" +
    "\045\uff78\046\uff78\050\uff78\001\002\000\004\030\133\001" +
    "\002\000\012\030\uff6e\045\uff6e\046\uff6e\050\uff6e\001\002" +
    "\000\040\004\065\005\047\006\056\007\071\010\054\011" +
    "\067\021\075\022\037\027\042\036\051\054\064\055\045" +
    "\056\074\057\062\077\063\001\002\000\004\030\136\001" +
    "\002\000\012\030\uff74\045\uff74\046\uff74\050\uff74\001\002" +
    "\000\004\030\140\001\002\000\012\030\uff6b\045\uff6b\046" +
    "\uff6b\050\uff6b\001\002\000\016\021\111\022\113\023\107" +
    "\024\110\025\112\030\142\001\002\000\042\021\uffcd\022" +
    "\uffcd\023\uffcd\024\uffcd\025\uffcd\030\uffcd\034\uffcd\035\uffcd" +
    "\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\046" +
    "\uffcd\050\uffcd\001\002\000\040\004\065\005\047\006\103" +
    "\007\150\010\054\011\067\021\075\022\037\027\042\036" +
    "\051\054\064\055\045\056\074\057\062\077\063\001\002" +
    "\000\006\043\232\044\231\001\002\000\010\043\224\044" +
    "\223\045\uff73\001\002\000\010\030\216\034\215\035\217" +
    "\001\002\000\032\021\111\022\113\023\107\024\110\025" +
    "\112\030\175\037\176\040\200\041\173\042\174\043\172" +
    "\044\177\001\002\000\034\021\uffc5\022\uffc5\023\uffc5\024" +
    "\uffc5\025\uffc5\030\152\037\uffc5\040\uffc5\041\uffc5\042\uffc5" +
    "\043\uffc5\044\uffc5\045\151\001\002\000\014\060\155\061" +
    "\157\062\156\063\153\064\154\001\002\000\020\030\uff7c" +
    "\034\uff7c\035\uff7c\043\uff7c\044\uff7c\046\uff7c\050\uff7c\001" +
    "\002\000\004\027\170\001\002\000\004\027\165\001\002" +
    "\000\042\021\uff87\022\uff87\023\uff87\024\uff87\025\uff87\030" +
    "\uff87\034\uff87\035\uff87\037\uff87\040\uff87\041\uff87\042\uff87" +
    "\043\uff87\044\uff87\046\uff87\050\uff87\001\002\000\004\027" +
    "\163\001\002\000\004\027\160\001\002\000\030\004\065" +
    "\005\047\006\103\007\071\021\075\022\037\027\100\054" +
    "\064\055\045\057\062\077\063\001\002\000\016\021\111" +
    "\022\113\023\107\024\110\025\112\030\162\001\002\000" +
    "\012\030\uff77\045\uff77\046\uff77\050\uff77\001\002\000\004" +
    "\030\164\001\002\000\012\030\uff6d\045\uff6d\046\uff6d\050" +
    "\uff6d\001\002\000\040\004\065\005\047\006\056\007\071" +
    "\010\054\011\067\021\075\022\037\027\042\036\051\054" +
    "\064\055\045\056\074\057\062\077\063\001\002\000\004" +
    "\030\167\001\002\000\012\030\uff75\045\uff75\046\uff75\050" +
    "\uff75\001\002\000\004\030\171\001\002\000\012\030\uff6a" +
    "\045\uff6a\046\uff6a\050\uff6a\001\002\000\034\004\065\005" +
    "\047\006\103\007\071\010\212\011\213\021\075\022\037" +
    "\027\100\054\064\055\045\057\062\077\063\001\002\000" +
    "\030\004\065\005\047\006\103\007\071\021\075\022\037" +
    "\027\100\054\064\055\045\057\062\077\063\001\002\000" +
    "\030\004\065\005\047\006\103\007\071\021\075\022\037" +
    "\027\100\054\064\055\045\057\062\077\063\001\002\000" +
    "\020\030\uff7e\034\uff7e\035\uff7e\043\uff7e\044\uff7e\046\uff7e" +
    "\050\uff7e\001\002\000\030\004\065\005\047\006\103\007" +
    "\071\021\075\022\037\027\100\054\064\055\045\057\062" +
    "\077\063\001\002\000\034\004\065\005\047\006\103\007" +
    "\071\010\203\011\204\021\075\022\037\027\100\054\064" +
    "\055\045\057\062\077\063\001\002\000\030\004\065\005" +
    "\047\006\103\007\071\021\075\022\037\027\100\054\064" +
    "\055\045\057\062\077\063\001\002\000\026\021\111\022" +
    "\113\023\107\024\110\025\112\030\uffb2\034\uffb2\035\uffb2" +
    "\046\uffb2\050\uffb2\001\002\000\016\030\uff8e\034\uff8e\035" +
    "\uff8e\045\uff73\046\uff8e\050\uff8e\001\002\000\014\030\uffa3" +
    "\034\uffa3\035\uffa3\046\uffa3\050\uffa3\001\002\000\014\030" +
    "\uffa1\034\uffa1\035\uffa1\046\uffa1\050\uffa1\001\002\000\026" +
    "\021\111\022\113\023\107\024\110\025\112\030\uffb0\034" +
    "\uffb0\035\uffb0\046\uffb0\050\uffb0\001\002\000\026\021\111" +
    "\022\113\023\107\024\110\025\112\030\uffb3\034\uffb3\035" +
    "\uffb3\046\uffb3\050\uffb3\001\002\000\026\021\111\022\113" +
    "\023\107\024\110\025\112\030\uffb4\034\uffb4\035\uffb4\046" +
    "\uffb4\050\uffb4\001\002\000\026\021\111\022\113\023\107" +
    "\024\110\025\112\030\uffb5\034\uffb5\035\uffb5\046\uffb5\050" +
    "\uffb5\001\002\000\016\030\uff8f\034\uff8f\035\uff8f\045\uff73" +
    "\046\uff8f\050\uff8f\001\002\000\014\030\uffab\034\uffab\035" +
    "\uffab\046\uffab\050\uffab\001\002\000\014\030\uffa9\034\uffa9" +
    "\035\uffa9\046\uffa9\050\uffa9\001\002\000\026\021\111\022" +
    "\113\023\107\024\110\025\112\030\uffb1\034\uffb1\035\uffb1" +
    "\046\uffb1\050\uffb1\001\002\000\040\004\065\005\047\006" +
    "\103\007\071\010\054\011\067\021\075\022\037\027\042" +
    "\036\051\054\064\055\045\056\074\057\062\077\063\001" +
    "\002\000\020\030\uff7d\034\uff7d\035\uff7d\043\uff7d\044\uff7d" +
    "\046\uff7d\050\uff7d\001\002\000\040\004\065\005\047\006" +
    "\103\007\071\010\054\011\067\021\075\022\037\027\042" +
    "\036\051\054\064\055\045\056\074\057\062\077\063\001" +
    "\002\000\014\030\uff8b\034\uff8b\035\uff8b\046\uff8b\050\uff8b" +
    "\001\002\000\030\021\111\022\113\023\107\024\110\025" +
    "\112\037\176\040\200\041\173\042\174\043\172\044\177" +
    "\001\002\000\014\030\uff8c\034\uff8c\035\217\046\uff8c\050" +
    "\uff8c\001\002\000\030\004\065\005\047\006\103\007\071" +
    "\021\075\022\037\027\100\054\064\055\045\057\062\077" +
    "\063\001\002\000\030\004\065\005\047\006\103\007\071" +
    "\021\075\022\037\027\100\054\064\055\045\057\062\077" +
    "\063\001\002\000\016\030\uff93\034\uff93\035\uff93\045\uff73" +
    "\046\uff93\050\uff93\001\002\000\026\021\111\022\113\023" +
    "\107\024\110\025\112\030\uff91\034\uff91\035\uff91\046\uff91" +
    "\050\uff91\001\002\000\016\030\uff92\034\uff92\035\uff92\045" +
    "\uff73\046\uff92\050\uff92\001\002\000\026\021\111\022\113" +
    "\023\107\024\110\025\112\030\uff90\034\uff90\035\uff90\046" +
    "\uff90\050\uff90\001\002\000\010\010\237\011\240\056\074" +
    "\001\002\000\010\010\234\011\235\056\074\001\002\000" +
    "\014\030\uff95\034\uff95\035\uff95\046\uff95\050\uff95\001\002" +
    "\000\014\030\uff9d\034\uff9d\035\uff9d\046\uff9d\050\uff9d\001" +
    "\002\000\014\030\uff9c\034\uff9c\035\uff9c\046\uff9c\050\uff9c" +
    "\001\002\000\014\030\uff94\034\uff94\035\uff94\046\uff94\050" +
    "\uff94\001\002\000\014\030\uff99\034\uff99\035\uff99\046\uff99" +
    "\050\uff99\001\002\000\014\030\uff98\034\uff98\035\uff98\046" +
    "\uff98\050\uff98\001\002\000\012\060\243\062\245\063\242" +
    "\064\244\001\002\000\004\027\253\001\002\000\042\021" +
    "\uff85\022\uff85\023\uff85\024\uff85\025\uff85\030\uff85\034\uff85" +
    "\035\uff85\037\uff85\040\uff85\041\uff85\042\uff85\043\uff85\044" +
    "\uff85\046\uff85\050\uff85\001\002\000\004\027\250\001\002" +
    "\000\004\027\246\001\002\000\004\030\247\001\002\000" +
    "\012\030\uff6c\045\uff6c\046\uff6c\050\uff6c\001\002\000\040" +
    "\004\065\005\047\006\056\007\071\010\054\011\067\021" +
    "\075\022\037\027\042\036\051\054\064\055\045\056\074" +
    "\057\062\077\063\001\002\000\004\030\252\001\002\000" +
    "\012\030\uff76\045\uff76\046\uff76\050\uff76\001\002\000\004" +
    "\030\254\001\002\000\012\030\uff69\045\uff69\046\uff69\050" +
    "\uff69\001\002\000\036\004\065\005\047\006\103\007\071" +
    "\010\264\011\265\021\075\022\037\027\100\054\064\055" +
    "\045\056\074\057\062\077\063\001\002\000\036\004\065" +
    "\005\047\006\103\007\071\010\260\011\261\021\075\022" +
    "\037\027\100\054\064\055\045\056\074\057\062\077\063" +
    "\001\002\000\014\030\uff9a\034\uff9a\035\uff9a\046\uff9a\050" +
    "\uff9a\001\002\000\014\030\uffad\034\uffad\035\uffad\046\uffad" +
    "\050\uffad\001\002\000\014\030\uffac\034\uffac\035\uffac\046" +
    "\uffac\050\uffac\001\002\000\026\021\111\022\113\023\107" +
    "\024\110\025\112\030\uffa8\034\uffa8\035\uffa8\046\uffa8\050" +
    "\uffa8\001\002\000\014\030\uff96\034\uff96\035\uff96\046\uff96" +
    "\050\uff96\001\002\000\014\030\uffa5\034\uffa5\035\uffa5\046" +
    "\uffa5\050\uffa5\001\002\000\014\030\uffa4\034\uffa4\035\uffa4" +
    "\046\uffa4\050\uffa4\001\002\000\026\021\111\022\113\023" +
    "\107\024\110\025\112\030\uffa0\034\uffa0\035\uffa0\046\uffa0" +
    "\050\uffa0\001\002\000\040\004\065\005\047\006\103\007" +
    "\272\010\054\011\067\021\075\022\037\027\042\036\051" +
    "\054\064\055\045\056\074\057\062\077\063\001\002\000" +
    "\010\030\275\034\215\035\217\001\002\000\032\021\111" +
    "\022\113\023\107\024\110\025\112\030\274\037\176\040" +
    "\200\041\173\042\174\043\172\044\177\001\002\000\034" +
    "\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\030\273\037" +
    "\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\151" +
    "\001\002\000\042\021\uff82\022\uff82\023\uff82\024\uff82\025" +
    "\uff82\030\uff82\034\uff82\035\uff82\037\uff82\040\uff82\041\uff82" +
    "\042\uff82\043\uff82\044\uff82\046\uff82\050\uff82\001\002\000" +
    "\042\021\uff84\022\uff84\023\uff84\024\uff84\025\uff84\030\uff84" +
    "\034\uff84\035\uff84\037\uff84\040\uff84\041\uff84\042\uff84\043" +
    "\uff84\044\uff84\046\uff84\050\uff84\001\002\000\042\021\uff83" +
    "\022\uff83\023\uff83\024\uff83\025\uff83\030\uff83\034\uff83\035" +
    "\uff83\037\uff83\040\uff83\041\uff83\042\uff83\043\uff83\044\uff83" +
    "\046\uff83\050\uff83\001\002\000\034\100\313\101\312\102" +
    "\277\103\306\104\310\105\305\106\303\107\304\110\311" +
    "\111\302\112\300\113\307\114\301\001\002\000\042\021" +
    "\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\030\uffb8\034\uffb8" +
    "\035\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044" +
    "\uffb8\046\uffb8\050\uffb8\001\002\000\004\027\347\001\002" +
    "\000\004\027\344\001\002\000\004\027\341\001\002\000" +
    "\004\027\336\001\002\000\004\027\333\001\002\000\004" +
    "\027\330\001\002\000\004\027\325\001\002\000\004\027" +
    "\322\001\002\000\004\027\317\001\002\000\004\027\314" +
    "\001\002\000\042\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025" +
    "\uffb9\030\uffb9\034\uffb9\035\uffb9\037\uffb9\040\uffb9\041\uffb9" +
    "\042\uffb9\043\uffb9\044\uffb9\046\uffb9\050\uffb9\001\002\000" +
    "\042\021\uffba\022\uffba\023\uffba\024\uffba\025\uffba\030\uffba" +
    "\034\uffba\035\uffba\037\uffba\040\uffba\041\uffba\042\uffba\043" +
    "\uffba\044\uffba\046\uffba\050\uffba\001\002\000\030\004\065" +
    "\005\047\006\103\007\071\021\075\022\037\027\100\054" +
    "\064\055\045\057\062\077\063\001\002\000\016\021\111" +
    "\022\113\023\107\024\110\025\112\030\316\001\002\000" +
    "\042\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\030\uffbf" +
    "\034\uffbf\035\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043" +
    "\uffbf\044\uffbf\046\uffbf\050\uffbf\001\002\000\030\004\065" +
    "\005\047\006\103\007\071\021\075\022\037\027\100\054" +
    "\064\055\045\057\062\077\063\001\002\000\016\021\111" +
    "\022\113\023\107\024\110\025\112\030\321\001\002\000" +
    "\042\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\030\uffc3" +
    "\034\uffc3\035\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043" +
    "\uffc3\044\uffc3\046\uffc3\050\uffc3\001\002\000\030\004\065" +
    "\005\047\006\103\007\071\021\075\022\037\027\100\054" +
    "\064\055\045\057\062\077\063\001\002\000\016\021\111" +
    "\022\113\023\107\024\110\025\112\030\324\001\002\000" +
    "\042\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\030\uffbc" +
    "\034\uffbc\035\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043" +
    "\uffbc\044\uffbc\046\uffbc\050\uffbc\001\002\000\030\004\065" +
    "\005\047\006\103\007\071\021\075\022\037\027\100\054" +
    "\064\055\045\057\062\077\063\001\002\000\016\021\111" +
    "\022\113\023\107\024\110\025\112\030\327\001\002\000" +
    "\042\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\030\uffc4" +
    "\034\uffc4\035\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043" +
    "\uffc4\044\uffc4\046\uffc4\050\uffc4\001\002\000\030\004\065" +
    "\005\047\006\103\007\071\021\075\022\037\027\100\054" +
    "\064\055\045\057\062\077\063\001\002\000\016\021\111" +
    "\022\113\023\107\024\110\025\112\030\332\001\002\000" +
    "\042\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\030\uffc2" +
    "\034\uffc2\035\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043" +
    "\uffc2\044\uffc2\046\uffc2\050\uffc2\001\002\000\030\004\065" +
    "\005\047\006\103\007\071\021\075\022\037\027\100\054" +
    "\064\055\045\057\062\077\063\001\002\000\016\021\111" +
    "\022\113\023\107\024\110\025\112\030\335\001\002\000" +
    "\042\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\030\uffc0" +
    "\034\uffc0\035\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043" +
    "\uffc0\044\uffc0\046\uffc0\050\uffc0\001\002\000\030\004\065" +
    "\005\047\006\103\007\071\021\075\022\037\027\100\054" +
    "\064\055\045\057\062\077\063\001\002\000\016\021\111" +
    "\022\113\023\107\024\110\025\112\030\340\001\002\000" +
    "\042\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\030\uffc1" +
    "\034\uffc1\035\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043" +
    "\uffc1\044\uffc1\046\uffc1\050\uffc1\001\002\000\030\004\065" +
    "\005\047\006\103\007\071\021\075\022\037\027\100\054" +
    "\064\055\045\057\062\077\063\001\002\000\016\021\111" +
    "\022\113\023\107\024\110\025\112\030\343\001\002\000" +
    "\042\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\030\uffbe" +
    "\034\uffbe\035\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043" +
    "\uffbe\044\uffbe\046\uffbe\050\uffbe\001\002\000\030\004\065" +
    "\005\047\006\103\007\071\021\075\022\037\027\100\054" +
    "\064\055\045\057\062\077\063\001\002\000\016\021\111" +
    "\022\113\023\107\024\110\025\112\030\346\001\002\000" +
    "\042\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\030\uffbb" +
    "\034\uffbb\035\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043" +
    "\uffbb\044\uffbb\046\uffbb\050\uffbb\001\002\000\030\004\065" +
    "\005\047\006\103\007\071\021\075\022\037\027\100\054" +
    "\064\055\045\057\062\077\063\001\002\000\016\021\111" +
    "\022\113\023\107\024\110\025\112\046\351\001\002\000" +
    "\030\004\065\005\047\006\103\007\071\021\075\022\037" +
    "\027\100\054\064\055\045\057\062\077\063\001\002\000" +
    "\016\021\111\022\113\023\107\024\110\025\112\030\353" +
    "\001\002\000\042\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025" +
    "\uffbd\030\uffbd\034\uffbd\035\uffbd\037\uffbd\040\uffbd\041\uffbd" +
    "\042\uffbd\043\uffbd\044\uffbd\046\uffbd\050\uffbd\001\002\000" +
    "\040\004\065\005\047\006\103\007\357\010\054\011\067" +
    "\021\075\022\037\027\042\036\051\054\064\055\045\056" +
    "\074\057\062\077\063\001\002\000\010\030\362\034\215" +
    "\035\217\001\002\000\032\021\111\022\113\023\107\024" +
    "\110\025\112\030\361\037\176\040\200\041\173\042\174" +
    "\043\172\044\177\001\002\000\034\021\uffc5\022\uffc5\023" +
    "\uffc5\024\uffc5\025\uffc5\030\360\037\uffc5\040\uffc5\041\uffc5" +
    "\042\uffc5\043\uffc5\044\uffc5\045\151\001\002\000\022\030" +
    "\uff79\034\uff79\035\uff79\043\uff79\044\uff79\045\uff79\046\uff79" +
    "\050\uff79\001\002\000\022\030\uff7b\034\uff7b\035\uff7b\043" +
    "\uff7b\044\uff7b\045\uff7b\046\uff7b\050\uff7b\001\002\000\022" +
    "\030\uff7a\034\uff7a\035\uff7a\043\uff7a\044\uff7a\045\uff7a\046" +
    "\uff7a\050\uff7a\001\002\000\030\002\uff54\006\uff54\017\uff54" +
    "\020\uff54\052\uff54\053\uff54\065\uff54\067\uff54\074\uff54\075" +
    "\uff54\076\uff54\001\002\000\042\004\065\005\047\006\056" +
    "\007\071\010\054\011\067\021\075\022\037\027\042\030" +
    "\366\036\051\054\064\055\045\056\074\057\062\077\063" +
    "\001\002\000\004\030\367\001\002\000\010\030\uff56\046" +
    "\uff56\050\uff56\001\002\000\010\030\uff55\046\uff55\050\uff55" +
    "\001\002\000\036\004\065\005\047\006\103\007\071\010" +
    "\377\011\u0100\021\075\022\037\027\100\054\064\055\045" +
    "\056\074\057\062\077\063\001\002\000\036\004\065\005" +
    "\047\006\103\007\071\010\373\011\374\021\075\022\037" +
    "\027\100\054\064\055\045\056\074\057\062\077\063\001" +
    "\002\000\014\030\uff9b\034\uff9b\035\uff9b\046\uff9b\050\uff9b" +
    "\001\002\000\014\030\uffaf\034\uffaf\035\uffaf\046\uffaf\050" +
    "\uffaf\001\002\000\014\030\uffae\034\uffae\035\uffae\046\uffae" +
    "\050\uffae\001\002\000\026\021\111\022\113\023\107\024" +
    "\110\025\112\030\uffaa\034\uffaa\035\uffaa\046\uffaa\050\uffaa" +
    "\001\002\000\014\030\uff97\034\uff97\035\uff97\046\uff97\050" +
    "\uff97\001\002\000\014\030\uffa7\034\uffa7\035\uffa7\046\uffa7" +
    "\050\uffa7\001\002\000\014\030\uffa6\034\uffa6\035\uffa6\046" +
    "\uffa6\050\uffa6\001\002\000\026\021\111\022\113\023\107" +
    "\024\110\025\112\030\uffa2\034\uffa2\035\uffa2\046\uffa2\050" +
    "\uffa2\001\002\000\004\050\u0103\001\002\000\030\002\uff53" +
    "\006\uff53\017\uff53\020\uff53\052\uff53\053\uff53\065\uff53\067" +
    "\uff53\074\uff53\075\uff53\076\uff53\001\002\000\014\030\uff8a" +
    "\034\uff8a\035\uff8a\046\uff8a\050\uff8a\001\002\000\040\004" +
    "\065\005\047\006\103\007\u0108\010\054\011\067\021\075" +
    "\022\037\027\042\036\051\054\064\055\045\056\074\057" +
    "\062\077\063\001\002\000\010\030\u010b\034\215\035\217" +
    "\001\002\000\032\021\111\022\113\023\107\024\110\025" +
    "\112\030\u010a\037\176\040\200\041\173\042\174\043\172" +
    "\044\177\001\002\000\034\021\uffc5\022\uffc5\023\uffc5\024" +
    "\uffc5\025\uffc5\030\u0109\037\uffc5\040\uffc5\041\uffc5\042\uffc5" +
    "\043\uffc5\044\uffc5\045\151\001\002\000\042\021\uff7f\022" +
    "\uff7f\023\uff7f\024\uff7f\025\uff7f\030\uff7f\034\uff7f\035\uff7f" +
    "\037\uff7f\040\uff7f\041\uff7f\042\uff7f\043\uff7f\044\uff7f\046" +
    "\uff7f\050\uff7f\001\002\000\042\021\uff81\022\uff81\023\uff81" +
    "\024\uff81\025\uff81\030\uff81\034\uff81\035\uff81\037\uff81\040" +
    "\uff81\041\uff81\042\uff81\043\uff81\044\uff81\046\uff81\050\uff81" +
    "\001\002\000\042\021\uff80\022\uff80\023\uff80\024\uff80\025" +
    "\uff80\030\uff80\034\uff80\035\uff80\037\uff80\040\uff80\041\uff80" +
    "\042\uff80\043\uff80\044\uff80\046\uff80\050\uff80\001\002\000" +
    "\010\030\u0110\034\uff88\035\uff88\001\002\000\010\030\u010f" +
    "\034\215\035\217\001\002\000\032\021\111\022\113\023" +
    "\107\024\110\025\112\030\142\037\176\040\200\041\173" +
    "\042\174\043\172\044\177\001\002\000\014\030\uff89\034" +
    "\uff89\035\uff89\046\uff89\050\uff89\001\002\000\014\030\uff8d" +
    "\034\uff8d\035\uff8d\046\uff8d\050\uff8d\001\002\000\042\021" +
    "\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\030\uffd4\034\uffd4" +
    "\035\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044" +
    "\uffd4\046\uffd4\050\uffd4\001\002\000\006\046\uffde\050\uffde" +
    "\001\002\000\004\050\u0114\001\002\000\030\002\uffeb\006" +
    "\uffeb\017\uffeb\020\uffeb\052\uffeb\053\uffeb\065\uffeb\067\uffeb" +
    "\074\uffeb\075\uffeb\076\uffeb\001\002\000\040\004\065\005" +
    "\047\006\056\007\071\010\054\011\067\021\075\022\037" +
    "\027\042\036\051\054\064\055\045\056\074\057\062\077" +
    "\063\001\002\000\004\030\u0117\001\002\000\004\051\u0118" +
    "\001\002\000\026\006\017\017\023\020\032\052\uff5c\053" +
    "\015\065\013\067\016\074\024\075\007\076\011\001\002" +
    "\000\026\006\017\017\023\020\032\052\uff5d\053\015\065" +
    "\013\067\016\074\024\075\007\076\011\001\002\000\004" +
    "\052\u011b\001\002\000\030\002\uff52\006\uff52\017\uff52\020" +
    "\uff52\052\uff52\053\uff52\065\uff52\067\uff52\074\uff52\075\uff52" +
    "\076\uff52\001\002\000\030\002\ufffe\006\ufffe\017\ufffe\020" +
    "\ufffe\052\ufffe\053\ufffe\065\ufffe\067\ufffe\074\ufffe\075\ufffe" +
    "\076\ufffe\001\002\000\004\027\u011e\001\002\000\006\006" +
    "\u0120\030\u0122\001\002\000\006\030\uff5a\046\uff5a\001\002" +
    "\000\004\047\u014c\001\002\000\006\030\u013e\046\u013d\001" +
    "\002\000\006\047\u0124\051\u0123\001\002\000\026\006\017" +
    "\017\023\020\032\052\uff5c\053\015\065\013\067\016\074" +
    "\024\075\007\076\011\001\002\000\014\012\u0126\013\u0128" +
    "\014\u0125\015\u012a\016\u0129\001\002\000\014\030\uffe0\033" +
    "\uffe0\046\uffe0\050\uffe0\051\uffe0\001\002\000\014\030\uffe2" +
    "\033\uffe2\046\uffe2\050\uffe2\051\uffe2\001\002\000\004\051" +
    "\u0138\001\002\000\014\030\uffe1\033\uffe1\046\uffe1\050\uffe1" +
    "\051\uffe1\001\002\000\004\051\u012b\001\002\000\014\030" +
    "\uffdf\033\uffdf\046\uffdf\050\uffdf\051\uffdf\001\002\000\022" +
    "\006\017\017\023\020\032\053\015\065\013\067\016\074" +
    "\024\075\007\001\002\000\024\006\ufff0\017\ufff0\020\ufff0" +
    "\052\ufff0\053\ufff0\065\ufff0\067\ufff0\074\ufff0\075\ufff0\001" +
    "\002\000\024\006\uffef\017\uffef\020\uffef\052\uffef\053\uffef" +
    "\065\uffef\067\uffef\074\uffef\075\uffef\001\002\000\024\006" +
    "\017\017\023\020\032\052\u0136\053\015\065\013\067\016" +
    "\074\024\075\007\001\002\000\024\006\ufff1\017\ufff1\020" +
    "\ufff1\052\ufff1\053\ufff1\065\ufff1\067\ufff1\074\ufff1\075\ufff1" +
    "\001\002\000\024\006\ufff2\017\ufff2\020\ufff2\052\ufff2\053" +
    "\ufff2\065\ufff2\067\ufff2\074\ufff2\075\ufff2\001\002\000\024" +
    "\006\uffed\017\uffed\020\uffed\052\uffed\053\uffed\065\uffed\067" +
    "\uffed\074\uffed\075\uffed\001\002\000\024\006\uffec\017\uffec" +
    "\020\uffec\052\uffec\053\uffec\065\uffec\067\uffec\074\uffec\075" +
    "\uffec\001\002\000\024\006\ufff3\017\ufff3\020\ufff3\052\ufff3" +
    "\053\ufff3\065\ufff3\067\ufff3\074\ufff3\075\ufff3\001\002\000" +
    "\024\006\uff5e\017\uff5e\020\uff5e\052\uff5e\053\uff5e\065\uff5e" +
    "\067\uff5e\074\uff5e\075\uff5e\001\002\000\024\006\uffee\017" +
    "\uffee\020\uffee\052\uffee\053\uffee\065\uffee\067\uffee\074\uffee" +
    "\075\uffee\001\002\000\030\002\uff65\006\uff65\017\uff65\020" +
    "\uff65\052\uff65\053\uff65\065\uff65\067\uff65\074\uff65\075\uff65" +
    "\076\uff65\001\002\000\024\006\uff5f\017\uff5f\020\uff5f\052" +
    "\uff5f\053\uff5f\065\uff5f\067\uff5f\074\uff5f\075\uff5f\001\002" +
    "\000\026\006\017\017\023\020\032\052\uff5c\053\015\065" +
    "\013\067\016\074\024\075\007\076\011\001\002\000\004" +
    "\052\u013a\001\002\000\030\002\uff61\006\uff61\017\uff61\020" +
    "\uff61\052\uff61\053\uff61\065\uff61\067\uff61\074\uff61\075\uff61" +
    "\076\uff61\001\002\000\004\052\u013c\001\002\000\030\002" +
    "\uff63\006\uff63\017\uff63\020\uff63\052\uff63\053\uff63\065\uff63" +
    "\067\uff63\074\uff63\075\uff63\076\uff63\001\002\000\004\006" +
    "\u0120\001\002\000\006\047\u0140\051\u013f\001\002\000\026" +
    "\006\017\017\023\020\032\052\uff5c\053\015\065\013\067" +
    "\016\074\024\075\007\076\011\001\002\000\014\012\u0126" +
    "\013\u0128\014\u0125\015\u012a\016\u0142\001\002\000\004\051" +
    "\u0146\001\002\000\004\051\u0143\001\002\000\022\006\017" +
    "\017\023\020\032\053\015\065\013\067\016\074\024\075" +
    "\007\001\002\000\024\006\017\017\023\020\032\052\u0145" +
    "\053\015\065\013\067\016\074\024\075\007\001\002\000" +
    "\030\002\uff64\006\uff64\017\uff64\020\uff64\052\uff64\053\uff64" +
    "\065\uff64\067\uff64\074\uff64\075\uff64\076\uff64\001\002\000" +
    "\026\006\017\017\023\020\032\052\uff5c\053\015\065\013" +
    "\067\016\074\024\075\007\076\011\001\002\000\004\052" +
    "\u0148\001\002\000\030\002\uff60\006\uff60\017\uff60\020\uff60" +
    "\052\uff60\053\uff60\065\uff60\067\uff60\074\uff60\075\uff60\076" +
    "\uff60\001\002\000\004\052\u014a\001\002\000\030\002\uff62" +
    "\006\uff62\017\uff62\020\uff62\052\uff62\053\uff62\065\uff62\067" +
    "\uff62\074\uff62\075\uff62\076\uff62\001\002\000\006\030\uff5b" +
    "\046\uff5b\001\002\000\012\012\u0126\013\u0128\014\u0125\015" +
    "\u012a\001\002\000\006\030\uff59\046\uff59\001\002\000\004" +
    "\066\u014f\001\002\000\004\027\u0150\001\002\000\040\004" +
    "\065\005\047\006\056\007\071\010\054\011\067\021\075" +
    "\022\037\027\042\036\051\054\064\055\045\056\074\057" +
    "\062\077\063\001\002\000\006\030\uff66\046\uff66\001\002" +
    "\000\006\030\u0154\046\u0153\001\002\000\040\004\065\005" +
    "\047\006\056\007\071\010\054\011\067\021\075\022\037" +
    "\027\042\036\051\054\064\055\045\056\074\057\062\077" +
    "\063\001\002\000\004\050\u0155\001\002\000\030\002\uff68" +
    "\006\uff68\017\uff68\020\uff68\052\uff68\053\uff68\065\uff68\067" +
    "\uff68\074\uff68\075\uff68\076\uff68\001\002\000\006\030\uff67" +
    "\046\uff67\001\002\000\006\046\uffe8\050\uffe8\001\002\000" +
    "\006\046\u0160\050\u0161\001\002\000\006\033\u015a\047\u015b" +
    "\001\002\000\040\004\065\005\047\006\056\007\071\010" +
    "\054\011\067\021\075\022\037\027\042\036\051\054\064" +
    "\055\045\056\074\057\062\077\063\001\002\000\012\012" +
    "\u0126\013\u0128\014\u0125\015\u012a\001\002\000\010\033\u015d" +
    "\046\uffe5\050\uffe5\001\002\000\040\004\065\005\047\006" +
    "\056\007\071\010\054\011\067\021\075\022\037\027\042" +
    "\036\051\054\064\055\045\056\074\057\062\077\063\001" +
    "\002\000\006\046\uffe7\050\uffe7\001\002\000\006\046\uffe6" +
    "\050\uffe6\001\002\000\004\006\u0159\001\002\000\030\002" +
    "\uffea\006\uffea\017\uffea\020\uffea\052\uffea\053\uffea\065\uffea" +
    "\067\uffea\074\uffea\075\uffea\076\uffea\001\002\000\006\046" +
    "\uffe9\050\uffe9\001\002\000\004\050\u0165\001\002\000\030" +
    "\002\uff57\006\uff57\017\uff57\020\uff57\052\uff57\053\uff57\065" +
    "\uff57\067\uff57\074\uff57\075\uff57\076\uff57\001\002\000\030" +
    "\002\uff58\006\uff58\017\uff58\020\uff58\052\uff58\053\uff58\065" +
    "\uff58\067\uff58\074\uff58\075\uff58\076\uff58\001\002\000\030" +
    "\002\uff50\006\uff50\017\uff50\020\uff50\052\uff50\053\uff50\065" +
    "\uff50\067\uff50\074\uff50\075\uff50\076\uff50\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0164\000\036\002\021\003\004\004\005\005\020\007" +
    "\026\010\011\015\017\036\013\040\003\046\027\047\030" +
    "\051\007\052\024\053\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\005\u011b\007\026\010\011\015\017" +
    "\036\013\040\003\046\027\047\030\051\007\052\024\053" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\006\u0162\016\067\017\065\022\040\023\057\024\051\025" +
    "\045\026\047\027\042\030\043\031\075\032\037\033\071" +
    "\034\072\035\054\050\056\001\001\000\006\011\u0157\012" +
    "\u0156\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\006" +
    "\u0111\014\u0112\016\067\017\065\022\040\023\057\024\051" +
    "\025\045\026\047\027\042\030\043\031\075\032\037\033" +
    "\071\034\072\035\054\050\056\001\001\000\042\006\052" +
    "\016\067\017\065\022\040\023\057\024\051\025\045\026" +
    "\047\027\042\030\043\031\075\032\037\033\071\034\072" +
    "\035\054\050\056\001\001\000\030\016\u0110\017\065\024" +
    "\051\025\045\026\047\030\100\031\105\032\076\033\104" +
    "\034\072\035\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\016\u010d\017\065\022\u010b\023\u010c\024\051" +
    "\025\045\026\047\027\143\030\144\031\105\032\076\033" +
    "\104\034\072\035\101\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\016\220\017\065\022\040" +
    "\023\u0103\024\051\025\045\026\047\027\143\030\144\031" +
    "\105\032\076\033\104\034\072\035\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\016\103" +
    "\017\065\024\051\025\045\026\047\030\100\031\105\032" +
    "\076\033\104\034\072\035\101\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\016\140\017\065\024\051\025" +
    "\045\026\047\030\100\031\105\032\076\033\104\034\072" +
    "\035\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\016\117\017\065\024\051\025\045\026" +
    "\047\030\100\031\105\032\076\033\104\034\072\035\101" +
    "\001\001\000\030\016\116\017\065\024\051\025\045\026" +
    "\047\030\100\031\105\032\076\033\104\034\072\035\101" +
    "\001\001\000\030\016\115\017\065\024\051\025\045\026" +
    "\047\030\100\031\105\032\076\033\104\034\072\035\101" +
    "\001\001\000\030\016\114\017\065\024\051\025\045\026" +
    "\047\030\100\031\105\032\076\033\104\034\072\035\101" +
    "\001\001\000\030\016\113\017\065\024\051\025\045\026" +
    "\047\030\100\031\105\032\076\033\104\034\072\035\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\016\127\017\065" +
    "\024\051\025\045\026\047\030\100\031\105\032\076\033" +
    "\104\034\072\035\101\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\006" +
    "\134\016\067\017\065\022\040\023\057\024\051\025\045" +
    "\026\047\027\042\030\043\031\075\032\037\033\071\034" +
    "\072\035\054\050\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\016\146\017\065\022\040" +
    "\023\145\024\051\025\045\026\047\027\143\030\144\031" +
    "\105\032\076\033\104\034\072\035\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\016\160\017\065" +
    "\024\051\025\045\026\047\030\100\031\105\032\076\033" +
    "\104\034\072\035\101\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\006" +
    "\165\016\067\017\065\022\040\023\057\024\051\025\045" +
    "\026\047\027\042\030\043\031\075\032\037\033\071\034" +
    "\072\035\054\050\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\016" +
    "\213\017\065\024\051\025\045\026\047\030\210\031\105" +
    "\032\076\033\104\034\072\035\101\001\001\000\030\016" +
    "\207\017\065\024\051\025\045\026\047\030\100\031\105" +
    "\032\076\033\104\034\072\035\101\001\001\000\030\016" +
    "\206\017\065\024\051\025\045\026\047\030\100\031\105" +
    "\032\076\033\104\034\072\035\101\001\001\000\002\001" +
    "\001\000\030\016\205\017\065\024\051\025\045\026\047" +
    "\030\100\031\105\032\076\033\104\034\072\035\101\001" +
    "\001\000\030\016\204\017\065\024\051\025\045\026\047" +
    "\030\201\031\105\032\076\033\104\034\072\035\101\001" +
    "\001\000\030\016\200\017\065\024\051\025\045\026\047" +
    "\030\100\031\105\032\076\033\104\034\072\035\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\016" +
    "\220\017\065\022\040\023\221\024\051\025\045\026\047" +
    "\027\143\030\144\031\105\032\076\033\104\034\072\035" +
    "\101\001\001\000\002\001\001\000\036\016\220\017\065" +
    "\022\040\023\217\024\051\025\045\026\047\027\143\030" +
    "\144\031\105\032\076\033\104\034\072\035\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\016\227\017\065\024\051\025\045\026\047\030\226" +
    "\031\105\032\076\033\104\034\072\035\101\001\001\000" +
    "\030\016\225\017\065\024\051\025\045\026\047\030\224" +
    "\031\105\032\076\033\104\034\072\035\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\235\001\001\000\004\027\232\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\006\250\016\067\017\065\022\040\023\057" +
    "\024\051\025\045\026\047\027\042\030\043\031\075\032" +
    "\037\033\071\034\072\035\054\050\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\016\265\017\065\024\051\025\045\026\047" +
    "\027\262\030\100\031\105\032\076\033\104\034\072\035" +
    "\101\001\001\000\032\016\261\017\065\024\051\025\045" +
    "\026\047\027\256\030\100\031\105\032\076\033\104\034" +
    "\072\035\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\016\270\017\065\022\040\023\267\024\051\025\045\026" +
    "\047\027\143\030\144\031\105\032\076\033\104\034\072" +
    "\035\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\016\314\017\065\024" +
    "\051\025\045\026\047\030\100\031\105\032\076\033\104" +
    "\034\072\035\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\016\317\017\065\024\051\025\045\026\047" +
    "\030\100\031\105\032\076\033\104\034\072\035\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\016\322" +
    "\017\065\024\051\025\045\026\047\030\100\031\105\032" +
    "\076\033\104\034\072\035\101\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\016\325\017\065\024\051\025" +
    "\045\026\047\030\100\031\105\032\076\033\104\034\072" +
    "\035\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\016\330\017\065\024\051\025\045\026\047\030\100" +
    "\031\105\032\076\033\104\034\072\035\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\016\333\017\065" +
    "\024\051\025\045\026\047\030\100\031\105\032\076\033" +
    "\104\034\072\035\101\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\016\336\017\065\024\051\025\045\026" +
    "\047\030\100\031\105\032\076\033\104\034\072\035\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\016" +
    "\341\017\065\024\051\025\045\026\047\030\100\031\105" +
    "\032\076\033\104\034\072\035\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\016\344\017\065\024\051" +
    "\025\045\026\047\030\100\031\105\032\076\033\104\034" +
    "\072\035\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\016\347\017\065\024\051\025\045\026\047\030" +
    "\100\031\105\032\076\033\104\034\072\035\101\001\001" +
    "\000\002\001\001\000\030\016\351\017\065\024\051\025" +
    "\045\026\047\030\100\031\105\032\076\033\104\034\072" +
    "\035\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\016\355\017\065\022\040\023\354\024\051\025\045" +
    "\026\047\027\143\030\144\031\105\032\076\033\104\034" +
    "\072\035\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\006\364\016\067" +
    "\017\065\022\040\023\057\024\051\025\045\026\047\027" +
    "\042\030\043\031\075\032\037\033\071\034\072\035\054" +
    "\050\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\016\u0100\017\065\024\051\025\045" +
    "\026\047\027\375\030\100\031\105\032\076\033\104\034" +
    "\072\035\101\001\001\000\032\016\374\017\065\024\051" +
    "\025\045\026\047\027\371\030\100\031\105\032\076\033" +
    "\104\034\072\035\101\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\016\u0106\017\065\022\040\023\u0105\024\051\025\045" +
    "\026\047\027\143\030\144\031\105\032\076\033\104\034" +
    "\072\035\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\006\u0115\016\067\017\065\022\040\023\057\024" +
    "\051\025\045\026\047\027\042\030\043\031\075\032\037" +
    "\033\071\034\072\035\054\050\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\004\u0118\005\020\007\026" +
    "\010\011\015\017\036\013\040\003\043\u0119\046\027\047" +
    "\030\051\007\052\024\053\025\001\001\000\030\005\u011b" +
    "\007\026\010\011\015\017\036\013\040\003\046\027\047" +
    "\030\051\007\052\024\053\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\041\u011e\042\u0120\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\004" +
    "\u0118\005\020\007\026\010\011\015\017\036\013\040\003" +
    "\043\u013a\046\027\047\030\051\007\052\024\053\025\001" +
    "\001\000\004\013\u0126\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\007\u0132\010\011\015\u012f" +
    "\036\u012e\040\u012b\044\u012d\045\u0133\047\u0134\051\u012c\052" +
    "\u0130\053\u0131\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\007\u0132\010\011\015\u012f\036\u012e\040\u012b\045" +
    "\u0136\047\u0134\051\u012c\052\u0130\053\u0131\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\004\u0118\005" +
    "\020\007\026\010\011\015\017\036\013\040\003\043\u0138" +
    "\046\027\047\030\051\007\052\024\053\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\041\u014a\001\001\000\002\001\001\000" +
    "\034\004\u0118\005\020\007\026\010\011\015\017\036\013" +
    "\040\003\043\u0148\046\027\047\030\051\007\052\024\053" +
    "\025\001\001\000\004\013\u0140\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\007\u0132\010\011\015\u012f\036" +
    "\u012e\040\u012b\044\u0143\045\u0133\047\u0134\051\u012c\052\u0130" +
    "\053\u0131\001\001\000\026\007\u0132\010\011\015\u012f\036" +
    "\u012e\040\u012b\045\u0136\047\u0134\051\u012c\052\u0130\053\u0131" +
    "\001\001\000\002\001\001\000\034\004\u0118\005\020\007" +
    "\026\010\011\015\017\036\013\040\003\043\u0146\046\027" +
    "\047\030\051\007\052\024\053\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\u014c\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\006\u0150" +
    "\016\067\017\065\022\040\023\057\024\051\025\045\026" +
    "\047\027\042\030\043\031\075\032\037\033\071\034\072" +
    "\035\054\037\u0151\050\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\006\u0155\016\067\017\065\022\040" +
    "\023\057\024\051\025\045\026\047\027\042\030\043\031" +
    "\075\032\037\033\071\034\072\035\054\050\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\006\u0111\014\u015e\016\067\017\065\022\040\023\057\024" +
    "\051\025\045\026\047\027\042\030\043\031\075\032\037" +
    "\033\071\034\072\035\054\050\056\001\001\000\004\013" +
    "\u015b\001\001\000\002\001\001\000\044\006\u0111\014\u015d" +
    "\016\067\017\065\022\040\023\057\024\051\025\045\026" +
    "\047\027\042\030\043\031\075\032\037\033\071\034\072" +
    "\035\054\050\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\u0161\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public Parser(Lexer lexer) {
        super(lexer);
    }

    //Metodo llamado automaticamente al encontrar error sintanctico


    public void syntax_error(Symbol s){

    String lexema = s.value.toString();
    int fila = s.right;
    int columna = s.left;
    
    System.out.println("Error Sintactico hallado");
    System.out.println("Lexema " + lexema + " linea"  + fila + " columna " + columna);

    }

    //Metodo llamado cuando no se puede recuperar de un error
    
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        
    String lexema = s.value.toString();
    int fila = s.right;
    int columna = s.left;
    
    System.out.println("Error Sintactico hallado PANIC MODE");
    System.out.println("Lexema " + lexema + " linea"  + fila + " columna " + columna);
        
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= ts 
            {
              Object RESULT =null;
		 System.out.println("Doc ok"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ts ::= instrucciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ts",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instrucciones opciones_instrucciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instrucciones ::= opciones_instrucciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // opciones_instrucciones ::= declaracion_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // opciones_instrucciones ::= asignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // opciones_instrucciones ::= funcion_console_log 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // opciones_instrucciones ::= declaracion_funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // opciones_instrucciones ::= llamada_funcion_normal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // opciones_instrucciones ::= funcion_if 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // opciones_instrucciones ::= funcion_return 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // opciones_instrucciones ::= instruccion_break 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // opciones_instrucciones ::= instruccion_continue 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // opciones_instrucciones_sin_return ::= declaracion_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones_sin_return",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // opciones_instrucciones_sin_return ::= asignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones_sin_return",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // opciones_instrucciones_sin_return ::= funcion_console_log 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones_sin_return",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // opciones_instrucciones_sin_return ::= declaracion_funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones_sin_return",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // opciones_instrucciones_sin_return ::= llamada_funcion_normal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones_sin_return",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // opciones_instrucciones_sin_return ::= funcion_if 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones_sin_return",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // opciones_instrucciones_sin_return ::= instruccion_break 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones_sin_return",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // opciones_instrucciones_sin_return ::= instruccion_continue 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones_sin_return",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // asignacion ::= ID ASIGNACION variable_valor PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaracion_variable ::= tipo_acceso_variable id_valor_variable_lista PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_variable",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // id_valor_variable_lista ::= id_valor_variable_lista COMA id_valor_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_valor_variable_lista",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // id_valor_variable_lista ::= id_valor_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_valor_variable_lista",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // id_valor_variable ::= ID DOS_PUNTOS tipo_dato_variable ASIGNACION variable_valor 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tipoDatoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tipoDatoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object tipoDato = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println(id + " " + tipoDato + " " + valor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_valor_variable",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // id_valor_variable ::= ID ASIGNACION variable_valor 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println(id + " " + valor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_valor_variable",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // id_valor_variable ::= ID DOS_PUNTOS tipo_dato_variable 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tipoDatoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tipoDatoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tipoDato = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println(id + " " + tipoDato + " " + " undefined"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_valor_variable",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipo_acceso_variable ::= RCONST 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_acceso_variable",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipo_acceso_variable ::= RLET 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_acceso_variable",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipo_dato_variable ::= RNUMBER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato_variable",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipo_dato_variable ::= RBIGINT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato_variable",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tipo_dato_variable ::= RSTRING 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato_variable",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tipo_dato_variable ::= RBOOLEAN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato_variable",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // variable_valor ::= instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_valor",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instruccion ::= operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instruccion ::= operaciones_logicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instruccion ::= funcion_boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instruccion ::= funcion_string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instruccion ::= funcion_char_at 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instruccion ::= funcion_to_lower_case 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instruccion ::= funcion_to_upper_case 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instruccion ::= funcion_concat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instruccion ::= llamada_funcion_asignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operaciones_matematicas ::= MENOS operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // operaciones_matematicas ::= MAS operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // operaciones_matematicas ::= operaciones_matematicas MAS operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // operaciones_matematicas ::= operaciones_matematicas MENOS operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // operaciones_matematicas ::= operaciones_matematicas MULTIPLICACION operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // operaciones_matematicas ::= operaciones_matematicas DIVISION operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // operaciones_matematicas ::= operaciones_matematicas MOD operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // operaciones_matematicas ::= PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // operaciones_matematicas ::= funcion_number 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // operaciones_matematicas ::= funcion_bigint 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // operaciones_matematicas ::= funcion_length 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // operaciones_matematicas ::= funciones_numericas_estaticas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // operaciones_matematicas ::= NUMBER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // operaciones_matematicas ::= BIGINT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // operaciones_matematicas ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // operaciones_matematicas ::= TEXTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // funciones_numericas_estaticas ::= MATH PUNTO ABS PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // funciones_numericas_estaticas ::= MATH PUNTO CEIL PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // funciones_numericas_estaticas ::= MATH PUNTO COS PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // funciones_numericas_estaticas ::= MATH PUNTO SIN PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // funciones_numericas_estaticas ::= MATH PUNTO TAN PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // funciones_numericas_estaticas ::= MATH PUNTO EXP PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // funciones_numericas_estaticas ::= MATH PUNTO FLOOR PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // funciones_numericas_estaticas ::= MATH PUNTO POW PARENTESIS_ABIERTO operaciones_matematicas COMA operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // funciones_numericas_estaticas ::= MATH PUNTO SQRT PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // funciones_numericas_estaticas ::= MATH PUNTO RANDOM PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // funciones_numericas_estaticas ::= MATH PUNTO E 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // funciones_numericas_estaticas ::= MATH PUNTO PI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // funciones_numericas_estaticas ::= MATH PUNTO SQRT2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // incremento ::= ID MAS MAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // decremento ::= ID MENOS MENOS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decremento",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // operaciones_relacionales ::= operaciones_matematicas MAYOR_QUE operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // operaciones_relacionales ::= operaciones_matematicas MAYOR_IGUAL operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // operaciones_relacionales ::= operaciones_matematicas MENOR_QUE operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // operaciones_relacionales ::= operaciones_matematicas MENOR_IGUAL operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // operaciones_relacionales ::= operaciones_matematicas COMPARACION operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // operaciones_relacionales ::= operaciones_matematicas DISTINTO operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // operaciones_relacionales ::= TRUE COMPARACION TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // operaciones_relacionales ::= TRUE COMPARACION FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // operaciones_relacionales ::= FALSE COMPARACION TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // operaciones_relacionales ::= FALSE COMPARACION FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // operaciones_relacionales ::= operaciones_matematicas COMPARACION TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // operaciones_relacionales ::= TRUE COMPARACION operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // operaciones_relacionales ::= operaciones_matematicas COMPARACION FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // operaciones_relacionales ::= FALSE COMPARACION operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // operaciones_relacionales ::= TRUE DISTINTO TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // operaciones_relacionales ::= TRUE DISTINTO FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // operaciones_relacionales ::= FALSE DISTINTO TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // operaciones_relacionales ::= FALSE DISTINTO FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // operaciones_relacionales ::= operaciones_matematicas DISTINTO TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // operaciones_relacionales ::= TRUE DISTINTO operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // operaciones_relacionales ::= operaciones_matematicas DISTINTO FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // operaciones_relacionales ::= FALSE DISTINTO operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // operaciones_relacionales ::= TRUE 
            {
              Object RESULT =null;
		 RESULT = "true"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // operaciones_relacionales ::= FALSE 
            {
              Object RESULT =null;
		 RESULT = "false"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // operaciones_relacionales ::= funcion_boolean COMPARACION TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // operaciones_relacionales ::= funcion_boolean COMPARACION FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // operaciones_relacionales ::= TRUE COMPARACION funcion_boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // operaciones_relacionales ::= FALSE COMPARACION funcion_boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // operaciones_relacionales ::= funcion_boolean DISTINTO TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // operaciones_relacionales ::= funcion_boolean DISTINTO FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // operaciones_relacionales ::= TRUE DISTINTO funcion_boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // operaciones_relacionales ::= FALSE DISTINTO funcion_boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // operaciones_relacionales ::= funcion_boolean COMPARACION funcion_boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // operaciones_relacionales ::= funcion_boolean DISTINTO funcion_boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // operaciones_relacionales ::= funcion_string COMPARACION funcion_string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // operaciones_relacionales ::= funcion_string DISTINTO funcion_string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // operaciones_relacionales ::= funcion_string COMPARACION operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // operaciones_relacionales ::= funcion_string DISTINTO operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // operaciones_relacionales ::= operaciones_matematicas COMPARACION funcion_string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // operaciones_relacionales ::= operaciones_matematicas DISTINTO funcion_string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // operaciones_relacionales ::= PARENTESIS_ABIERTO operaciones_relacionales PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // operaciones_logicas ::= operaciones_logicas AND operaciones_logicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // operaciones_logicas ::= operaciones_logicas OR operaciones_logicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // operaciones_logicas ::= NOT operaciones_logicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // operaciones_logicas ::= PARENTESIS_ABIERTO operaciones_logicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // operaciones_logicas ::= operaciones_relacionales 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // funcion_length ::= TEXTO PUNTO LENGTH 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_length",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // funcion_length ::= ID PUNTO LENGTH 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_length",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // funcion_length ::= variables_string PUNTO LENGTH 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_length",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // funcion_number ::= FNUMBER PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_number",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // funcion_number ::= FNUMBER PARENTESIS_ABIERTO operaciones_logicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_number",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // funcion_number ::= FNUMBER PARENTESIS_ABIERTO TEXTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_number",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // funcion_bigint ::= FBIGINT PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_bigint",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // funcion_bigint ::= FBIGINT PARENTESIS_ABIERTO operaciones_logicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_bigint",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // funcion_bigint ::= FBIGINT PARENTESIS_ABIERTO TEXTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_bigint",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // funcion_boolean ::= FBOOLEAN PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_boolean",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // funcion_boolean ::= FBOOLEAN PARENTESIS_ABIERTO operaciones_logicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_boolean",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // funcion_boolean ::= FBOOLEAN PARENTESIS_ABIERTO TEXTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_boolean",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // funcion_string ::= FSTRING PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_string",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // funcion_string ::= FSTRING PARENTESIS_ABIERTO operaciones_logicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_string",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // funcion_string ::= FSTRING PARENTESIS_ABIERTO TEXTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_string",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // funcion_char_at ::= ID PUNTO CHARAT PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_char_at",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // funcion_char_at ::= TEXTO PUNTO CHARAT PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_char_at",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // funcion_concat ::= variables_string PUNTO CONCAT PARENTESIS_ABIERTO instruccion PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_concat",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // funcion_concat ::= TEXTO PUNTO CONCAT PARENTESIS_ABIERTO instruccion PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_concat",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // funcion_concat ::= ID PUNTO CONCAT PARENTESIS_ABIERTO instruccion PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_concat",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // variables_string ::= funcion_string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables_string",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // variables_string ::= funcion_char_at 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables_string",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // variables_string ::= funcion_to_lower_case 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables_string",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // variables_string ::= funcion_to_upper_case 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables_string",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // variables_string ::= funcion_concat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables_string",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // funcion_to_lower_case ::= ID PUNTO TOLOWERCASE PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_to_lower_case",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // funcion_to_lower_case ::= TEXTO PUNTO TOLOWERCASE PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_to_lower_case",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // funcion_to_lower_case ::= variables_string PUNTO TOLOWERCASE PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_to_lower_case",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // funcion_to_upper_case ::= ID PUNTO TOUPPERCASE PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_to_upper_case",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // funcion_to_upper_case ::= TEXTO PUNTO TOUPPERCASE PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_to_upper_case",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // funcion_to_upper_case ::= variables_string PUNTO TOUPPERCASE PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_to_upper_case",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // funcion_console_log ::= CONSOLE PUNTO LOG PARENTESIS_ABIERTO lista_instrucciones_console PARENTESIS_CERRADO PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 System.out.println(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_console_log",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // lista_instrucciones_console ::= lista_instrucciones_console COMA instruccion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instrucciones_console",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // lista_instrucciones_console ::= instruccion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instrucciones_console",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // declaracion_funcion ::= FUNCTION ID PARENTESIS_ABIERTO PARENTESIS_CERRADO DOS_PUNTOS RVOID CORCHETE_ABIERTO instrucciones_funciones_sin_return CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // declaracion_funcion ::= FUNCTION ID PARENTESIS_ABIERTO parametros_funcion_declaracion PARENTESIS_CERRADO DOS_PUNTOS RVOID CORCHETE_ABIERTO instrucciones_funciones_sin_return CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // declaracion_funcion ::= FUNCTION ID PARENTESIS_ABIERTO PARENTESIS_CERRADO CORCHETE_ABIERTO instrucciones_funcion CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // declaracion_funcion ::= FUNCTION ID PARENTESIS_ABIERTO parametros_funcion_declaracion PARENTESIS_CERRADO CORCHETE_ABIERTO instrucciones_funcion CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // declaracion_funcion ::= FUNCTION ID PARENTESIS_ABIERTO PARENTESIS_CERRADO DOS_PUNTOS tipo_dato_variable CORCHETE_ABIERTO instrucciones_funcion CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // declaracion_funcion ::= FUNCTION ID PARENTESIS_ABIERTO parametros_funcion_declaracion PARENTESIS_CERRADO DOS_PUNTOS tipo_dato_variable CORCHETE_ABIERTO instrucciones_funcion CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // instrucciones_funciones_sin_return ::= instrucciones_funciones_sin_return opciones_instrucciones_sin_return 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_funciones_sin_return",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // instrucciones_funciones_sin_return ::= opciones_instrucciones_sin_return 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_funciones_sin_return",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // instrucciones_funcion ::= instrucciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_funcion",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // instrucciones_funcion ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_funcion",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // parametros_funcion_declaracion ::= parametros_funcion_declaracion COMA parametro_funcion_declaracion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_funcion_declaracion",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // parametros_funcion_declaracion ::= parametro_funcion_declaracion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_funcion_declaracion",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // parametro_funcion_declaracion ::= ID DOS_PUNTOS tipo_dato_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro_funcion_declaracion",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // funcion_return ::= RETURN instruccion PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_return",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // funcion_return ::= RETURN PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_return",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // llamada_funcion_asignacion ::= ID PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion_asignacion",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // llamada_funcion_asignacion ::= ID PARENTESIS_ABIERTO instruccion PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion_asignacion",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // llamada_funcion_normal ::= ID PARENTESIS_ABIERTO PARENTESIS_CERRADO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion_normal",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // llamada_funcion_normal ::= ID PARENTESIS_ABIERTO instruccion PARENTESIS_CERRADO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion_normal",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // funcion_if ::= IF PARENTESIS_ABIERTO instruccion PARENTESIS_CERRADO CORCHETE_ABIERTO instrucciones_funcion CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_if",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // instruccion_break ::= BREAK PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion_break",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // instruccion_continue ::= CONTINUE PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion_continue",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
