
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.peter.typesecure.parser;

import com.peter.typesecure.lexer.Lexer;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\253\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\004\004\000\002\004\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\020\003\000\002\020\003\000\002" +
    "\015\006\000\002\007\005\000\002\011\005\000\002\011" +
    "\003\000\002\012\007\000\002\012\005\000\002\012\005" +
    "\000\002\010\003\000\002\010\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\014\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\016\004\000\002\016\004\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\017\010\000\002\017\010\000\002\017\010\000\002\017" +
    "\010\000\002\017\010\000\002\017\010\000\002\017\010" +
    "\000\002\017\012\000\002\017\010\000\002\017\010\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\021\005\000\002\022\005\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\003\000\002\023\003\000\002" +
    "\023\005\000\002\023\005\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\005\000\002\023" +
    "\005\000\002\024\005\000\002\024\005\000\002\024\004" +
    "\000\002\024\005\000\002\024\003\000\002\025\005\000" +
    "\002\025\005\000\002\025\005\000\002\026\006\000\002" +
    "\026\006\000\002\026\006\000\002\027\006\000\002\027" +
    "\006\000\002\027\006\000\002\030\006\000\002\030\006" +
    "\000\002\030\006\000\002\031\006\000\002\031\006\000" +
    "\002\031\006\000\002\032\010\000\002\032\010\000\002" +
    "\036\010\000\002\036\010\000\002\036\010\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\033\007\000\002\033\007\000" +
    "\002\033\007\000\002\034\007\000\002\034\007\000\002" +
    "\034\007\000\002\037\011\000\002\040\005\000\002\040" +
    "\003\000\002\041\011\000\002\041\012\000\002\041\013" +
    "\000\002\041\014\000\002\041\015\000\002\041\016\000" +
    "\002\041\017\000\002\041\020\000\002\044\003\000\002" +
    "\044\002\000\002\045\004\000\002\045\003\000\002\046" +
    "\003\000\002\046\003\000\002\046\003\000\002\046\003" +
    "\000\002\046\003\000\002\046\005\000\002\042\005\000" +
    "\002\042\003\000\002\043\005\000\002\047\005\000\002" +
    "\047\006\000\002\050\006\000\002\050\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0163\000\014\006\017\017\004\020\012\053\022\065" +
    "\021\001\002\000\004\006\uffee\001\002\000\022\002\ufffa" +
    "\006\ufffa\017\ufffa\020\ufffa\052\ufffa\053\ufffa\065\ufffa\076" +
    "\ufffa\001\002\000\022\002\ufff8\006\ufff8\017\ufff8\020\ufff8" +
    "\052\ufff8\053\ufff8\065\ufff8\076\ufff8\001\002\000\004\002" +
    "\u0165\001\002\000\016\002\uffff\006\017\017\004\020\012" +
    "\053\022\065\021\001\002\000\022\002\ufff9\006\ufff9\017" +
    "\ufff9\020\ufff9\052\ufff9\053\ufff9\065\ufff9\076\ufff9\001\002" +
    "\000\004\006\uffed\001\002\000\022\002\ufffb\006\ufffb\017" +
    "\ufffb\020\ufffb\052\ufffb\053\ufffb\065\ufffb\076\ufffb\001\002" +
    "\000\022\002\ufffd\006\ufffd\017\ufffd\020\ufffd\052\ufffd\053" +
    "\ufffd\065\ufffd\076\ufffd\001\002\000\022\002\ufffc\006\ufffc" +
    "\017\ufffc\020\ufffc\052\ufffc\053\ufffc\065\ufffc\076\ufffc\001" +
    "\002\000\004\002\000\001\002\000\006\027\u015d\033\u015c" +
    "\001\002\000\004\006\u0151\001\002\000\004\045\u0146\001" +
    "\002\000\004\006\023\001\002\000\004\027\024\001\002" +
    "\000\006\006\025\030\030\001\002\000\004\047\u0144\001" +
    "\002\000\004\030\u012e\001\002\000\006\030\uff5c\046\u012c" +
    "\001\002\000\006\047\032\051\031\001\002\000\020\006" +
    "\017\017\004\020\012\052\uff66\053\022\065\021\076\uff66" +
    "\001\002\000\014\012\034\013\035\014\033\015\040\016" +
    "\037\001\002\000\014\030\uffea\033\uffea\046\uffea\050\uffea" +
    "\051\uffea\001\002\000\014\030\uffec\033\uffec\046\uffec\050" +
    "\uffec\051\uffec\001\002\000\014\030\uffeb\033\uffeb\046\uffeb" +
    "\050\uffeb\051\uffeb\001\002\000\004\051\046\001\002\000" +
    "\004\051\041\001\002\000\014\030\uffe9\033\uffe9\046\uffe9" +
    "\050\uffe9\051\uffe9\001\002\000\016\006\017\017\004\020" +
    "\012\052\uff66\053\022\065\021\001\002\000\004\052\045" +
    "\001\002\000\020\006\017\017\004\020\012\052\uff67\053" +
    "\022\065\021\076\uff67\001\002\000\022\002\ufffe\006\ufffe" +
    "\017\ufffe\020\ufffe\052\ufffe\053\ufffe\065\ufffe\076\ufffe\001" +
    "\002\000\022\002\uff6d\006\uff6d\017\uff6d\020\uff6d\052\uff6d" +
    "\053\uff6d\065\uff6d\076\uff6d\001\002\000\016\006\017\017" +
    "\004\020\012\053\022\065\021\076\uff66\001\002\000\004" +
    "\076\050\001\002\000\040\004\076\005\061\006\070\007" +
    "\102\010\066\011\100\021\106\022\051\027\054\036\063" +
    "\054\075\055\060\056\105\057\073\077\074\001\002\000" +
    "\030\004\076\005\061\006\114\007\102\021\106\022\051" +
    "\027\111\054\075\055\060\057\073\077\074\001\002\000" +
    "\012\030\uffe2\045\uff7b\046\uffe2\050\uffe2\001\002\000\014" +
    "\030\uff92\034\uff92\035\uff92\046\uff92\050\uff92\001\002\000" +
    "\040\004\076\005\061\006\114\007\102\010\066\011\100" +
    "\021\106\022\051\027\054\036\063\054\075\055\060\056" +
    "\105\057\073\077\074\001\002\000\014\030\uffe5\043\243" +
    "\044\242\046\uffe5\050\uffe5\001\002\000\016\030\uffe4\043" +
    "\235\044\234\045\uff7d\046\uffe4\050\uffe4\001\002\000\042" +
    "\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\030\uffd6\034" +
    "\uffd6\035\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6" +
    "\044\uffd6\046\uffd6\050\uffd6\001\002\000\004\027\u0118\001" +
    "\002\000\042\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1" +
    "\030\uffd1\034\uffd1\035\uffd1\037\uffd1\040\uffd1\041\uffd1\042" +
    "\uffd1\043\uffd1\044\uffd1\046\uffd1\050\uffd1\001\002\000\042" +
    "\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\030\uffd5\034" +
    "\uffd5\035\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5" +
    "\044\uffd5\046\uffd5\050\uffd5\001\002\000\040\004\076\005" +
    "\061\006\114\007\102\010\066\011\100\021\106\022\051" +
    "\027\054\036\063\054\075\055\060\056\105\057\073\077" +
    "\074\001\002\000\042\021\uffd4\022\uffd4\023\uffd4\024\uffd4" +
    "\025\uffd4\030\uffd4\034\uffd4\035\uffd4\037\uffd4\040\uffd4\041" +
    "\uffd4\042\uffd4\043\uffd4\044\uffd4\046\uffd4\050\uffd4\001\002" +
    "\000\004\050\u010a\001\002\000\020\030\uffa9\034\uffa9\035" +
    "\uffa9\043\u0101\044\u0100\046\uffa9\050\uffa9\001\002\000\012" +
    "\030\uffe0\045\uff79\046\uffe0\050\uffe0\001\002\000\042\021" +
    "\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\027\374\030\uffd0" +
    "\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045" +
    "\132\046\uffd0\050\uffd0\001\002\000\010\030\uffdf\046\uffdf" +
    "\050\uffdf\001\002\000\014\030\uffe6\034\226\035\230\046" +
    "\uffe6\050\uffe6\001\002\000\004\027\365\001\002\000\004" +
    "\045\307\001\002\000\004\027\300\001\002\000\042\021" +
    "\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\030\uffd2\034\uffd2" +
    "\035\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044" +
    "\uffd2\046\uffd2\050\uffd2\001\002\000\042\021\uffd3\022\uffd3" +
    "\023\uffd3\024\uffd3\025\uffd3\030\uffd3\034\uffd3\035\uffd3\037" +
    "\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\046\uffd3" +
    "\050\uffd3\001\002\000\020\030\uffa8\034\uffa8\035\uffa8\043" +
    "\267\044\266\046\uffa8\050\uffa8\001\002\000\036\021\122" +
    "\022\124\023\120\024\121\025\123\030\uffe7\037\207\040" +
    "\211\041\204\042\205\043\203\044\210\046\uffe7\050\uffe7" +
    "\001\002\000\044\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025" +
    "\uffcf\030\uffcf\034\uffcf\035\uffcf\037\uffcf\040\uffcf\041\uffcf" +
    "\042\uffcf\043\uffcf\044\uffcf\045\162\046\uffcf\050\uffcf\001" +
    "\002\000\012\030\uffe1\045\uff7a\046\uffe1\050\uffe1\001\002" +
    "\000\004\045\252\001\002\000\004\027\154\001\002\000" +
    "\030\004\076\005\061\006\114\007\102\021\106\022\051" +
    "\027\111\054\075\055\060\057\073\077\074\001\002\000" +
    "\012\030\uffe3\045\uff7c\046\uffe3\050\uffe3\001\002\000\004" +
    "\045\uff7b\001\002\000\030\004\076\005\061\006\114\007" +
    "\102\021\106\022\051\027\111\054\075\055\060\057\073" +
    "\077\074\001\002\000\004\045\uff7d\001\002\000\004\045" +
    "\uff79\001\002\000\044\021\uffd0\022\uffd0\023\uffd0\024\uffd0" +
    "\025\uffd0\030\uffd0\034\uffd0\035\uffd0\037\uffd0\040\uffd0\041" +
    "\uffd0\042\uffd0\043\uffd0\044\uffd0\045\132\046\uffd0\050\uffd0" +
    "\001\002\000\042\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025" +
    "\uffdd\030\uffdd\034\uffdd\035\uffdd\037\uffdd\040\uffdd\041\uffdd" +
    "\042\uffdd\043\uffdd\044\uffdd\046\uffdd\050\uffdd\001\002\000" +
    "\004\045\uff7a\001\002\000\004\045\uff7c\001\002\000\030" +
    "\004\076\005\061\006\114\007\102\021\106\022\051\027" +
    "\111\054\075\055\060\057\073\077\074\001\002\000\030" +
    "\004\076\005\061\006\114\007\102\021\106\022\051\027" +
    "\111\054\075\055\060\057\073\077\074\001\002\000\030" +
    "\004\076\005\061\006\114\007\102\021\106\022\051\027" +
    "\111\054\075\055\060\057\073\077\074\001\002\000\030" +
    "\004\076\005\061\006\114\007\102\021\106\022\051\027" +
    "\111\054\075\055\060\057\073\077\074\001\002\000\030" +
    "\004\076\005\061\006\114\007\102\021\106\022\051\027" +
    "\111\054\075\055\060\057\073\077\074\001\002\000\042" +
    "\021\uffdb\022\uffdb\023\120\024\uffdb\025\123\030\uffdb\034" +
    "\uffdb\035\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb" +
    "\044\uffdb\046\uffdb\050\uffdb\001\002\000\042\021\uffd9\022" +
    "\uffd9\023\uffd9\024\uffd9\025\uffd9\030\uffd9\034\uffd9\035\uffd9" +
    "\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\046" +
    "\uffd9\050\uffd9\001\002\000\042\021\uffdc\022\uffdc\023\120" +
    "\024\uffdc\025\123\030\uffdc\034\uffdc\035\uffdc\037\uffdc\040" +
    "\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc\046\uffdc\050\uffdc" +
    "\001\002\000\042\021\uffd8\022\uffd8\023\120\024\uffd8\025" +
    "\123\030\uffd8\034\uffd8\035\uffd8\037\uffd8\040\uffd8\041\uffd8" +
    "\042\uffd8\043\uffd8\044\uffd8\046\uffd8\050\uffd8\001\002\000" +
    "\042\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda\030\uffda" +
    "\034\uffda\035\uffda\037\uffda\040\uffda\041\uffda\042\uffda\043" +
    "\uffda\044\uffda\046\uffda\050\uffda\001\002\000\014\060\134" +
    "\061\137\062\136\063\133\064\135\001\002\000\004\027" +
    "\150\001\002\000\042\021\uff90\022\uff90\023\uff90\024\uff90" +
    "\025\uff90\030\uff90\034\uff90\035\uff90\037\uff90\040\uff90\041" +
    "\uff90\042\uff90\043\uff90\044\uff90\046\uff90\050\uff90\001\002" +
    "\000\004\027\145\001\002\000\004\027\143\001\002\000" +
    "\004\027\140\001\002\000\030\004\076\005\061\006\114" +
    "\007\102\021\106\022\051\027\111\054\075\055\060\057" +
    "\073\077\074\001\002\000\016\021\122\022\124\023\120" +
    "\024\121\025\123\030\142\001\002\000\012\030\uff82\045" +
    "\uff82\046\uff82\050\uff82\001\002\000\004\030\144\001\002" +
    "\000\012\030\uff78\045\uff78\046\uff78\050\uff78\001\002\000" +
    "\040\004\076\005\061\006\070\007\102\010\066\011\100" +
    "\021\106\022\051\027\054\036\063\054\075\055\060\056" +
    "\105\057\073\077\074\001\002\000\004\030\147\001\002" +
    "\000\012\030\uff7e\045\uff7e\046\uff7e\050\uff7e\001\002\000" +
    "\004\030\151\001\002\000\012\030\uff75\045\uff75\046\uff75" +
    "\050\uff75\001\002\000\016\021\122\022\124\023\120\024" +
    "\121\025\123\030\153\001\002\000\042\021\uffd7\022\uffd7" +
    "\023\uffd7\024\uffd7\025\uffd7\030\uffd7\034\uffd7\035\uffd7\037" +
    "\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7\046\uffd7" +
    "\050\uffd7\001\002\000\040\004\076\005\061\006\114\007" +
    "\161\010\066\011\100\021\106\022\051\027\054\036\063" +
    "\054\075\055\060\056\105\057\073\077\074\001\002\000" +
    "\006\043\243\044\242\001\002\000\010\043\235\044\234" +
    "\045\uff7d\001\002\000\010\030\227\034\226\035\230\001" +
    "\002\000\032\021\122\022\124\023\120\024\121\025\123" +
    "\030\206\037\207\040\211\041\204\042\205\043\203\044" +
    "\210\001\002\000\034\021\uffcf\022\uffcf\023\uffcf\024\uffcf" +
    "\025\uffcf\030\163\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043" +
    "\uffcf\044\uffcf\045\162\001\002\000\014\060\166\061\170" +
    "\062\167\063\164\064\165\001\002\000\020\030\uff86\034" +
    "\uff86\035\uff86\043\uff86\044\uff86\046\uff86\050\uff86\001\002" +
    "\000\004\027\201\001\002\000\004\027\176\001\002\000" +
    "\042\021\uff91\022\uff91\023\uff91\024\uff91\025\uff91\030\uff91" +
    "\034\uff91\035\uff91\037\uff91\040\uff91\041\uff91\042\uff91\043" +
    "\uff91\044\uff91\046\uff91\050\uff91\001\002\000\004\027\174" +
    "\001\002\000\004\027\171\001\002\000\030\004\076\005" +
    "\061\006\114\007\102\021\106\022\051\027\111\054\075" +
    "\055\060\057\073\077\074\001\002\000\016\021\122\022" +
    "\124\023\120\024\121\025\123\030\173\001\002\000\012" +
    "\030\uff81\045\uff81\046\uff81\050\uff81\001\002\000\004\030" +
    "\175\001\002\000\012\030\uff77\045\uff77\046\uff77\050\uff77" +
    "\001\002\000\040\004\076\005\061\006\070\007\102\010" +
    "\066\011\100\021\106\022\051\027\054\036\063\054\075" +
    "\055\060\056\105\057\073\077\074\001\002\000\004\030" +
    "\200\001\002\000\012\030\uff7f\045\uff7f\046\uff7f\050\uff7f" +
    "\001\002\000\004\030\202\001\002\000\012\030\uff74\045" +
    "\uff74\046\uff74\050\uff74\001\002\000\034\004\076\005\061" +
    "\006\114\007\102\010\223\011\224\021\106\022\051\027" +
    "\111\054\075\055\060\057\073\077\074\001\002\000\030" +
    "\004\076\005\061\006\114\007\102\021\106\022\051\027" +
    "\111\054\075\055\060\057\073\077\074\001\002\000\030" +
    "\004\076\005\061\006\114\007\102\021\106\022\051\027" +
    "\111\054\075\055\060\057\073\077\074\001\002\000\020" +
    "\030\uff88\034\uff88\035\uff88\043\uff88\044\uff88\046\uff88\050" +
    "\uff88\001\002\000\030\004\076\005\061\006\114\007\102" +
    "\021\106\022\051\027\111\054\075\055\060\057\073\077" +
    "\074\001\002\000\034\004\076\005\061\006\114\007\102" +
    "\010\214\011\215\021\106\022\051\027\111\054\075\055" +
    "\060\057\073\077\074\001\002\000\030\004\076\005\061" +
    "\006\114\007\102\021\106\022\051\027\111\054\075\055" +
    "\060\057\073\077\074\001\002\000\026\021\122\022\124" +
    "\023\120\024\121\025\123\030\uffbc\034\uffbc\035\uffbc\046" +
    "\uffbc\050\uffbc\001\002\000\016\030\uff98\034\uff98\035\uff98" +
    "\045\uff7d\046\uff98\050\uff98\001\002\000\014\030\uffad\034" +
    "\uffad\035\uffad\046\uffad\050\uffad\001\002\000\014\030\uffab" +
    "\034\uffab\035\uffab\046\uffab\050\uffab\001\002\000\026\021" +
    "\122\022\124\023\120\024\121\025\123\030\uffba\034\uffba" +
    "\035\uffba\046\uffba\050\uffba\001\002\000\026\021\122\022" +
    "\124\023\120\024\121\025\123\030\uffbd\034\uffbd\035\uffbd" +
    "\046\uffbd\050\uffbd\001\002\000\026\021\122\022\124\023" +
    "\120\024\121\025\123\030\uffbe\034\uffbe\035\uffbe\046\uffbe" +
    "\050\uffbe\001\002\000\026\021\122\022\124\023\120\024" +
    "\121\025\123\030\uffbf\034\uffbf\035\uffbf\046\uffbf\050\uffbf" +
    "\001\002\000\016\030\uff99\034\uff99\035\uff99\045\uff7d\046" +
    "\uff99\050\uff99\001\002\000\014\030\uffb5\034\uffb5\035\uffb5" +
    "\046\uffb5\050\uffb5\001\002\000\014\030\uffb3\034\uffb3\035" +
    "\uffb3\046\uffb3\050\uffb3\001\002\000\026\021\122\022\124" +
    "\023\120\024\121\025\123\030\uffbb\034\uffbb\035\uffbb\046" +
    "\uffbb\050\uffbb\001\002\000\040\004\076\005\061\006\114" +
    "\007\102\010\066\011\100\021\106\022\051\027\054\036" +
    "\063\054\075\055\060\056\105\057\073\077\074\001\002" +
    "\000\020\030\uff87\034\uff87\035\uff87\043\uff87\044\uff87\046" +
    "\uff87\050\uff87\001\002\000\040\004\076\005\061\006\114" +
    "\007\102\010\066\011\100\021\106\022\051\027\054\036" +
    "\063\054\075\055\060\056\105\057\073\077\074\001\002" +
    "\000\014\030\uff95\034\uff95\035\uff95\046\uff95\050\uff95\001" +
    "\002\000\030\021\122\022\124\023\120\024\121\025\123" +
    "\037\207\040\211\041\204\042\205\043\203\044\210\001" +
    "\002\000\014\030\uff96\034\uff96\035\230\046\uff96\050\uff96" +
    "\001\002\000\030\004\076\005\061\006\114\007\102\021" +
    "\106\022\051\027\111\054\075\055\060\057\073\077\074" +
    "\001\002\000\030\004\076\005\061\006\114\007\102\021" +
    "\106\022\051\027\111\054\075\055\060\057\073\077\074" +
    "\001\002\000\016\030\uff9d\034\uff9d\035\uff9d\045\uff7d\046" +
    "\uff9d\050\uff9d\001\002\000\026\021\122\022\124\023\120" +
    "\024\121\025\123\030\uff9b\034\uff9b\035\uff9b\046\uff9b\050" +
    "\uff9b\001\002\000\016\030\uff9c\034\uff9c\035\uff9c\045\uff7d" +
    "\046\uff9c\050\uff9c\001\002\000\026\021\122\022\124\023" +
    "\120\024\121\025\123\030\uff9a\034\uff9a\035\uff9a\046\uff9a" +
    "\050\uff9a\001\002\000\010\010\250\011\251\056\105\001" +
    "\002\000\010\010\245\011\246\056\105\001\002\000\014" +
    "\030\uff9f\034\uff9f\035\uff9f\046\uff9f\050\uff9f\001\002\000" +
    "\014\030\uffa7\034\uffa7\035\uffa7\046\uffa7\050\uffa7\001\002" +
    "\000\014\030\uffa6\034\uffa6\035\uffa6\046\uffa6\050\uffa6\001" +
    "\002\000\014\030\uff9e\034\uff9e\035\uff9e\046\uff9e\050\uff9e" +
    "\001\002\000\014\030\uffa3\034\uffa3\035\uffa3\046\uffa3\050" +
    "\uffa3\001\002\000\014\030\uffa2\034\uffa2\035\uffa2\046\uffa2" +
    "\050\uffa2\001\002\000\012\060\255\062\256\063\253\064" +
    "\254\001\002\000\004\027\264\001\002\000\004\027\261" +
    "\001\002\000\042\021\uff8f\022\uff8f\023\uff8f\024\uff8f\025" +
    "\uff8f\030\uff8f\034\uff8f\035\uff8f\037\uff8f\040\uff8f\041\uff8f" +
    "\042\uff8f\043\uff8f\044\uff8f\046\uff8f\050\uff8f\001\002\000" +
    "\004\027\257\001\002\000\004\030\260\001\002\000\012" +
    "\030\uff76\045\uff76\046\uff76\050\uff76\001\002\000\040\004" +
    "\076\005\061\006\070\007\102\010\066\011\100\021\106" +
    "\022\051\027\054\036\063\054\075\055\060\056\105\057" +
    "\073\077\074\001\002\000\004\030\263\001\002\000\012" +
    "\030\uff80\045\uff80\046\uff80\050\uff80\001\002\000\004\030" +
    "\265\001\002\000\012\030\uff73\045\uff73\046\uff73\050\uff73" +
    "\001\002\000\036\004\076\005\061\006\114\007\102\010" +
    "\275\011\276\021\106\022\051\027\111\054\075\055\060" +
    "\056\105\057\073\077\074\001\002\000\036\004\076\005" +
    "\061\006\114\007\102\010\271\011\272\021\106\022\051" +
    "\027\111\054\075\055\060\056\105\057\073\077\074\001" +
    "\002\000\014\030\uffa4\034\uffa4\035\uffa4\046\uffa4\050\uffa4" +
    "\001\002\000\014\030\uffb7\034\uffb7\035\uffb7\046\uffb7\050" +
    "\uffb7\001\002\000\014\030\uffb6\034\uffb6\035\uffb6\046\uffb6" +
    "\050\uffb6\001\002\000\026\021\122\022\124\023\120\024" +
    "\121\025\123\030\uffb2\034\uffb2\035\uffb2\046\uffb2\050\uffb2" +
    "\001\002\000\014\030\uffa0\034\uffa0\035\uffa0\046\uffa0\050" +
    "\uffa0\001\002\000\014\030\uffaf\034\uffaf\035\uffaf\046\uffaf" +
    "\050\uffaf\001\002\000\014\030\uffae\034\uffae\035\uffae\046" +
    "\uffae\050\uffae\001\002\000\026\021\122\022\124\023\120" +
    "\024\121\025\123\030\uffaa\034\uffaa\035\uffaa\046\uffaa\050" +
    "\uffaa\001\002\000\040\004\076\005\061\006\114\007\303" +
    "\010\066\011\100\021\106\022\051\027\054\036\063\054" +
    "\075\055\060\056\105\057\073\077\074\001\002\000\010" +
    "\030\306\034\226\035\230\001\002\000\032\021\122\022" +
    "\124\023\120\024\121\025\123\030\305\037\207\040\211" +
    "\041\204\042\205\043\203\044\210\001\002\000\034\021" +
    "\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\030\304\037\uffcf" +
    "\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045\162\001" +
    "\002\000\042\021\uff8c\022\uff8c\023\uff8c\024\uff8c\025\uff8c" +
    "\030\uff8c\034\uff8c\035\uff8c\037\uff8c\040\uff8c\041\uff8c\042" +
    "\uff8c\043\uff8c\044\uff8c\046\uff8c\050\uff8c\001\002\000\042" +
    "\021\uff8e\022\uff8e\023\uff8e\024\uff8e\025\uff8e\030\uff8e\034" +
    "\uff8e\035\uff8e\037\uff8e\040\uff8e\041\uff8e\042\uff8e\043\uff8e" +
    "\044\uff8e\046\uff8e\050\uff8e\001\002\000\042\021\uff8d\022" +
    "\uff8d\023\uff8d\024\uff8d\025\uff8d\030\uff8d\034\uff8d\035\uff8d" +
    "\037\uff8d\040\uff8d\041\uff8d\042\uff8d\043\uff8d\044\uff8d\046" +
    "\uff8d\050\uff8d\001\002\000\034\100\323\101\324\102\310" +
    "\103\317\104\321\105\316\106\315\107\314\110\322\111" +
    "\313\112\311\113\320\114\312\001\002\000\042\021\uffc2" +
    "\022\uffc2\023\uffc2\024\uffc2\025\uffc2\030\uffc2\034\uffc2\035" +
    "\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2" +
    "\046\uffc2\050\uffc2\001\002\000\004\027\360\001\002\000" +
    "\004\027\355\001\002\000\004\027\352\001\002\000\004" +
    "\027\347\001\002\000\004\027\344\001\002\000\004\027" +
    "\341\001\002\000\004\027\336\001\002\000\004\027\333" +
    "\001\002\000\004\027\330\001\002\000\004\027\325\001" +
    "\002\000\042\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4" +
    "\030\uffc4\034\uffc4\035\uffc4\037\uffc4\040\uffc4\041\uffc4\042" +
    "\uffc4\043\uffc4\044\uffc4\046\uffc4\050\uffc4\001\002\000\042" +
    "\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\030\uffc3\034" +
    "\uffc3\035\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3" +
    "\044\uffc3\046\uffc3\050\uffc3\001\002\000\030\004\076\005" +
    "\061\006\114\007\102\021\106\022\051\027\111\054\075" +
    "\055\060\057\073\077\074\001\002\000\016\021\122\022" +
    "\124\023\120\024\121\025\123\030\327\001\002\000\042" +
    "\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\030\uffc9\034" +
    "\uffc9\035\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9" +
    "\044\uffc9\046\uffc9\050\uffc9\001\002\000\030\004\076\005" +
    "\061\006\114\007\102\021\106\022\051\027\111\054\075" +
    "\055\060\057\073\077\074\001\002\000\016\021\122\022" +
    "\124\023\120\024\121\025\123\030\332\001\002\000\042" +
    "\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\030\uffcd\034" +
    "\uffcd\035\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd" +
    "\044\uffcd\046\uffcd\050\uffcd\001\002\000\030\004\076\005" +
    "\061\006\114\007\102\021\106\022\051\027\111\054\075" +
    "\055\060\057\073\077\074\001\002\000\016\021\122\022" +
    "\124\023\120\024\121\025\123\030\335\001\002\000\042" +
    "\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\030\uffc6\034" +
    "\uffc6\035\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6" +
    "\044\uffc6\046\uffc6\050\uffc6\001\002\000\030\004\076\005" +
    "\061\006\114\007\102\021\106\022\051\027\111\054\075" +
    "\055\060\057\073\077\074\001\002\000\016\021\122\022" +
    "\124\023\120\024\121\025\123\030\340\001\002\000\042" +
    "\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce\030\uffce\034" +
    "\uffce\035\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043\uffce" +
    "\044\uffce\046\uffce\050\uffce\001\002\000\030\004\076\005" +
    "\061\006\114\007\102\021\106\022\051\027\111\054\075" +
    "\055\060\057\073\077\074\001\002\000\016\021\122\022" +
    "\124\023\120\024\121\025\123\030\343\001\002\000\042" +
    "\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\030\uffcc\034" +
    "\uffcc\035\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc" +
    "\044\uffcc\046\uffcc\050\uffcc\001\002\000\030\004\076\005" +
    "\061\006\114\007\102\021\106\022\051\027\111\054\075" +
    "\055\060\057\073\077\074\001\002\000\016\021\122\022" +
    "\124\023\120\024\121\025\123\030\346\001\002\000\042" +
    "\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\030\uffcb\034" +
    "\uffcb\035\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb" +
    "\044\uffcb\046\uffcb\050\uffcb\001\002\000\030\004\076\005" +
    "\061\006\114\007\102\021\106\022\051\027\111\054\075" +
    "\055\060\057\073\077\074\001\002\000\016\021\122\022" +
    "\124\023\120\024\121\025\123\030\351\001\002\000\042" +
    "\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca\030\uffca\034" +
    "\uffca\035\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca" +
    "\044\uffca\046\uffca\050\uffca\001\002\000\030\004\076\005" +
    "\061\006\114\007\102\021\106\022\051\027\111\054\075" +
    "\055\060\057\073\077\074\001\002\000\016\021\122\022" +
    "\124\023\120\024\121\025\123\030\354\001\002\000\042" +
    "\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\030\uffc8\034" +
    "\uffc8\035\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8" +
    "\044\uffc8\046\uffc8\050\uffc8\001\002\000\030\004\076\005" +
    "\061\006\114\007\102\021\106\022\051\027\111\054\075" +
    "\055\060\057\073\077\074\001\002\000\016\021\122\022" +
    "\124\023\120\024\121\025\123\030\357\001\002\000\042" +
    "\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\030\uffc5\034" +
    "\uffc5\035\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5" +
    "\044\uffc5\046\uffc5\050\uffc5\001\002\000\030\004\076\005" +
    "\061\006\114\007\102\021\106\022\051\027\111\054\075" +
    "\055\060\057\073\077\074\001\002\000\016\021\122\022" +
    "\124\023\120\024\121\025\123\046\362\001\002\000\030" +
    "\004\076\005\061\006\114\007\102\021\106\022\051\027" +
    "\111\054\075\055\060\057\073\077\074\001\002\000\016" +
    "\021\122\022\124\023\120\024\121\025\123\030\364\001" +
    "\002\000\042\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7" +
    "\030\uffc7\034\uffc7\035\uffc7\037\uffc7\040\uffc7\041\uffc7\042" +
    "\uffc7\043\uffc7\044\uffc7\046\uffc7\050\uffc7\001\002\000\040" +
    "\004\076\005\061\006\114\007\370\010\066\011\100\021" +
    "\106\022\051\027\054\036\063\054\075\055\060\056\105" +
    "\057\073\077\074\001\002\000\010\030\373\034\226\035" +
    "\230\001\002\000\032\021\122\022\124\023\120\024\121" +
    "\025\123\030\372\037\207\040\211\041\204\042\205\043" +
    "\203\044\210\001\002\000\034\021\uffcf\022\uffcf\023\uffcf" +
    "\024\uffcf\025\uffcf\030\371\037\uffcf\040\uffcf\041\uffcf\042" +
    "\uffcf\043\uffcf\044\uffcf\045\162\001\002\000\022\030\uff83" +
    "\034\uff83\035\uff83\043\uff83\044\uff83\045\uff83\046\uff83\050" +
    "\uff83\001\002\000\022\030\uff85\034\uff85\035\uff85\043\uff85" +
    "\044\uff85\045\uff85\046\uff85\050\uff85\001\002\000\022\030" +
    "\uff84\034\uff84\035\uff84\043\uff84\044\uff84\045\uff84\046\uff84" +
    "\050\uff84\001\002\000\006\006\025\030\376\001\002\000" +
    "\004\030\377\001\002\000\010\030\uff5a\046\uff5a\050\uff5a" +
    "\001\002\000\010\030\uff59\046\uff59\050\uff59\001\002\000" +
    "\036\004\076\005\061\006\114\007\102\010\u0107\011\u0108" +
    "\021\106\022\051\027\111\054\075\055\060\056\105\057" +
    "\073\077\074\001\002\000\036\004\076\005\061\006\114" +
    "\007\102\010\u0103\011\u0104\021\106\022\051\027\111\054" +
    "\075\055\060\056\105\057\073\077\074\001\002\000\014" +
    "\030\uffa5\034\uffa5\035\uffa5\046\uffa5\050\uffa5\001\002\000" +
    "\014\030\uffb9\034\uffb9\035\uffb9\046\uffb9\050\uffb9\001\002" +
    "\000\014\030\uffb8\034\uffb8\035\uffb8\046\uffb8\050\uffb8\001" +
    "\002\000\026\021\122\022\124\023\120\024\121\025\123" +
    "\030\uffb4\034\uffb4\035\uffb4\046\uffb4\050\uffb4\001\002\000" +
    "\014\030\uffa1\034\uffa1\035\uffa1\046\uffa1\050\uffa1\001\002" +
    "\000\014\030\uffb1\034\uffb1\035\uffb1\046\uffb1\050\uffb1\001" +
    "\002\000\014\030\uffb0\034\uffb0\035\uffb0\046\uffb0\050\uffb0" +
    "\001\002\000\026\021\122\022\124\023\120\024\121\025" +
    "\123\030\uffac\034\uffac\035\uffac\046\uffac\050\uffac\001\002" +
    "\000\016\006\017\017\004\020\012\053\022\065\021\076" +
    "\u0111\001\002\000\020\006\uff61\017\uff61\020\uff61\052\uff61" +
    "\053\uff61\065\uff61\076\uff61\001\002\000\020\006\017\017" +
    "\004\020\012\052\u0115\053\022\065\021\076\u0111\001\002" +
    "\000\020\006\uff5f\017\uff5f\020\uff5f\052\uff5f\053\uff5f\065" +
    "\uff5f\076\uff5f\001\002\000\020\006\uff60\017\uff60\020\uff60" +
    "\052\uff60\053\uff60\065\uff60\076\uff60\001\002\000\020\006" +
    "\uff62\017\uff62\020\uff62\052\uff62\053\uff62\065\uff62\076\uff62" +
    "\001\002\000\020\006\uff63\017\uff63\020\uff63\052\uff63\053" +
    "\uff63\065\uff63\076\uff63\001\002\000\040\004\076\005\061" +
    "\006\070\007\102\010\066\011\100\021\106\022\051\027" +
    "\054\036\063\054\075\055\060\056\105\057\073\077\074" +
    "\001\002\000\020\006\uff64\017\uff64\020\uff64\052\uff64\053" +
    "\uff64\065\uff64\076\uff64\001\002\000\004\050\u0114\001\002" +
    "\000\020\006\uff5e\017\uff5e\020\uff5e\052\uff5e\053\uff5e\065" +
    "\uff5e\076\uff5e\001\002\000\022\002\uff69\006\uff69\017\uff69" +
    "\020\uff69\052\uff69\053\uff69\065\uff69\076\uff69\001\002\000" +
    "\020\006\uff65\017\uff65\020\uff65\052\uff65\053\uff65\065\uff65" +
    "\076\uff65\001\002\000\014\030\uff94\034\uff94\035\uff94\046" +
    "\uff94\050\uff94\001\002\000\040\004\076\005\061\006\114" +
    "\007\u011b\010\066\011\100\021\106\022\051\027\054\036" +
    "\063\054\075\055\060\056\105\057\073\077\074\001\002" +
    "\000\010\030\u011e\034\226\035\230\001\002\000\032\021" +
    "\122\022\124\023\120\024\121\025\123\030\u011d\037\207" +
    "\040\211\041\204\042\205\043\203\044\210\001\002\000" +
    "\034\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\030\u011c" +
    "\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045" +
    "\162\001\002\000\042\021\uff89\022\uff89\023\uff89\024\uff89" +
    "\025\uff89\030\uff89\034\uff89\035\uff89\037\uff89\040\uff89\041" +
    "\uff89\042\uff89\043\uff89\044\uff89\046\uff89\050\uff89\001\002" +
    "\000\042\021\uff8b\022\uff8b\023\uff8b\024\uff8b\025\uff8b\030" +
    "\uff8b\034\uff8b\035\uff8b\037\uff8b\040\uff8b\041\uff8b\042\uff8b" +
    "\043\uff8b\044\uff8b\046\uff8b\050\uff8b\001\002\000\042\021" +
    "\uff8a\022\uff8a\023\uff8a\024\uff8a\025\uff8a\030\uff8a\034\uff8a" +
    "\035\uff8a\037\uff8a\040\uff8a\041\uff8a\042\uff8a\043\uff8a\044" +
    "\uff8a\046\uff8a\050\uff8a\001\002\000\010\030\u0123\034\uff92" +
    "\035\uff92\001\002\000\010\030\u0122\034\226\035\230\001" +
    "\002\000\032\021\122\022\124\023\120\024\121\025\123" +
    "\030\153\037\207\040\211\041\204\042\205\043\203\044" +
    "\210\001\002\000\014\030\uff93\034\uff93\035\uff93\046\uff93" +
    "\050\uff93\001\002\000\014\030\uff97\034\uff97\035\uff97\046" +
    "\uff97\050\uff97\001\002\000\042\021\uffde\022\uffde\023\uffde" +
    "\024\uffde\025\uffde\030\uffde\034\uffde\035\uffde\037\uffde\040" +
    "\uffde\041\uffde\042\uffde\043\uffde\044\uffde\046\uffde\050\uffde" +
    "\001\002\000\006\052\u0126\076\u0127\001\002\000\022\002" +
    "\uff6f\006\uff6f\017\uff6f\020\uff6f\052\uff6f\053\uff6f\065\uff6f" +
    "\076\uff6f\001\002\000\040\004\076\005\061\006\070\007" +
    "\102\010\066\011\100\021\106\022\051\027\054\036\063" +
    "\054\075\055\060\056\105\057\073\077\074\001\002\000" +
    "\004\050\u0129\001\002\000\016\006\017\017\004\020\012" +
    "\053\022\065\021\076\u0111\001\002\000\020\006\017\017" +
    "\004\020\012\052\u012b\053\022\065\021\076\u0111\001\002" +
    "\000\022\002\uff6b\006\uff6b\017\uff6b\020\uff6b\052\uff6b\053" +
    "\uff6b\065\uff6b\076\uff6b\001\002\000\004\006\025\001\002" +
    "\000\004\030\uff5d\001\002\000\006\047\u0130\051\u012f\001" +
    "\002\000\020\006\017\017\004\020\012\052\uff66\053\022" +
    "\065\021\076\uff66\001\002\000\014\012\034\013\035\014" +
    "\033\015\040\016\u0132\001\002\000\004\051\u0136\001\002" +
    "\000\004\051\u0133\001\002\000\016\006\017\017\004\020" +
    "\012\052\uff66\053\022\065\021\001\002\000\004\052\u0135" +
    "\001\002\000\022\002\uff6c\006\uff6c\017\uff6c\020\uff6c\052" +
    "\uff6c\053\uff6c\065\uff6c\076\uff6c\001\002\000\016\006\017" +
    "\017\004\020\012\053\022\065\021\076\uff66\001\002\000" +
    "\004\076\u0138\001\002\000\040\004\076\005\061\006\070" +
    "\007\102\010\066\011\100\021\106\022\051\027\054\036" +
    "\063\054\075\055\060\056\105\057\073\077\074\001\002" +
    "\000\004\050\u013a\001\002\000\016\006\017\017\004\020" +
    "\012\053\022\065\021\076\u0111\001\002\000\020\006\017" +
    "\017\004\020\012\052\u013c\053\022\065\021\076\u0111\001" +
    "\002\000\022\002\uff68\006\uff68\017\uff68\020\uff68\052\uff68" +
    "\053\uff68\065\uff68\076\uff68\001\002\000\006\052\u013e\076" +
    "\u013f\001\002\000\022\002\uff6e\006\uff6e\017\uff6e\020\uff6e" +
    "\052\uff6e\053\uff6e\065\uff6e\076\uff6e\001\002\000\040\004" +
    "\076\005\061\006\070\007\102\010\066\011\100\021\106" +
    "\022\051\027\054\036\063\054\075\055\060\056\105\057" +
    "\073\077\074\001\002\000\004\050\u0141\001\002\000\016" +
    "\006\017\017\004\020\012\053\022\065\021\076\u0111\001" +
    "\002\000\020\006\017\017\004\020\012\052\u0143\053\022" +
    "\065\021\076\u0111\001\002\000\022\002\uff6a\006\uff6a\017" +
    "\uff6a\020\uff6a\052\uff6a\053\uff6a\065\uff6a\076\uff6a\001\002" +
    "\000\012\012\034\013\035\014\033\015\040\001\002\000" +
    "\006\030\uff5b\046\uff5b\001\002\000\004\066\u0147\001\002" +
    "\000\004\027\u0148\001\002\000\040\004\076\005\061\006" +
    "\070\007\102\010\066\011\100\021\106\022\051\027\054" +
    "\036\063\054\075\055\060\056\105\057\073\077\074\001" +
    "\002\000\006\030\uff70\046\uff70\001\002\000\006\030\u014c" +
    "\046\u014b\001\002\000\040\004\076\005\061\006\070\007" +
    "\102\010\066\011\100\021\106\022\051\027\054\036\063" +
    "\054\075\055\060\056\105\057\073\077\074\001\002\000" +
    "\004\050\u014d\001\002\000\022\002\uff72\006\uff72\017\uff72" +
    "\020\uff72\052\uff72\053\uff72\065\uff72\076\uff72\001\002\000" +
    "\006\030\uff71\046\uff71\001\002\000\006\046\ufff2\050\ufff2" +
    "\001\002\000\006\046\u0159\050\u015a\001\002\000\006\033" +
    "\u0152\047\u0153\001\002\000\040\004\076\005\061\006\070" +
    "\007\102\010\066\011\100\021\106\022\051\027\054\036" +
    "\063\054\075\055\060\056\105\057\073\077\074\001\002" +
    "\000\012\012\034\013\035\014\033\015\040\001\002\000" +
    "\010\033\u0155\046\uffef\050\uffef\001\002\000\040\004\076" +
    "\005\061\006\070\007\102\010\066\011\100\021\106\022" +
    "\051\027\054\036\063\054\075\055\060\056\105\057\073" +
    "\077\074\001\002\000\006\046\uffe8\050\uffe8\001\002\000" +
    "\006\046\ufff1\050\ufff1\001\002\000\006\046\ufff0\050\ufff0" +
    "\001\002\000\004\006\u0151\001\002\000\022\002\ufff4\006" +
    "\ufff4\017\ufff4\020\ufff4\052\ufff4\053\ufff4\065\ufff4\076\ufff4" +
    "\001\002\000\006\046\ufff3\050\ufff3\001\002\000\040\004" +
    "\076\005\061\006\070\007\102\010\066\011\100\021\106" +
    "\022\051\027\054\036\063\054\075\055\060\056\105\057" +
    "\073\077\074\001\002\000\006\006\025\030\u015f\001\002" +
    "\000\004\030\u0161\001\002\000\004\050\u0160\001\002\000" +
    "\022\002\uff58\006\uff58\017\uff58\020\uff58\052\uff58\053\uff58" +
    "\065\uff58\076\uff58\001\002\000\004\050\u0162\001\002\000" +
    "\022\002\uff57\006\uff57\017\uff57\020\uff57\052\uff57\053\uff57" +
    "\065\uff57\076\uff57\001\002\000\004\050\u0164\001\002\000" +
    "\022\002\ufff5\006\ufff5\017\ufff5\020\ufff5\052\ufff5\053\ufff5" +
    "\065\ufff5\076\ufff5\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0163\000\026\002\006\003\015\004\007\005\013\007" +
    "\014\010\017\015\012\037\004\041\010\050\005\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\005\043\007\014\010\017\015\012" +
    "\037\004\041\010\050\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\u014f\012\u014e\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\042\025\043\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\004\042\005\013\007\014\010\017\015" +
    "\012\037\004\041\010\044\u0124\050\005\001\001\000\004" +
    "\013\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\004\042\005\013\007\014\010\017\015" +
    "\012\037\004\041\010\044\041\050\005\001\001\000\002" +
    "\001\001\000\020\005\043\007\014\010\017\015\012\037" +
    "\004\041\010\050\005\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\004\042\005\013\007\014\010\017\015" +
    "\012\037\004\041\010\044\046\050\005\001\001\000\002" +
    "\001\001\000\042\006\064\016\100\017\076\023\052\024" +
    "\071\025\063\026\056\027\061\030\054\031\055\032\106" +
    "\033\051\034\102\035\103\036\066\047\070\001\001\000" +
    "\030\016\u0123\017\076\025\063\026\056\027\061\031\111" +
    "\032\116\033\107\034\115\035\103\036\112\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\016\u0120\017\076" +
    "\023\u011e\024\u011f\025\063\026\056\027\061\030\154\031" +
    "\155\032\116\033\107\034\115\035\103\036\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\016\231\017\076\023\052\024\u0116\025\063\026\056\027" +
    "\061\030\154\031\155\032\116\033\107\034\115\035\103" +
    "\036\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\016\114\017\076\025\063\026\056\027\061\031\111\032" +
    "\116\033\107\034\115\035\103\036\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\016\151\017\076\025" +
    "\063\026\056\027\061\031\111\032\116\033\107\034\115" +
    "\035\103\036\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\016\130\017\076\025\063\026" +
    "\056\027\061\031\111\032\116\033\107\034\115\035\103" +
    "\036\112\001\001\000\030\016\127\017\076\025\063\026" +
    "\056\027\061\031\111\032\116\033\107\034\115\035\103" +
    "\036\112\001\001\000\030\016\126\017\076\025\063\026" +
    "\056\027\061\031\111\032\116\033\107\034\115\035\103" +
    "\036\112\001\001\000\030\016\125\017\076\025\063\026" +
    "\056\027\061\031\111\032\116\033\107\034\115\035\103" +
    "\036\112\001\001\000\030\016\124\017\076\025\063\026" +
    "\056\027\061\031\111\032\116\033\107\034\115\035\103" +
    "\036\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\016\140" +
    "\017\076\025\063\026\056\027\061\031\111\032\116\033" +
    "\107\034\115\035\103\036\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\006\145\016\100\017\076\023\052\024\071\025\063" +
    "\026\056\027\061\030\054\031\055\032\106\033\051\034" +
    "\102\035\103\036\066\047\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\016\157\017\076" +
    "\023\052\024\156\025\063\026\056\027\061\030\154\031" +
    "\155\032\116\033\107\034\115\035\103\036\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\016\171" +
    "\017\076\025\063\026\056\027\061\031\111\032\116\033" +
    "\107\034\115\035\103\036\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\006\176\016\100\017\076\023\052\024\071\025\063" +
    "\026\056\027\061\030\054\031\055\032\106\033\051\034" +
    "\102\035\103\036\066\047\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\016\224\017\076\025\063\026\056\027\061\031\221" +
    "\032\116\033\107\034\115\035\103\036\112\001\001\000" +
    "\030\016\220\017\076\025\063\026\056\027\061\031\111" +
    "\032\116\033\107\034\115\035\103\036\112\001\001\000" +
    "\030\016\217\017\076\025\063\026\056\027\061\031\111" +
    "\032\116\033\107\034\115\035\103\036\112\001\001\000" +
    "\002\001\001\000\030\016\216\017\076\025\063\026\056" +
    "\027\061\031\111\032\116\033\107\034\115\035\103\036" +
    "\112\001\001\000\030\016\215\017\076\025\063\026\056" +
    "\027\061\031\212\032\116\033\107\034\115\035\103\036" +
    "\112\001\001\000\030\016\211\017\076\025\063\026\056" +
    "\027\061\031\111\032\116\033\107\034\115\035\103\036" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\016\231\017\076\023\052\024\232\025\063\026\056" +
    "\027\061\030\154\031\155\032\116\033\107\034\115\035" +
    "\103\036\112\001\001\000\002\001\001\000\036\016\231" +
    "\017\076\023\052\024\230\025\063\026\056\027\061\030" +
    "\154\031\155\032\116\033\107\034\115\035\103\036\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\016\240\017\076\025\063\026\056\027\061" +
    "\031\237\032\116\033\107\034\115\035\103\036\112\001" +
    "\001\000\030\016\236\017\076\025\063\026\056\027\061" +
    "\031\235\032\116\033\107\034\115\035\103\036\112\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\246\001\001\000\004\030" +
    "\243\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\006\261\016\100\017\076\023\052" +
    "\024\071\025\063\026\056\027\061\030\054\031\055\032" +
    "\106\033\051\034\102\035\103\036\066\047\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\016\276\017\076\025\063\026\056" +
    "\027\061\030\273\031\111\032\116\033\107\034\115\035" +
    "\103\036\112\001\001\000\032\016\272\017\076\025\063" +
    "\026\056\027\061\030\267\031\111\032\116\033\107\034" +
    "\115\035\103\036\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\016\301\017\076\023\052\024\300\025\063\026" +
    "\056\027\061\030\154\031\155\032\116\033\107\034\115" +
    "\035\103\036\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\016\325\017" +
    "\076\025\063\026\056\027\061\031\111\032\116\033\107" +
    "\034\115\035\103\036\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\016\330\017\076\025\063\026\056" +
    "\027\061\031\111\032\116\033\107\034\115\035\103\036" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\016\333\017\076\025\063\026\056\027\061\031\111\032" +
    "\116\033\107\034\115\035\103\036\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\016\336\017\076\025" +
    "\063\026\056\027\061\031\111\032\116\033\107\034\115" +
    "\035\103\036\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\016\341\017\076\025\063\026\056\027\061" +
    "\031\111\032\116\033\107\034\115\035\103\036\112\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\016\344" +
    "\017\076\025\063\026\056\027\061\031\111\032\116\033" +
    "\107\034\115\035\103\036\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\016\347\017\076\025\063\026" +
    "\056\027\061\031\111\032\116\033\107\034\115\035\103" +
    "\036\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\016\352\017\076\025\063\026\056\027\061\031\111" +
    "\032\116\033\107\034\115\035\103\036\112\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\016\355\017\076" +
    "\025\063\026\056\027\061\031\111\032\116\033\107\034" +
    "\115\035\103\036\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\016\360\017\076\025\063\026\056\027" +
    "\061\031\111\032\116\033\107\034\115\035\103\036\112" +
    "\001\001\000\002\001\001\000\030\016\362\017\076\025" +
    "\063\026\056\027\061\031\111\032\116\033\107\034\115" +
    "\035\103\036\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\016\366\017\076\023\052\024\365\025\063" +
    "\026\056\027\061\030\154\031\155\032\116\033\107\034" +
    "\115\035\103\036\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\042\374\043\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\016\u0108\017\076\025\063\026\056\027\061\030\u0105" +
    "\031\111\032\116\033\107\034\115\035\103\036\112\001" +
    "\001\000\032\016\u0104\017\076\025\063\026\056\027\061" +
    "\030\u0101\031\111\032\116\033\107\034\115\035\103\036" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\007\u010f" +
    "\010\017\015\u010e\037\u010a\041\u010d\045\u010b\046\u0111\050" +
    "\u010c\001\001\000\002\001\001\000\020\007\u010f\010\017" +
    "\015\u010e\037\u010a\041\u010d\046\u0115\050\u010c\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\006\u0112\016\100\017\076\023\052\024" +
    "\071\025\063\026\056\027\061\030\054\031\055\032\106" +
    "\033\051\034\102\035\103\036\066\047\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\016" +
    "\u0119\017\076\023\052\024\u0118\025\063\026\056\027\061" +
    "\030\154\031\155\032\116\033\107\034\115\035\103\036" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\006\u0127\016\100" +
    "\017\076\023\052\024\071\025\063\026\056\027\061\030" +
    "\054\031\055\032\106\033\051\034\102\035\103\036\066" +
    "\047\070\001\001\000\002\001\001\000\022\007\u010f\010" +
    "\017\015\u010e\037\u010a\041\u010d\045\u0129\046\u0111\050\u010c" +
    "\001\001\000\020\007\u010f\010\017\015\u010e\037\u010a\041" +
    "\u010d\046\u0115\050\u010c\001\001\000\002\001\001\000\004" +
    "\043\u012c\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\004\042\005\013\007\014\010\017\015\012\037\004" +
    "\041\010\044\u013c\050\005\001\001\000\004\013\u0130\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\004\042" +
    "\005\013\007\014\010\017\015\012\037\004\041\010\044" +
    "\u0133\050\005\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\004\042\005\013\007\014\010\017\015\012\037" +
    "\004\041\010\044\u0136\050\005\001\001\000\002\001\001" +
    "\000\042\006\u0138\016\100\017\076\023\052\024\071\025" +
    "\063\026\056\027\061\030\054\031\055\032\106\033\051" +
    "\034\102\035\103\036\066\047\070\001\001\000\002\001" +
    "\001\000\022\007\u010f\010\017\015\u010e\037\u010a\041\u010d" +
    "\045\u013a\046\u0111\050\u010c\001\001\000\020\007\u010f\010" +
    "\017\015\u010e\037\u010a\041\u010d\046\u0115\050\u010c\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\006\u013f\016\100\017\076\023\052\024\071\025\063" +
    "\026\056\027\061\030\054\031\055\032\106\033\051\034" +
    "\102\035\103\036\066\047\070\001\001\000\002\001\001" +
    "\000\022\007\u010f\010\017\015\u010e\037\u010a\041\u010d\045" +
    "\u0141\046\u0111\050\u010c\001\001\000\020\007\u010f\010\017" +
    "\015\u010e\037\u010a\041\u010d\046\u0115\050\u010c\001\001\000" +
    "\002\001\001\000\004\013\u0144\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\006\u0148\016" +
    "\100\017\076\023\052\024\071\025\063\026\056\027\061" +
    "\030\054\031\055\032\106\033\051\034\102\035\103\036" +
    "\066\040\u0149\047\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\006\u014d\016\100\017\076\023\052\024" +
    "\071\025\063\026\056\027\061\030\054\031\055\032\106" +
    "\033\051\034\102\035\103\036\066\047\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\006" +
    "\u0155\014\u0157\016\100\017\076\023\052\024\071\025\063" +
    "\026\056\027\061\030\054\031\055\032\106\033\051\034" +
    "\102\035\103\036\066\047\070\001\001\000\004\013\u0153" +
    "\001\001\000\002\001\001\000\044\006\u0155\014\u0156\016" +
    "\100\017\076\023\052\024\071\025\063\026\056\027\061" +
    "\030\054\031\055\032\106\033\051\034\102\035\103\036" +
    "\066\047\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\u015a\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\006\u0155\014\u0162\016\100" +
    "\017\076\023\052\024\071\025\063\026\056\027\061\030" +
    "\054\031\055\032\106\033\051\034\102\035\103\036\066" +
    "\047\070\001\001\000\006\042\u015d\043\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public Parser(Lexer lexer) {
        super(lexer);
    }

    //Metodo llamado automaticamente al encontrar error sintanctico


    public void syntax_error(Symbol s){

    String lexema = s.value.toString();
    int fila = s.right;
    int columna = s.left;
    
    System.out.println("Error Sintactico hallado");
    System.out.println("Lexema " + lexema + " linea"  + fila + " columna " + columna);

    }

    //Metodo llamado cuando no se puede recuperar de un error
    
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        
    String lexema = s.value.toString();
    int fila = s.right;
    int columna = s.left;
    
    System.out.println("Error Sintactico hallado PANIC MODE");
    System.out.println("Lexema " + lexema + " linea"  + fila + " columna " + columna);
        
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= ts 
            {
              Object RESULT =null;
		 System.out.println("Doc ok"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ts ::= instrucciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ts",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instrucciones opciones_instrucciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instrucciones ::= opciones_instrucciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // opciones_instrucciones ::= declaracion_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // opciones_instrucciones ::= asignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // opciones_instrucciones ::= funcion_console_log 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // opciones_instrucciones ::= declaracion_funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // opciones_instrucciones ::= llamada_funcion_normal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // dentro_bloque ::= incremento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dentro_bloque",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // dentro_bloque ::= decremento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dentro_bloque",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // asignacion ::= ID ASIGNACION variable_valor PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracion_variable ::= tipo_acceso_variable id_valor_variable_lista PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_variable",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // id_valor_variable_lista ::= id_valor_variable_lista COMA id_valor_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_valor_variable_lista",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // id_valor_variable_lista ::= id_valor_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_valor_variable_lista",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // id_valor_variable ::= ID DOS_PUNTOS tipo_dato_variable ASIGNACION variable_valor 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tipoDatoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tipoDatoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object tipoDato = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println(id + " " + tipoDato + " " + valor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_valor_variable",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // id_valor_variable ::= ID ASIGNACION variable_valor 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println(id + " " + valor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_valor_variable",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // id_valor_variable ::= ID DOS_PUNTOS tipo_dato_variable 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tipoDatoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tipoDatoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tipoDato = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println(id + " " + tipoDato + " " + " undefined"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_valor_variable",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo_acceso_variable ::= RCONST 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_acceso_variable",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo_acceso_variable ::= RLET 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_acceso_variable",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipo_dato_variable ::= RNUMBER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato_variable",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipo_dato_variable ::= RBIGINT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato_variable",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipo_dato_variable ::= RSTRING 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato_variable",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipo_dato_variable ::= RBOOLEAN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato_variable",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // variable_valor ::= instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_valor",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruccion ::= operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruccion ::= operaciones_logicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instruccion ::= funcion_boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instruccion ::= funcion_string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instruccion ::= funcion_char_at 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instruccion ::= funcion_to_lower_case 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instruccion ::= funcion_to_upper_case 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instruccion ::= funcion_concat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instruccion ::= llamada_funcion_asignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // operaciones_matematicas ::= MENOS operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // operaciones_matematicas ::= MAS operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // operaciones_matematicas ::= operaciones_matematicas MAS operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // operaciones_matematicas ::= operaciones_matematicas MENOS operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operaciones_matematicas ::= operaciones_matematicas MULTIPLICACION operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operaciones_matematicas ::= operaciones_matematicas DIVISION operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // operaciones_matematicas ::= operaciones_matematicas MOD operaciones_matematicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operaciones_matematicas ::= PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operaciones_matematicas ::= funcion_number 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operaciones_matematicas ::= funcion_bigint 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operaciones_matematicas ::= funcion_length 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // operaciones_matematicas ::= funciones_numericas_estaticas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // operaciones_matematicas ::= NUMBER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // operaciones_matematicas ::= BIGINT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // operaciones_matematicas ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // operaciones_matematicas ::= TEXTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_matematicas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // funciones_numericas_estaticas ::= MATH PUNTO ABS PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // funciones_numericas_estaticas ::= MATH PUNTO CEIL PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // funciones_numericas_estaticas ::= MATH PUNTO COS PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // funciones_numericas_estaticas ::= MATH PUNTO SIN PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // funciones_numericas_estaticas ::= MATH PUNTO TAN PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // funciones_numericas_estaticas ::= MATH PUNTO EXP PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // funciones_numericas_estaticas ::= MATH PUNTO FLOOR PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // funciones_numericas_estaticas ::= MATH PUNTO POW PARENTESIS_ABIERTO operaciones_matematicas COMA operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // funciones_numericas_estaticas ::= MATH PUNTO SQRT PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // funciones_numericas_estaticas ::= MATH PUNTO RANDOM PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // funciones_numericas_estaticas ::= MATH PUNTO E 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // funciones_numericas_estaticas ::= MATH PUNTO PI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // funciones_numericas_estaticas ::= MATH PUNTO SQRT2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_numericas_estaticas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // incremento ::= ID MAS MAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // decremento ::= ID MENOS MENOS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decremento",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // operaciones_relacionales ::= operaciones_matematicas MAYOR_QUE operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // operaciones_relacionales ::= operaciones_matematicas MAYOR_IGUAL operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // operaciones_relacionales ::= operaciones_matematicas MENOR_QUE operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // operaciones_relacionales ::= operaciones_matematicas MENOR_IGUAL operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // operaciones_relacionales ::= operaciones_matematicas COMPARACION operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // operaciones_relacionales ::= operaciones_matematicas DISTINTO operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // operaciones_relacionales ::= TRUE COMPARACION TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // operaciones_relacionales ::= TRUE COMPARACION FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // operaciones_relacionales ::= FALSE COMPARACION TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // operaciones_relacionales ::= FALSE COMPARACION FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // operaciones_relacionales ::= operaciones_matematicas COMPARACION TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // operaciones_relacionales ::= TRUE COMPARACION operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // operaciones_relacionales ::= operaciones_matematicas COMPARACION FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // operaciones_relacionales ::= FALSE COMPARACION operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // operaciones_relacionales ::= TRUE DISTINTO TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // operaciones_relacionales ::= TRUE DISTINTO FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // operaciones_relacionales ::= FALSE DISTINTO TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // operaciones_relacionales ::= FALSE DISTINTO FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // operaciones_relacionales ::= operaciones_matematicas DISTINTO TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // operaciones_relacionales ::= TRUE DISTINTO operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // operaciones_relacionales ::= operaciones_matematicas DISTINTO FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // operaciones_relacionales ::= FALSE DISTINTO operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // operaciones_relacionales ::= TRUE 
            {
              Object RESULT =null;
		 RESULT = "true"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // operaciones_relacionales ::= FALSE 
            {
              Object RESULT =null;
		 RESULT = "false"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // operaciones_relacionales ::= funcion_boolean COMPARACION TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // operaciones_relacionales ::= funcion_boolean COMPARACION FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // operaciones_relacionales ::= TRUE COMPARACION funcion_boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // operaciones_relacionales ::= FALSE COMPARACION funcion_boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // operaciones_relacionales ::= funcion_boolean DISTINTO TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // operaciones_relacionales ::= funcion_boolean DISTINTO FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // operaciones_relacionales ::= TRUE DISTINTO funcion_boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // operaciones_relacionales ::= FALSE DISTINTO funcion_boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // operaciones_relacionales ::= funcion_boolean COMPARACION funcion_boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // operaciones_relacionales ::= funcion_boolean DISTINTO funcion_boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // operaciones_relacionales ::= funcion_string COMPARACION funcion_string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // operaciones_relacionales ::= funcion_string DISTINTO funcion_string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // operaciones_relacionales ::= funcion_string COMPARACION operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // operaciones_relacionales ::= funcion_string DISTINTO operaciones_matematicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // operaciones_relacionales ::= operaciones_matematicas COMPARACION funcion_string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // operaciones_relacionales ::= operaciones_matematicas DISTINTO funcion_string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // operaciones_relacionales ::= PARENTESIS_ABIERTO operaciones_relacionales PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_relacionales",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // operaciones_logicas ::= operaciones_logicas AND operaciones_logicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // operaciones_logicas ::= operaciones_logicas OR operaciones_logicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // operaciones_logicas ::= NOT operaciones_logicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // operaciones_logicas ::= PARENTESIS_ABIERTO operaciones_logicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // operaciones_logicas ::= operaciones_relacionales 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // funcion_length ::= TEXTO PUNTO LENGTH 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_length",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // funcion_length ::= ID PUNTO LENGTH 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_length",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // funcion_length ::= variables_string PUNTO LENGTH 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_length",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // funcion_number ::= FNUMBER PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_number",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // funcion_number ::= FNUMBER PARENTESIS_ABIERTO operaciones_logicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_number",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // funcion_number ::= FNUMBER PARENTESIS_ABIERTO TEXTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_number",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // funcion_bigint ::= FBIGINT PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_bigint",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // funcion_bigint ::= FBIGINT PARENTESIS_ABIERTO operaciones_logicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_bigint",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // funcion_bigint ::= FBIGINT PARENTESIS_ABIERTO TEXTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_bigint",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // funcion_boolean ::= FBOOLEAN PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_boolean",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // funcion_boolean ::= FBOOLEAN PARENTESIS_ABIERTO operaciones_logicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_boolean",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // funcion_boolean ::= FBOOLEAN PARENTESIS_ABIERTO TEXTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_boolean",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // funcion_string ::= FSTRING PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_string",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // funcion_string ::= FSTRING PARENTESIS_ABIERTO operaciones_logicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_string",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // funcion_string ::= FSTRING PARENTESIS_ABIERTO TEXTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_string",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // funcion_char_at ::= ID PUNTO CHARAT PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_char_at",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // funcion_char_at ::= TEXTO PUNTO CHARAT PARENTESIS_ABIERTO operaciones_matematicas PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_char_at",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // funcion_concat ::= variables_string PUNTO CONCAT PARENTESIS_ABIERTO instruccion PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_concat",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // funcion_concat ::= TEXTO PUNTO CONCAT PARENTESIS_ABIERTO instruccion PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_concat",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // funcion_concat ::= ID PUNTO CONCAT PARENTESIS_ABIERTO instruccion PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_concat",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // variables_string ::= funcion_string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables_string",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // variables_string ::= funcion_char_at 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables_string",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // variables_string ::= funcion_to_lower_case 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables_string",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // variables_string ::= funcion_to_upper_case 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables_string",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // variables_string ::= funcion_concat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables_string",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // funcion_to_lower_case ::= ID PUNTO TOLOWERCASE PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_to_lower_case",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // funcion_to_lower_case ::= TEXTO PUNTO TOLOWERCASE PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_to_lower_case",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // funcion_to_lower_case ::= variables_string PUNTO TOLOWERCASE PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_to_lower_case",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // funcion_to_upper_case ::= ID PUNTO TOUPPERCASE PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_to_upper_case",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // funcion_to_upper_case ::= TEXTO PUNTO TOUPPERCASE PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_to_upper_case",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // funcion_to_upper_case ::= variables_string PUNTO TOUPPERCASE PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_to_upper_case",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // funcion_console_log ::= CONSOLE PUNTO LOG PARENTESIS_ABIERTO lista_instrucciones_console PARENTESIS_CERRADO PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 System.out.println(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_console_log",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // lista_instrucciones_console ::= lista_instrucciones_console COMA instruccion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instrucciones_console",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // lista_instrucciones_console ::= instruccion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instrucciones_console",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // declaracion_funcion ::= FUNCTION ID PARENTESIS_ABIERTO PARENTESIS_CERRADO CORCHETE_ABIERTO instrucciones_funciones CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // declaracion_funcion ::= FUNCTION ID PARENTESIS_ABIERTO parametros_funcion PARENTESIS_CERRADO CORCHETE_ABIERTO instrucciones_funciones CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // declaracion_funcion ::= FUNCTION ID PARENTESIS_ABIERTO PARENTESIS_CERRADO DOS_PUNTOS RVOID CORCHETE_ABIERTO instrucciones_funciones CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // declaracion_funcion ::= FUNCTION ID PARENTESIS_ABIERTO parametros_funcion PARENTESIS_CERRADO DOS_PUNTOS RVOID CORCHETE_ABIERTO instrucciones_funciones CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // declaracion_funcion ::= FUNCTION ID PARENTESIS_ABIERTO PARENTESIS_CERRADO CORCHETE_ABIERTO instrucciones_funciones RETURN instruccion PUNTO_COMA instrucciones_funciones_luego_return CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // declaracion_funcion ::= FUNCTION ID PARENTESIS_ABIERTO parametros_funcion PARENTESIS_CERRADO CORCHETE_ABIERTO instrucciones_funciones RETURN instruccion PUNTO_COMA instrucciones_funciones_luego_return CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // declaracion_funcion ::= FUNCTION ID PARENTESIS_ABIERTO PARENTESIS_CERRADO DOS_PUNTOS tipo_dato_variable CORCHETE_ABIERTO instrucciones_funciones RETURN instruccion PUNTO_COMA instrucciones_funciones_luego_return CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // declaracion_funcion ::= FUNCTION ID PARENTESIS_ABIERTO parametros_funcion PARENTESIS_CERRADO DOS_PUNTOS tipo_dato_variable CORCHETE_ABIERTO instrucciones_funciones RETURN instruccion PUNTO_COMA instrucciones_funciones_luego_return CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // instrucciones_funciones ::= instrucciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_funciones",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // instrucciones_funciones ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_funciones",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // instrucciones_funciones_luego_return ::= instrucciones_funciones_luego_return instruccion_luego_return 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_funciones_luego_return",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // instrucciones_funciones_luego_return ::= instruccion_luego_return 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_funciones_luego_return",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // instruccion_luego_return ::= declaracion_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion_luego_return",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // instruccion_luego_return ::= asignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion_luego_return",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // instruccion_luego_return ::= funcion_console_log 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion_luego_return",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // instruccion_luego_return ::= declaracion_funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion_luego_return",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // instruccion_luego_return ::= llamada_funcion_normal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion_luego_return",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // instruccion_luego_return ::= RETURN instruccion PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion_luego_return",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // parametros_funcion ::= parametro_funcion COMA parametro_funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_funcion",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // parametros_funcion ::= parametro_funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_funcion",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // parametro_funcion ::= ID DOS_PUNTOS tipo_dato_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro_funcion",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // llamada_funcion_asignacion ::= ID PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion_asignacion",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // llamada_funcion_asignacion ::= ID PARENTESIS_ABIERTO parametros_funcion PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion_asignacion",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // llamada_funcion_normal ::= ID PARENTESIS_ABIERTO PARENTESIS_CERRADO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion_normal",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // llamada_funcion_normal ::= ID PARENTESIS_ABIERTO parametros_funcion PARENTESIS_CERRADO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion_normal",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
